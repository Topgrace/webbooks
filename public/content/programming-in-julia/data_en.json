{"id":"programming-in-julia","locale":"en","nextCourse":"numerical-computing","prevCourse":"numerical-computing","title":"Programming in Julia","description":"An introduction to programming, including types, functions, multidimensional arrays, tuples, dictionaries, flow control, and plotting.","color":"#bf3131","author":"Samuel S. Watson","hero":"\\content\\programming-in-julia\\hero.jpg","goals":189,"sections":[{"id":"introduction","title":"Introduction","url":"/course/programming-in-julia/introduction","steps":["intro","step-julia-reasons","step-speed-note","step-1","step-2","step-3","step-4","step-5","step-julia-help","step-6","step-7","step-8","step-9","step-10"],"goals":17,"duration":25},{"id":"basics","title":"Basics","url":"/course/programming-in-julia/basics","steps":["basics","step-11","step-13","step-14","step-julia-variable","step-16","step-17","step-18","step-19","step-20","step-21","step-22","step-24","step-omit-return-keyword","step-other-function-syntax","step-25","step-26","step-27","step-28","step-29","step-30","step-31","step-32","step-nth-odd-solution","step-macro-note","step-33"],"goals":33,"duration":35},{"id":"types","title":"Types","url":"/course/programming-in-julia/types","steps":["types","step-34","step-35","step-36","step-37","step-38","step-39","step-40","step-41","step-42","step-43","step-44","step-45","step-46","step-47","step-48","step-49","step-50","step-51","step-52","step-53","step-54","step-55"],"goals":29,"duration":30},{"id":"conditionals","title":"Conditionals","url":"/course/programming-in-julia/conditionals","steps":["conditionals","step-56","step-57","step-58","step-59","step-myabs-solution","step-60","step-61"],"goals":7,"duration":10},{"id":"functions","title":"Functions","url":"/course/programming-in-julia/functions","steps":["functions","step-62","step-63","step-64","step-65","step-66","step-67","step-68","step-69","step-70","step-71","step-72","step-local-scope","step-scope-exercise","step-73","step-74","step-75","step-function-exercises","step-76"],"goals":20,"duration":25},{"id":"packages","title":"Packages","url":"/course/programming-in-julia/packages","steps":["packages","step-module","step-78","step-79","step-80"],"goals":5,"duration":10},{"id":"custom-types","title":"Custom types","url":"/course/programming-in-julia/custom-types","steps":["custom-types","step-85","step-86","step-multiple-dispatch","step-type-exercise","step-line-type-solution"],"goals":5,"duration":10},{"id":"lists-and-tuples","title":"Lists and Tuples","url":"/course/programming-in-julia/lists-and-tuples","steps":["lists-and-tuples","step-91","step-92","step-93","step-95","step-97","step-98","step-99","step-100","step-pushing","step-broadcasting","step-rotate-exercise","step-101","step-102","step-103","step-106","step-107","step-108","step-109","step-110","step-111","step-112","step-113","step-114","step-115","step-116","step-117","step-118","step-120","step-121","step-122","step-123"],"goals":34,"duration":45},{"id":"sets-and-dictionaries","title":"Sets and Dictionaries","url":"/course/programming-in-julia/sets-and-dictionaries","steps":["sets-and-dictionaries","step-124","step-125","step-126","step-127","step-128","step-129","step-130","step-131","step-132","step-133","step-134"],"goals":16,"duration":25},{"id":"iteration","title":"Iteration","url":"/course/programming-in-julia/iteration","steps":["iteration","step-135","step-136","step-137","step-137a","step-138","step-139","step-140","step-141","step-142","step-143","step-pascal-exercise"],"goals":12,"duration":25},{"id":"multidimensional-arrays","title":"Multidimensional Arrays","url":"/course/programming-in-julia/multidimensional-arrays","steps":["multidimensional-arrays","step-multidim","step-multidimensional-index","step-random-arrays","step-seeding","step-multidim-array-exercise"],"goals":7,"duration":15},{"id":"plotting","title":"Plotting","url":"/course/programming-in-julia/plotting","steps":["plotting","step-plotsjl-cheatsheet","step-save-plot","step-plots-exercise-1","step-plotting-solution","step-167"],"goals":4,"duration":10}],"steps":{"intro":{"id":"intro","title":"Intro","html":"<x-step id=\"intro\" goals=\"next-0\"><p>In subsequent Data Gymnasia courses, we will develop mathematical ideas in concert with corresponding computational skills. This relationship is symbiotic: writing programs is an important ingredient for applying mathematical ideas to real-world problems, but it also helps us explore and visualize math ideas in ways that go beyond what we could achieve with pen, paper, and imagination.</p><p><button class=\"next-step\">Continue</button></p></x-step>","goals":["next-0"],"keywords":[]},"step-julia-reasons":{"id":"step-julia-reasons","title":"Step Julia Reasons","html":"<x-step id=\"step-julia-reasons\" goals=\"next-0\"><p>We will use <em>Julia</em> for most of our work in those courses. This is a relatively new entrant to the scientific computing scene, having been introduced publicly in 2012 and reaching its first stable release in August of 2018. Julia is ideally suited to the purposes of this course:</p><ul> <li><strong>Julia is designed for scientific computing</strong>. The way that code is written in Julia is influenced heavily by its primary intended application as a scientific computing environment. This means that our code will be succinct and will often look very similar to the corresponding math notation.</li><li><strong>Julia has benefits as an instructional language</strong>. Julia provides tools for inspecting how numbers and other data structures are stored internally, and it also makes it easy to see how the built-in functions work.</li><li><strong>Julia is simple yet fast</strong>. Hand-coded algorithms are generally much faster in Julia than in other user-friendly languages like Python or R. This is not always important in practice, because you can usually use fast code written by other people for the most performance-sensitive parts of your program. But when you're learning fundamental ideas, it's very helpful to be able to write out simple algorithms by hand and examine their behavior on large or small inputs. It can also be helpful in real-world applications where packaged code doesn't fit your problem especially well.</li><li><strong>Julia is integrated in the broader ecosystem</strong>. Julia has excellent tools for interfacing with other languages like C, C++, Python, and R, so can take advantage of the mountain of scientific computing resources developed over the last several decades. (Conversely, if you're working in a Python or R environment in the future, you can write some Julia code and call it from your Python or R program.)</li></ul> <p><button class=\"next-step\">Continue</button></p></x-step>","goals":["next-0"],"keywords":[]},"step-speed-note":{"id":"step-speed-note","title":"Step Speed Note","html":"<x-step id=\"step-speed-note\" goals=\"blank-0\"><p>An important note on Julia's speed: because of the way Julia works, functions take longer to run the first time they are called. This means that loading a large package (or calling a function that calls many other functions for the first time) can be quite <span class=\"nowrap\"><x-blank-mc goal=\"blank-0\"><button class=\"choice\">slow</button><button class=\"choice\">fast</button></x-blank-mc>.</span> The developers are working to mitigate this issue, but it's challenging for reasons which are closely related to the design choices that make Julia fast.</p></x-step>","goals":["blank-0"],"keywords":[]},"step-1":{"id":"step-1","title":"Step  ","html":"<x-step id=\"step-1\" goals=\"next-0\"><p>This course contains many exercises. Doing them in earnest is essential for knowledge and skill retention. You should solve each exercise prior to clicking the \"Continue\" button to see an example solution.</p><p><button class=\"next-step\">Continue</button></p></x-step>","goals":["next-0"],"keywords":[]},"step-2":{"id":"step-2","title":"Step  ","html":"<x-step id=\"step-2\" goals=\"next-0\"><h2>Installation</h2><p>There are several ways to access Julia:</p><p><strong>Inline</strong>. This course will let you execute Julia code blocks in the webpage (thanks to <a href=\"https://github.com/ines/juniper\" target=\"_blank\">Juniper</a> and <a href=\"https://mybinder.org\" target=\"_blank\">Binder</a>). So if you don't want to install anything yet, you don't have to. (However, the first cell you run will be slow with this method, like up to 30 seconds, since your environment has to be launched behind the scenes on Binder's servers. If it's taking too long, reload the page.)</p><p><button class=\"next-step\">Continue</button></p></x-step>","goals":["next-0"],"keywords":[]},"step-3":{"id":"step-3","title":"Step  ","html":"<x-step id=\"step-3\" goals=\"next-0\"><p><strong>Binder</strong>. You can also run Julia code in a notebook on the Binder website. To launch with a set of packages tailored to this course, <a href=\"https://mybinder.org/v2/gh/data-gymnasia/julia-binder/master\" target=\"_blank\">click here</a>. Then, select <em>New</em> (top right corner and <em>Julia</em>). It is highly recommended that you keep a tab with a Binder notebook open while working through this course, because it can serve as a space for scratch work, and it provides more features than the blocks which appear in-page.</p><p><button class=\"next-step\">Continue</button></p></x-step>","goals":["next-0"],"keywords":[]},"step-4":{"id":"step-4","title":"Step  ","html":"<x-step id=\"step-4\" goals=\"next-0\"><p><strong>Locally</strong>. Download Julia for your system <a href=\"https://julialang.org/downloads/\" target=\"_blank\">here</a>. You want to get the standard version (under \"Current stable release\"), not JuliaPro, Conda, or any other distribution.</p><p><button class=\"next-step\">Continue</button></p></x-step>","goals":["next-0"],"keywords":[]},"step-5":{"id":"step-5","title":"Step  ","html":"<x-step id=\"step-5\" goals=\"next-0\"><p><strong>CoCalc</strong>. If you want a complete environment without having to install anything locally, <a href=\"https://cocalc.com\" target=\"_blank\">CoCalc</a> is a batteries-included, community-oriented platform for open-source mathematical and scientific computing. You can use it for free with limited functionality, and it's $14 per month to support the project and get paid account features.</p><p><button class=\"next-step\">Continue</button></p></x-step>","goals":["next-0"],"keywords":[]},"step-julia-help":{"id":"step-julia-help","title":"Step Julia Help","html":"<x-step id=\"step-julia-help\" goals=\"next-0\"><p> Some important tips for getting help as you learn:</p><ul> <li>Julia's official documentation is available at <a href=\"https://docs.julialang.org\" target=\"_blank\">https://docs.julialang.org</a> and is excellent. The learning experience you will get in this course is intended to get you up and running quickly, but you can always look at the corresponding section the documentation to learn more details.</li><li>You can get help within a Julia session by typing a question mark before the name of a function whose documentation you want to see.</li><li>Similarly, <code class=\"language-julia\">apropos(\"eigenvalue\")</code> returns a list of functions whose documentation mentions \"eigenvalue\"</li></ul> <p><button class=\"next-step\">Continue</button></p></x-step>","goals":["next-0"],"keywords":[]},"step-6":{"id":"step-6","title":"Step  ","html":"<x-step id=\"step-6\" goals=\"next-0\"><h2>Usage</h2><p>Once you have Julia installed, there are several ways to interact with it.</p><p><strong>REPL</strong>. Launch a read-eval-print loop from the <span class=\"nowrap\"><x-gloss xid=\"command-line\">command line</x-gloss>.</span> Any code you enter will be executed immediately, and any values returned by your code will be displayed. To start a session, open your operating system's Terminal and run <span class=\"nowrap\"><code class=\"language-julia\">julia</code>.</span> You can do this in Binder by selecting <em>New &gt; Terminal</em>.</p><p><button class=\"next-step\">Continue</button></p></x-step>","goals":["next-0"],"keywords":[]},"step-7":{"id":"step-7","title":"Step  ","html":"<x-step id=\"step-7\" goals=\"next-0\"><p><strong>Script</strong>. Save a file called <code> example.jl</code> and run <code> julia example.jl</code> from the <x-gloss xid=\"command-line\">command line</x-gloss> (in the same directory as the file) to execute all the code in the script. You can do this in Binder by selecting <em>New &gt; Text File</em> and then changing the name of the text file to something that ends in <span class=\"nowrap\"><code> .jl</code>.</span></p><p><button class=\"next-step\">Continue</button></p></x-step>","goals":["next-0"],"keywords":[]},"step-8":{"id":"step-8","title":"Step  ","html":"<x-step id=\"step-8\" goals=\"next-0\"><p><strong>Jupyter</strong>. Like a REPL, but allows inserting text and math expressions, grouping code into blocks, etc. This is the interface provided by default in <a href=\"https://mybinder.org/v2/gh/data-gymnasia/julia-binder/master\" target=\"_blank\">Binder</a>, and you can launch a notebook locally by running <code class=\"language-julia\">jupyter notebook</code> from the <x-gloss xid=\"command-line\">command line</x-gloss> (assuming you have <x-gloss xid=\"anaconda\">Anaconda</x-gloss> installed).</p><p><button class=\"next-step\">Continue</button></p></x-step>","goals":["next-0"],"keywords":[]},"step-9":{"id":"step-9","title":"Step  ","html":"<x-step id=\"step-9\" goals=\"next-0\"><p><strong>Integrated development environment (IDE)</strong>. Essential for extensive software development projects, an IDE provides an editor for writing code, conveniences to help you code more efficiently, and a debugger to help you fix your mistakes. The main IDE for Julia is <a href=\"https://junolab.org\" target=\"_blank\">Juno</a>.</p><p><button class=\"next-step\">Continue</button></p></x-step>","goals":["next-0"],"keywords":[]},"step-10":{"id":"step-10","title":"Step  ","html":"<x-step id=\"step-10\" goals=\"blank-0 blank-1 blank-2 blank-3\"><div class=\"exercise\"> <p><strong>Exercise</strong>. </p><ul> <li><p>If you just wanted to check how Julia evaluates <span class=\"nowrap\"><code class=\"language-julia\">8÷2(2+2)</code>,</span> the quickest way to do that would probably be to use <span class=\"nowrap\"><x-blank-mc goal=\"blank-0\"><button class=\"choice\">the REPL</button><button class=\"choice\">a Jupyter notebook</button><button class=\"choice\">an IDE</button></x-blank-mc>.</span></p></li><li><p>If you want to create a single document with text, code, and images, <x-blank-mc goal=\"blank-1\"><button class=\"choice\">a Jupyter notebook</button><button class=\"choice\">the REPL</button></x-blank-mc> is well suited to that.</p></li><li><p>If you work on an extensive project with thousands of lines of code, you should <x-blank-mc goal=\"blank-2\"><button class=\"choice\">organize the code into separate files</button><button class=\"choice\">use one giant file</button></x-blank-mc> and <span class=\"nowrap\"><x-blank-mc goal=\"blank-3\"><button class=\"choice\">use an IDE</button><button class=\"choice\">use a Jupyter notebook</button></x-blank-mc>.</span></p></li></ul> </div> </x-step>","goals":["blank-0","blank-1","blank-2","blank-3"],"keywords":[]},"basics":{"id":"basics","title":"Basics","html":"<x-step id=\"basics\" goals=\"next-0\"><p>Let's begin by developing some basic vocabulary for the elements of a program. This section is an overview: will develop some of these ideas in greater depth in later sections.</p><p><button class=\"next-step\">Continue</button></p></x-step>","goals":["next-0"],"keywords":[]},"step-11":{"id":"step-11","title":"Step  ","html":"<x-step id=\"step-11\" goals=\"next-0\"><h2>Objects</h2><p>A <strong>object</strong> is a fundamental entity that may be manipulated by a program. Objects have <strong>types</strong>; for example, <code class=\"language-julia\">5</code> is an <code class=\"language-julia\">Int64</code> (in other words, an integer which occupies 64 bits) and <code class=\"language-julia\">\"Hello world!\"</code> is a <span class=\"nowrap\"><code class=\"language-julia\">String</code>.</span> Types are important for the computer to keep track of, since values are stored differently depending on their type. You can check the type of a value using the <code class=\"language-julia\">typeof</code> function: <code class=\"language-julia\">typeof(\"hello\")</code> returns <span class=\"nowrap\"><code class=\"language-julia\">String</code>.</span></p><p><button class=\"next-step\">Continue</button></p></x-step>","goals":["next-0"],"keywords":[]},"step-13":{"id":"step-13","title":"Step  ","html":"<x-step id=\"step-13\" goals=\"blank-0\"><div class=\"exercise\"> <p><strong>Exercise</strong>.<br>Use the code block below to find the type of <span class=\"nowrap\"><code class=\"language-julia\">1.0</code>.</span> Does <code class=\"language-julia\">1.0</code> have the same type as <span class=\"nowrap\"><code class=\"language-julia\">1</code>?</span> <x-blank-mc goal=\"blank-0\"><button class=\"choice\">No</button><button class=\"choice\">Yes</button></x-blank-mc></p></div> <pre julia-executable=\"julia-executable\"># replace this text with code and press enter while holding shift to run</pre></x-step>","goals":["blank-0"],"keywords":[]},"step-14":{"id":"step-14","title":"Step  ","html":"<x-step id=\"step-14\" goals=\"next-0\"><p>(<em>Note</em>: you probably noticed the <code class=\"language-markup\">Loading or None returned</code> message that appeared briefly when you ran the cell. If that message appears for more than 10 seconds or so, it's likely that the cell has run successfully but doesn't have anything to show as a result. We will discuss this in more detail soon.)</p><p><button class=\"next-step\">Continue</button></p></x-step>","goals":["next-0"],"keywords":[]},"step-julia-variable":{"id":"step-julia-variable","title":"Step Julia Variable","html":"<x-step id=\"step-julia-variable\" goals=\"next-0\"><p>A <strong>variable</strong> is a name used to refer to a object. We can <strong>assign</strong> a object (say <code class=\"language-julia\">41</code>) to a variable (say <code class=\"language-julia\">age</code>) as follows:</p><pre class=\"language-julia\"><code>age = 41</code></pre><p><button class=\"next-step\">Continue</button></p></x-step>","goals":["next-0"],"keywords":[]},"step-16":{"id":"step-16","title":"Step  ","html":"<x-step id=\"step-16\" goals=\"blank-0 blank-1\"><p>Variable names must begin with an underscore or letter and contain only letters, digits, underscores, and exclamation points after that. Unicode characters are supported in Julia and can be input by typing <a href=\"https://docs.julialang.org/en/v1/manual/unicode-input/#\" target=\"_blank\">appropriate descriptions</a> followed by the tab key (but only in a REPL or notebook, convenient Unicode entry is not supported in this webpage). For example, typing <code class=\"language-julia\">\\alpha</code> and then tab will produce <span class=\"nowrap\"><code class=\"language-julia\">α</code>.</span></p><p>Letters in variable names may be uppercase or lowercase, and the case matters. For example <code class=\"language-julia\">extractValues0</code> is <x-blank-mc goal=\"blank-0\"><button class=\"choice\">a valid</button><button class=\"choice\">an invalid</button></x-blank-mc> variable name, and <code class=\"language-julia\">data.frame</code> is <x-blank-mc goal=\"blank-1\"><button class=\"choice\">an invalid</button><button class=\"choice\">a valid</button></x-blank-mc> variable name.</p></x-step>","goals":["blank-0","blank-1"],"keywords":[]},"step-17":{"id":"step-17","title":"Step  ","html":"<x-step id=\"step-17\" goals=\"blank-0\"><p>The object assigned to a given variable may be changed as many times as desired with further assignments.</p><div class=\"exercise\"> <p><strong>Exercise</strong>.<br>Find the value of <code class=\"language-julia\">x</code> at the end of the following block of code. <x-blank solution=\"3\" goal=\"blank-0\"></x-blank></p><pre class=\"language-julia\"><code>x = 3\ny = x\nx = x + 1\nx = y</code></pre></div> </x-step>","goals":["blank-0"],"keywords":[]},"step-18":{"id":"step-18","title":"Step  ","html":"<x-step id=\"step-18\" goals=\"next-0\"><p><em>Solution.</em> The value 3 is assigned to <code class=\"language-julia\">x</code> and then also to <code class=\"language-julia\">y</code> on the second line. After the third line, the value of <code class=\"language-julia\">x</code> is 4, since the right-hand side works out to 4 an is <em>then</em> assigned to the variable <span class=\"nowrap\"><code class=\"language-julia\">x</code>.</span> After the fourth line <code class=\"language-julia\">3</code> is of <code class=\"language-julia\">x</code> again, since the value of <code class=\"language-julia\">y</code> is still 3 when the fourth line is executed.</p><p><button class=\"next-step\">Continue</button></p></x-step>","goals":["next-0"],"keywords":[]},"step-19":{"id":"step-19","title":"Step  ","html":"<x-step id=\"step-19\" goals=\"blank-0\"><div class=\"exercise\"> <p><strong>Exercise</strong>.<br>Use the code block below to find out what happens when you try to use a variable that hasn't had any object assigned to it: you get an <x-blank solution=\"UndefVar\" goal=\"blank-0\"></x-blank>Error.</p></div> <pre julia-executable=\"julia-executable\">num_carrots = 4\nnum_Carrots</pre></x-step>","goals":["blank-0"],"keywords":[]},"step-20":{"id":"step-20","title":"Step  ","html":"<x-step id=\"step-20\" goals=\"next-0\"><p>Note that when an error occurs in your code, you get a <strong>stack trace</strong> which helps you identify the source of the error.</p><h2>Functions</h2><p>A <strong>function</strong> performs a particular task. For example, <code class=\"language-julia\">print(x)</code> writes a string representation of the value of the variable <code class=\"language-julia\">x</code> to the screen.</p><p>Prompting a function to perform its task is referred to as <strong>calling</strong> the function. Functions are called using parentheses following the function's name, and any objects which are needed by the function are supplied between these parentheses, separated by commas. These objects are called <strong>arguments</strong>.</p><p><button class=\"next-step\">Continue</button></p></x-step>","goals":["next-0"],"keywords":[]},"step-21":{"id":"step-21","title":"Step  ","html":"<x-step id=\"step-21\" goals=\"next-0\"><p>Some functions, like <code class=\"language-julia\">print</code> are built into the language and are always available. You may also define your own functions using <span class=\"nowrap\"><code class=\"language-julia\">function</code>:</span></p><pre julia-executable=\"julia-executable\">function print_twice(x)\n    print(x)\n    print(x)\nend\n\nprint_twice(\"hey\")</pre><p><button class=\"next-step\">Continue</button></p></x-step>","goals":["next-0"],"keywords":[]},"step-22":{"id":"step-22","title":"Step  ","html":"<x-step id=\"step-22\" goals=\"next-0\"><p><code class=\"language-julia\">function</code> is an example of a <strong>keyword</strong>: a name with a special meaning in the language. Since it has a special meaning, a keyword may not be used as a variable name.</p><p><button class=\"next-step\">Continue</button></p></x-step>","goals":["next-0"],"keywords":[]},"step-24":{"id":"step-24","title":"Step  ","html":"<x-step id=\"step-24\" goals=\"next-0\"><p>A function may perform an action, like <span class=\"nowrap\"><code class=\"language-julia\">print_twice</code>,</span> or it may <strong>return</strong> an object. For example, after the following code block is run, the object <code class=\"language-julia\">28</code> will be assigned to the variable <span class=\"nowrap\"><code class=\"language-julia\">y</code>.</span></p><pre julia-executable=\"julia-executable\">function add_one(x)\n    return x + 1\nend\n\ny = 20 + add_one(7)</pre><p><button class=\"next-step\">Continue</button></p></x-step>","goals":["next-0"],"keywords":[]},"step-omit-return-keyword":{"id":"step-omit-return-keyword","title":"Step Omit Return Keyword","html":"<x-step id=\"step-omit-return-keyword\" goals=\"next-0\"><p>In Julia, the <code class=\"language-julia\">return</code> keyword can be omitted if the value to be returned appears at the end of the body of the function. The block above would more commonly be written</p><pre julia-executable=\"julia-executable\">function add_one(x)\n    x + 1\nend\n\ny = 20 + add_one(7)</pre><p><button class=\"next-step\">Continue</button></p></x-step>","goals":["next-0"],"keywords":[]},"step-other-function-syntax":{"id":"step-other-function-syntax","title":"Step Other Function Syntax","html":"<x-step id=\"step-other-function-syntax\" goals=\"next-0\"><p>Alternatively, you can define functions in Julia using standard math notation:</p><pre julia-executable=\"julia-executable\">add_one(x) = x + 1</pre><p><button class=\"next-step\">Continue</button></p></x-step>","goals":["next-0"],"keywords":[]},"step-25":{"id":"step-25","title":"Step  ","html":"<x-step id=\"step-25\" goals=\"next-0\"><p>The variable name <code class=\"language-julia\">x</code> in the above block is called a <strong>parameter</strong>. Parameters play the same role as dummy variables in the definition of a mathematical function (for example, when the squaring function is defined using the notation <span class=\"math\" data-voice=\"f of _x_ equals _x_ squared\"><mi>f</mi><mfenced><mi>x</mi></mfenced><mo value=\"=\">=</mo><msup><mi>x</mi><mn>2</mn></msup></span>).</p><p><button class=\"next-step\">Continue</button></p></x-step>","goals":["next-0"],"keywords":[]},"step-26":{"id":"step-26","title":"Step  ","html":"<x-step id=\"step-26\" goals=\"next-0\"><p>An <strong>operator</strong> is a special kind of function that can be called in a special way. For example, the multiplication operator <code class=\"language-julia\">*</code> can called using the mathematically familiar <em>infix notation</em> <span class=\"nowrap\"><code class=\"language-julia\">3 * 5</code>,</span> or in the usual way as <span class=\"nowrap\"><code class=\"language-julia\">*(3,5)</code>.</span></p><p><button class=\"next-step\">Continue</button></p></x-step>","goals":["next-0"],"keywords":[]},"step-27":{"id":"step-27","title":"Step  ","html":"<x-step id=\"step-27\" goals=\"sortable-0 next-0\"><div class=\"exercise\"> <p><strong>Exercise</strong><br>Arrange the operation descriptions below in order, according the corresponding Julia operator in the list <span class=\"nowrap\"><code class=\"language-julia\">+, ^, *, ÷, //, /</code>.</span> You might need to experiment using the code block below. (Note: the division symbol is <code class=\"language-julia\">\\div</code>-[tab].)</p><x-sortable goal=\"sortable-0\"><div class=\"item\" data-index=\"5\">division (ordinary real-number division)</div><div class=\"item\" data-index=\"4\">rational division (return a fraction object)</div><div class=\"item\" data-index=\"3\">integer division (quotient only; no remainder)</div><div class=\"item\" data-index=\"0\">addition </div><div class=\"item\" data-index=\"2\">multiplication</div><div class=\"item\" data-index=\"1\">exponentiation</div></x-sortable></div> <pre julia-executable=\"julia-executable\">println(6 + 11)\nprintln(2^5)\nprintln(3 * 4)\nprintln(7÷2)\nprintln(7//2)\nprintln(7/2)</pre><p>(Note: <code class=\"language-julia\">println</code> is the same as <code class=\"language-julia\">print</code> except that it prints a newline character at the end.)</p><p><button class=\"next-step\">Continue</button></p></x-step>","goals":["sortable-0","next-0"],"keywords":[]},"step-28":{"id":"step-28","title":"Step  ","html":"<x-step id=\"step-28\" goals=\"blank-0\"><h2>Statements and expressions</h2><p>An individual executable unit of code in Julia is called a <strong>statement</strong>. For example, the assignment <code class=\"language-julia\">age = 41</code> is a statement. Statements may include <strong>expressions</strong>, which are combinations of values, variables, operators, and function calls that a language interprets and <strong>evaluates</strong> to a value. For example, <code class=\"language-julia\">1 + age + abs(3*-4)</code> is an expression which evaluates to <x-blank solution=\"54\" goal=\"blank-0\"></x-blank> (note that <code class=\"language-julia\">abs</code> is the absolute value function, and we're assuming <code class=\"language-julia\">age</code> is set to the value <code class=\"language-julia\">41</code>).</p></x-step>","goals":["blank-0"],"keywords":[]},"step-29":{"id":"step-29","title":"Step  ","html":"<x-step id=\"step-29\" goals=\"blank-0 blank-1 blank-2 blank-3 picker-1\"><div class=\"exercise\"> <p><strong>Exercise</strong><br><code class=\"language-julia\">function f(x) return x^2 end</code> is <x-blank-mc goal=\"blank-0\"><button class=\"choice\">a statement</button><button class=\"choice\">an expression</button></x-blank-mc></p><p><code class=\"language-julia\">2 + 3*f(4)</code> is <x-blank-mc goal=\"blank-1\"><button class=\"choice\">an expression</button><button class=\"choice\">a statement</button></x-blank-mc></p><p><code class=\"language-julia\">y = 13</code> is <x-blank-mc goal=\"blank-2\"><button class=\"choice\">a statement</button><button class=\"choice\">an expression</button></x-blank-mc></p><p><code class=\"language-julia\">myName = \"John\" * \"Doe\"</code> is</p><x-picker class=\"list\" goal=\"picker\"><div class=\"item pill bblue\" data-error=\"expression-1\">an expression</div><div class=\"item pill bblue\">a statement whose execution involves evaluating an expression</div></x-picker></div> <h2>Exercises</h2><div class=\"exercise\"> <p><strong>Exercise</strong><br>(Try doing this without executing the code.) The expression <code class=\"language-julia\">1 + 5÷3 + 2^3</code> evaluates to <span class=\"nowrap\"><x-blank solution=\"10\" goal=\"blank-3\"></x-blank>.</span></p></div> </x-step>","goals":["blank-0","blank-1","blank-2","blank-3","picker-1"],"keywords":[]},"step-30":{"id":"step-30","title":"Step  ","html":"<x-step id=\"step-30\" goals=\"blank-0\"><div class=\"exercise\"> <p><strong>Exercise</strong><br>(Try doing this without executing the code.) The expression <code class=\"language-julia\">11/2-11÷2-3</code> evaluates to <span class=\"nowrap\"><x-blank solution=\"-2.5\" goal=\"blank-0\"></x-blank>,</span> expressed as a decimal.</p></div> </x-step>","goals":["blank-0"],"keywords":[]},"step-31":{"id":"step-31","title":"Step  ","html":"<x-step id=\"step-31\" goals=\"blank-0\"><div class=\"exercise\"> <p><strong>Exercise</strong><br>Find the value of <code class=\"language-julia\">x</code> at the end of the following block of code. <x-blank solution=\"25\" goal=\"blank-0\"></x-blank></p><pre class=\"language-julia\"><code>x = 3^2\nx = x + 1\nx = x + 1\ny = x÷2\nx = y*y\nz = 2*x</code></pre></div> </x-step>","goals":["blank-0"],"keywords":[]},"step-32":{"id":"step-32","title":"Step  ","html":"<x-step id=\"step-32\" goals=\"next-0 quill\"><div class=\"exercise\"> <p><strong>Exercise</strong><br>Write a function <code class=\"language-julia\">f</code> which takes a positive integer <code class=\"language-julia\">n</code> as input and returns the $n$th positive odd integer. The last four lines of code check that your function works.</p><p>Also, note that you have <em>two</em> boxes: the first is for scratch, and the second is for saving your answer. Once you're happy with your code, copy and paste it into the second box.</p></div> <pre julia-executable=\"julia-executable\">function f(n)\n    # add code here\nend\n\nusing Test\n@test f(3) == 5\n@test f(1) == 1\n@test f(100) == 199</pre><x-quill goal=\"quill\"></x-quill><p><button class=\"next-step\">Continue</button></p></x-step>","goals":["next-0","quill"],"keywords":[]},"step-nth-odd-solution":{"id":"step-nth-odd-solution","title":"Step Nth Odd Solution","html":"<x-step id=\"step-nth-odd-solution\" goals=\"\"><p><em>Solution.</em> The function in question is <span class=\"nowrap\"><svg style=\"vertical-align: -0.186ex\" width=\"11.262ex\" height=\"1.692ex\" class=\"mathjax\" viewBox=\"0 -666 4978 748\"><title>n\\mapsto 2n-1</title><defs><path id=\"MJX-3366-TEX-I-1D45B\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"></path><path id=\"MJX-3366-TEX-N-21A6\" d=\"M95 155V109Q95 83 92 73T75 63Q61 63 58 74T54 130Q54 140 54 180T55 250Q55 421 57 425Q61 437 75 437Q88 437 91 428T95 393V345V270H835Q719 357 692 493Q692 494 692 496T691 499Q691 511 708 511H711Q720 511 723 510T729 506T732 497T735 481T743 456Q765 389 816 336T935 261Q944 258 944 250Q944 244 939 241T915 231T877 212Q836 186 806 152T761 85T740 35T732 4Q730 -6 727 -8T711 -11Q691 -11 691 0Q691 7 696 25Q728 151 835 230H95V155Z\"></path><path id=\"MJX-3366-TEX-N-32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"></path><path id=\"MJX-3366-TEX-N-2212\" d=\"M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z\"></path><path id=\"MJX-3366-TEX-N-31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path></defs><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><use xlink:href=\"#MJX-3366-TEX-I-1D45B\"></use></g><g data-mml-node=\"mo\" transform=\"translate(877.8, 0)\"><use xlink:href=\"#MJX-3366-TEX-N-21A6\"></use></g><g data-mml-node=\"mn\" transform=\"translate(2155.6, 0)\"><use xlink:href=\"#MJX-3366-TEX-N-32\"></use></g><g data-mml-node=\"mi\" transform=\"translate(2655.6, 0)\"><use xlink:href=\"#MJX-3366-TEX-I-1D45B\"></use></g><g data-mml-node=\"mo\" transform=\"translate(3477.8, 0)\"><use xlink:href=\"#MJX-3366-TEX-N-2212\"></use></g><g data-mml-node=\"mn\" transform=\"translate(4478, 0)\"><use xlink:href=\"#MJX-3366-TEX-N-31\"></use></g></g></g></svg>:</span></p><pre julia-executable=\"julia-executable\">function f(n)\n    2n-1\nend\n\nusing Test\n@test f(3) == 5\n@test f(1) == 1\n@test f(100) == 199</pre></x-step>","goals":[],"keywords":[]},"step-macro-note":{"id":"step-macro-note","title":"Step Macro Note","html":"<x-step id=\"step-macro-note\" goals=\"blank-0\"><p>The <code class=\"language-julia\">@</code> in the name <code class=\"language-julia\">@test</code> has a special meaning in Julia: it indicates that <code class=\"language-julia\">@test</code> is a <strong>macro</strong>. This means that the code that <code class=\"language-julia\">@test</code> operates on is not evaluated right away. Rather, the code is passed directly to <code class=\"language-julia\">@test</code> to be processed in a manner specified by the definition of the macro <span class=\"nowrap\"><code class=\"language-julia\">@test</code>.</span></p><p>The following example sheds some light on the difference between evaluating code to pass values to a function and passing the code directly to a macro: if <code class=\"language-julia\">x</code> is not defined, then <code class=\"language-julia\">f(x)</code> <em>always</em> throws an error, since the value assigned to <code class=\"language-julia\">x</code> cannot be looked up and passed to the function <span class=\"nowrap\"><code class=\"language-julia\">f</code>.</span> However, <code class=\"language-julia\">@f(x)</code> might not throw an error, because a literal <code class=\"language-julia\">x</code> symbol is what's being passed to the macro <span class=\"nowrap\"><code class=\"language-julia\">@f</code>.</span> As long as <code class=\"language-julia\">@f</code> doesn't try to evaluate <span class=\"nowrap\"><code class=\"language-julia\">x</code>,</span> there might be no problem.</p><p>In general, you shouldn't have to worry about macros much. However, you will see macros in use sometimes, and it can be helpful to be aware that what's happening is <x-blank-mc goal=\"blank-0\"><button class=\"choice\">different from</button><button class=\"choice\">just</button></x-blank-mc> standard Julia syntax parsing.</p></x-step>","goals":["blank-0"],"keywords":[]},"step-33":{"id":"step-33","title":"Step  ","html":"<x-step id=\"step-33\" goals=\"picker-0 picker-3\"><div class=\"exercise\"> <p><strong>Exercise</strong><br>Select the true statements.</p><x-picker class=\"list\" goal=\"picker\"><div class=\"item pill bblue\">The statement <code class=\"language-julia\">balance = 46.04</code> assigns the value <code class=\"language-julia\">46.04</code> to the variable <code class=\"language-julia\">balance</code>.</div><div class=\"item pill bblue\" data-error=\"not-a-variable\">The object <code class=\"language-python\">33</code> is a variable.</div><div class=\"item pill bblue\" data-error=\"mutable\">The value assigned to a variable cannot be changed.</div><div class=\"item pill bblue\">Variable names in Julia are case-sensitive.</div></x-picker></div> </x-step>","goals":["picker-0","picker-3"],"keywords":[]},"types":{"id":"types","title":"Types","html":"<x-step id=\"types\" goals=\"next-0\"><p>Julia, like most programming languages, has built-in types for handling common data like numbers and text.</p><p><button class=\"next-step\">Continue</button></p></x-step>","goals":["next-0"],"keywords":[]},"step-34":{"id":"step-34","title":"Step  ","html":"<x-step id=\"step-34\" goals=\"next-0\"><h2>Numbers</h2><p>As discussed in the previous section, a numerical value can be either an integer or a floating point number. We can represent integers exactly, while storing a real number as a float <span class=\"nowrap\"><x-gloss xid=\"rounding\">often requires rounding slightly</x-gloss>.</span> The standard integer and floating point types in Julia are called <code class=\"language-julia\">Int64</code> and <span class=\"nowrap\"><code class=\"language-julia\">Float64</code>,</span> <span class=\"nowrap\"><x-gloss xid=\"respectively\">respectively</x-gloss>,</span> because 64 bits are used to store an object of either type.</p><p><button class=\"next-step\">Continue</button></p></x-step>","goals":["next-0"],"keywords":[]},"step-35":{"id":"step-35","title":"Step  ","html":"<x-step id=\"step-35\" goals=\"next-0\"><p>A number typed directly into a Julia program is stored as a float or integer according to whether it contains a decimal point, so if you want the value 6 to be stored as a <span class=\"nowrap\"><code class=\"language-julia\">Float64</code>,</span> you should write it as <span class=\"nowrap\"><code class=\"language-julia\">6.0</code>.</span></p><p><button class=\"next-step\">Continue</button></p></x-step>","goals":["next-0"],"keywords":[]},"step-36":{"id":"step-36","title":"Step  ","html":"<x-step id=\"step-36\" goals=\"blank-0 blank-1\"><p>Numbers can be compared using the operators <span class=\"nowrap\"><code class=\"language-julia\">==,&gt;,&lt;,≤,≥</code>.</span> Recall that an operator is a function that <span class=\"nowrap\"><x-blank-mc goal=\"blank-0\"><button class=\"choice\">can be called using infix syntax</button><button class=\"choice\">takes one argument</button></x-blank-mc>.</span></p><div class=\"exercise\"> <p><strong>Exercise</strong><br>What is the type of the object returned by <span class=\"nowrap\"><code class=\"language-julia\">1 == 2</code>?</span> <x-blank solution=\"Bool\" goal=\"blank-1\"></x-blank></p></div> <pre julia-executable=\"julia-executable\">1 == 2</pre></x-step>","goals":["blank-0","blank-1"],"keywords":[]},"step-37":{"id":"step-37","title":"Step  ","html":"<x-step id=\"step-37\" goals=\"blank-0 blank-1 blank-2 blank-3\"><p></p> <div class=\"exercise\"> <p><strong>Exercise</strong><br><code class=\"language-julia\">x == 1</code> is <x-blank-mc goal=\"blank-0\"><button class=\"choice\">an expression</button><button class=\"choice\">a statement</button></x-blank-mc> which returns <code class=\"language-julia\">true</code> or <code class=\"language-julia\">false</code> according to whether <span class=\"nowrap\"><x-blank-mc goal=\"blank-1\"><button class=\"choice\">the object assigned to x is equal to 1</button><button class=\"choice\">the string \"x\" is equal to 1</button></x-blank-mc>.</span> Meanwhile, <code class=\"language-julia\">x = 1</code> is <x-blank-mc goal=\"blank-2\"><button class=\"choice\">a statement</button><button class=\"choice\">an expression</button></x-blank-mc> that <span class=\"nowrap\"><x-blank-mc goal=\"blank-3\"><button class=\"choice\">assigns the object 1 to <code class=\"language-python\">x</code></button><button class=\"choice\">compares <code class=\"language-python\">x</code> to 1</button></x-blank-mc>.</span></p></div> </x-step>","goals":["blank-0","blank-1","blank-2","blank-3"],"keywords":[]},"step-38":{"id":"step-38","title":"Step  ","html":"<x-step id=\"step-38\" goals=\"next-0\"><h2>Strings</h2><p>Textual data is represented using a sequence of characters called a <strong>string</strong>. We can create a string object by enclosing the desired sequence of characters in quotation marks: <span class=\"nowrap\"><code class=\"language-julia\">a = \"this is a string\"</code>.</span> Such a quote-enclosed string of characters in a Julia program is called a <strong>string literal</strong>. String literals can also be delimited by triple quotes, which can be useful for multi-line strings and for strings containing quotes.</p><pre julia-executable=\"julia-executable\">\"\"\"\nThis is a multiline string.\nIt can have \"quotes\", no problem.\n\"\"\"\n\n\"This is an ordinary string. \\\"Quotes\\\" require a backslash.\"</pre><p><button class=\"next-step\">Continue</button></p></x-step>","goals":["next-0"],"keywords":[]},"step-39":{"id":"step-39","title":"Step  ","html":"<x-step id=\"step-39\" goals=\"blank-0\"><p>We can find the number of characters in a string with the <code class=\"language-julia\">length</code> function: <code class=\"language-julia\">length(\"hello\")</code> returns <span class=\"nowrap\"><x-blank solution=\"5\" goal=\"blank-0\"></x-blank>.</span></p></x-step>","goals":["blank-0"],"keywords":[]},"step-40":{"id":"step-40","title":"Step  ","html":"<x-step id=\"step-40\" goals=\"next-0\"><p>We can concatenate two strings with the multiplication operator (<code class=\"language-julia\">*</code>): <span class=\"nowrap\"><code class=\"language-julia\">\"Hello \" * \"World\"</code>.</span></p><p><button class=\"next-step\">Continue</button></p></x-step>","goals":["next-0"],"keywords":[]},"step-41":{"id":"step-41","title":"Step  ","html":"<x-step id=\"step-41\" goals=\"next-0\"><p>We can return the first character in a string <code class=\"language-julia\">s</code> using the expression <span class=\"nowrap\"><code class=\"language-julia\">s[1]</code>,</span> the second element using <span class=\"nowrap\"><code class=\"language-julia\">s[2]</code>,</span> and so on. We can get the substring from the third to the eighth character using <span class=\"nowrap\"><code class=\"language-julia\">s[3:8]</code>.</span></p><p><button class=\"next-step\">Continue</button></p></x-step>","goals":["next-0"],"keywords":[]},"step-42":{"id":"step-42","title":"Step  ","html":"<x-step id=\"step-42\" goals=\"blank-0 blank-1\"><div class=\"exercise\"> <p><strong>Exercise</strong><br>For which values of <code class=\"language-julia\">a</code> and <code class=\"language-julia\">b</code> does the expression <code class=\"language-julia\">\"Hello World\"[i:j] == \"o Wo\"</code> return <span class=\"nowrap\"><code class=\"language-julia\">true</code>?</span> i = <x-blank solution=\"5\" goal=\"blank-0\"></x-blank> and j = <x-blank solution=\"8\" goal=\"blank-1\"></x-blank></p></div> <pre julia-executable=\"julia-executable\">\"Hello World\"[i:j]</pre></x-step>","goals":["blank-0","blank-1"],"keywords":[]},"step-43":{"id":"step-43","title":"Step  ","html":"<x-step id=\"step-43\" goals=\"quill\"><div class=\"exercise\"> <p><strong>Exercise</strong><br>If <code class=\"language-julia\">j</code> is replaced with <code class=\"language-julia\">end</code> in the expression <code class=\"language-julia\">s[i:j]</code> (where <code class=\"language-julia\">s</code> is a string), what happens? Experiment using the code block above.</p></div> <x-quill goal=\"quill\"></x-quill></x-step>","goals":["quill"],"keywords":[]},"step-44":{"id":"step-44","title":"Step  ","html":"<x-step id=\"step-44\" goals=\"next-0\"><p><em>Solution.</em> Indexing with an expression involving <code class=\"language-julia\">end</code> is the same as replacing <code class=\"language-julia\">end</code> with the length of the string.</p><p><button class=\"next-step\">Continue</button></p></x-step>","goals":["next-0"],"keywords":[]},"step-45":{"id":"step-45","title":"Step  ","html":"<x-step id=\"step-45\" goals=\"quill\"><h2>String interpolation</h2><p>We can insert the value of a variable into a string using <em>string interpolation</em>:</p><pre julia-executable=\"julia-executable\">x = 19\n\"\"\"\nThe quotient when x is divided by 3\nis $(x÷3), and the remainder is $(x % 3)\n\"\"\"</pre><div class=\"exercise\"> <p><strong>Exercise</strong><br>Use string interpolation to write a single line of code which prints <code class=\"language-julia\">multiplying by 6.2 yields 12.4</code> if <code class=\"language-julia\">2</code> is assigned to the variable <code class=\"language-julia\">A</code> and prints <code class=\"language-julia\">multiplying by 6.2 yields 18.6</code> if <code class=\"language-julia\">3</code> is assigned to <span class=\"nowrap\"><code class=\"language-julia\">A</code>.</span></p></div> <pre julia-executable=\"julia-executable\">A = 2\n</pre><x-quill goal=\"quill\"></x-quill></x-step>","goals":["quill"],"keywords":[]},"step-46":{"id":"step-46","title":"Step  ","html":"<x-step id=\"step-46\" goals=\"next-0\"><p><em>Solution.</em> The expression <code class=\"language-julia\">\"multiplying by 6.2 yields $(6.2*A)\"</code> works.</p><p><button class=\"next-step\">Continue</button></p></x-step>","goals":["next-0"],"keywords":[]},"step-47":{"id":"step-47","title":"Step  ","html":"<x-step id=\"step-47\" goals=\"next-0\"><h2>Booleans</h2><p>A <code class=\"language-julia\">Bool</code> is a special type whose only values are <code class=\"language-julia\">true</code> and <span class=\"nowrap\"><code class=\"language-julia\">false</code>.</span> The fundamental operators that can be used to combine boolean values are <code class=\"language-julia\">&amp;&amp;</code> (and), <code class=\"language-julia\">||</code> (or), and <code class=\"language-julia\">!</code> (not).</p><p><button class=\"next-step\">Continue</button></p></x-step>","goals":["next-0"],"keywords":[]},"step-48":{"id":"step-48","title":"Step  ","html":"<x-step id=\"step-48\" goals=\"blank-0\"><div class=\"exercise\"> <p><strong>Exercise</strong><br>Does Julia convert types when doing equality comparison? In other words, does <code class=\"language-julia\">1 == 1.0</code> return <code class=\"language-julia\">true</code> or <span class=\"nowrap\"><code class=\"language-julia\">false</code>?</span> <x-blank-mc goal=\"blank-0\"><button class=\"choice\">true</button><button class=\"choice\">false</button></x-blank-mc></p></div> <pre julia-executable=\"julia-executable\">1 == 1.0</pre></x-step>","goals":["blank-0"],"keywords":[]},"step-49":{"id":"step-49","title":"Step  ","html":"<x-step id=\"step-49\" goals=\"next-0\"><p><em>Solution.</em> Yes, Julia does convert types for equality comparison. So <code class=\"language-julia\">1 == 1.0</code> returns <span class=\"nowrap\"><code class=\"language-julia\">true</code>.</span></p><p><button class=\"next-step\">Continue</button></p></x-step>","goals":["next-0"],"keywords":[]},"step-50":{"id":"step-50","title":"Step  ","html":"<x-step id=\"step-50\" goals=\"quill\"><div class=\"exercise\"> <p><strong>Exercise</strong><br>Write a one-line <x-gloss xid=\"function-julia\">function</x-gloss> which takes 3 bools as arguments and returns <code class=\"language-julia\">true</code> if and only if either</p><ol> <li>Both of the first two arguments are <code class=\"language-julia\">true</code> , or</li><li>The third argument is <code class=\"language-julia\">false</code></li></ol> </div> <pre julia-executable=\"julia-executable\">f(a,b,c) = # add code here\n\nusing Test\n@test f(true, true, true)\n@test f(false, true, false)\n@test !f(false, true, true)</pre><x-quill goal=\"quill\"></x-quill></x-step>","goals":["quill"],"keywords":[]},"step-51":{"id":"step-51","title":"Step  ","html":"<x-step id=\"step-51\" goals=\"next-0\"><p><em>Solution.</em> Here's an example of a simple way to do it:</p><pre class=\"language-julia\"><code>f(a,b,c) = a &amp;&amp; b || !c</code></pre><p>Be wary of comparisons of the form <code class=\"language-julia\">a == true</code> or <span class=\"nowrap\"><code class=\"language-julia\">b == false</code>.</span> These are equivalent to <code class=\"language-julia\">a</code> and <span class=\"nowrap\"><code class=\"language-julia\">!b</code>,</span> <span class=\"nowrap\"><x-gloss xid=\"respectively\">respectively</x-gloss>,</span> assuming <code class=\"language-julia\">a</code> and <code class=\"language-julia\">b</code> are both bools. The more succinct versions are preferred.</p><p><button class=\"next-step\">Continue</button></p></x-step>","goals":["next-0"],"keywords":[]},"step-52":{"id":"step-52","title":"Step  ","html":"<x-step id=\"step-52\" goals=\"quill\"><h2>Exercises</h2><div class=\"exercise\"> <p><strong>Exercise</strong> </p><p>Write some code for computing <svg style=\"vertical-align: -1.599ex\" width=\"4.356ex\" height=\"3.555ex\" class=\"mathjax\" viewBox=\"0 -864.9 1925.3 1571.5\"><title>\\frac{1}{a+\\frac{2}{3}}</title><defs><path id=\"MJX-3367-TEX-N-31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path><path id=\"MJX-3367-TEX-I-1D44E\" d=\"M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z\"></path><path id=\"MJX-3367-TEX-N-2B\" d=\"M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z\"></path><path id=\"MJX-3367-TEX-N-32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"></path><path id=\"MJX-3367-TEX-N-33\" d=\"M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z\"></path></defs><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\"><g data-mml-node=\"math\"><g data-mml-node=\"mfrac\"><g data-mml-node=\"mn\" transform=\"translate(785.9, 394) scale(0.707)\"><use xlink:href=\"#MJX-3367-TEX-N-31\"></use></g><g data-mml-node=\"mrow\" transform=\"translate(220, -451.6) scale(0.707)\"><g data-mml-node=\"mi\"><use xlink:href=\"#MJX-3367-TEX-I-1D44E\"></use></g><g data-mml-node=\"mo\" transform=\"translate(529, 0)\"><use xlink:href=\"#MJX-3367-TEX-N-2B\"></use></g><g data-mml-node=\"mfrac\" transform=\"translate(1307, 0)\"><g data-mml-node=\"mn\" transform=\"translate(220, 394) scale(0.707)\"><use xlink:href=\"#MJX-3367-TEX-N-32\"></use></g><g data-mml-node=\"mn\" transform=\"translate(220, -345) scale(0.707)\"><use xlink:href=\"#MJX-3367-TEX-N-33\"></use></g><rect width=\"553.6\" height=\"60\" x=\"120\" y=\"220\"></rect></g></g><rect width=\"1685.3\" height=\"60\" x=\"120\" y=\"220\"></rect></g></g></g></svg> where <svg style=\"vertical-align: -0.023ex\" width=\"1.197ex\" height=\"1.02ex\" class=\"mathjax\" viewBox=\"0 -441 529 451\"><title>a</title><defs><path id=\"MJX-32-TEX-I-1D44E\" d=\"M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z\"></path></defs><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><use xlink:href=\"#MJX-32-TEX-I-1D44E\"></use></g></g></g></svg> is equal to the number of characters in the string <code class=\"language-julia\">\"The quick brown fox jumped over the lazy dog\"</code></p></div> <pre julia-executable=\"julia-executable\"></pre><x-quill goal=\"quill\"></x-quill></x-step>","goals":["quill"],"keywords":[]},"step-53":{"id":"step-53","title":"Step  ","html":"<x-step id=\"step-53\" goals=\"next-0\"><p><em>Solution.</em> We store the length of the given string in a variable <code class=\"language-julia\">a</code> and evaluate the given expression as follows:</p><pre class=\"language-julia\"><code>a = length(\"The quick brown fox jumped over the lazy dog\")\n1/(a+2/3)</code></pre><p><button class=\"next-step\">Continue</button></p></x-step>","goals":["next-0"],"keywords":[]},"step-54":{"id":"step-54","title":"Step  ","html":"<x-step id=\"step-54\" goals=\"blank-0 blank-1\"><div class=\"exercise\"> <p><strong>Exercise</strong><br>The expression <code class=\"language-julia\">1 &lt; 3</code> returns <span class=\"nowrap\"><x-blank solution=\"true\" goal=\"blank-0\"></x-blank>,</span> which is an object of type <span class=\"nowrap\"><x-blank solution=\"Bool\" goal=\"blank-1\"></x-blank>.</span></p></div> </x-step>","goals":["blank-0","blank-1"],"keywords":[]},"step-55":{"id":"step-55","title":"Step  ","html":"<x-step id=\"step-55\" goals=\"blank-0\"><div class=\"exercise\"> <p><strong>Exercise</strong><br>If we set <span class=\"nowrap\"><code class=\"language-julia\">s = \"Bruno\"</code>,</span> then <code class=\"language-julia\">s[1:j] == \"Bru\"</code> when <code class=\"language-julia\">j =</code> <span class=\"nowrap\"><x-blank solution=\"3\" goal=\"blank-0\"></x-blank>.</span></p></div> </x-step>","goals":["blank-0"],"keywords":[]},"conditionals":{"id":"conditionals","title":"Conditionals","html":"<x-step id=\"conditionals\" goals=\"blank-0\"><p>Consider a simple computational task performed by commonplace software, like highlighting the rows in a spreadsheet which have a value larger than 10 in the third column. We need a new programming language feature to do this, because we need to conditionally execute code (namely, the code which highlights a row) based on the <x-blank-mc goal=\"blank-0\"><button class=\"choice\">Bool</button><button class=\"choice\">Int64</button><button class=\"choice\">Float64</button></x-blank-mc> value returned by the comparison operator. Julia provides <code class=\"language-julia\">if</code> statements for this purpose.</p></x-step>","goals":["blank-0"],"keywords":[]},"step-56":{"id":"step-56","title":"Step  ","html":"<x-step id=\"step-56\" goals=\"next-0\"><h2>Conditionals</h2><p>We can use an <code class=\"language-julia\">if</code> statement to specify different blocks to be executed depending on the value of a boolean expression. For example, the following function calculates the sign of the input value <span class=\"nowrap\"><code class=\"language-julia\">x</code>.</span></p><pre julia-executable=\"julia-executable\">function sgn(x)\n    if x &gt; 0\n        return +1\n    elseif x == 0\n        return 0\n    else\n        return -1\n    end\nend\n\nsgn(-5)</pre><p><button class=\"next-step\">Continue</button></p></x-step>","goals":["next-0"],"keywords":[]},"step-57":{"id":"step-57","title":"Step  ","html":"<x-step id=\"step-57\" goals=\"next-0\"><p>Conditional expressions can be written using <em>ternary conditional</em> <span class=\"nowrap\"><code class=\"language-julia\">«condition» ? «truevalue» : «falsevalue»</code>.</span> For example, the following version of the <code class=\"language-julia\">sgn</code> function returns the same values as the one above except when <span class=\"nowrap\"><code class=\"language-julia\">x == 0</code>.</span></p><pre julia-executable=\"julia-executable\">sgn(x) = x &gt; 0 ? +1 : -1\n\nsgn(-5)</pre><p><button class=\"next-step\">Continue</button></p></x-step>","goals":["next-0"],"keywords":[]},"step-58":{"id":"step-58","title":"Step  ","html":"<x-step id=\"step-58\" goals=\"blank-0 next-0\"><h2>Exercises</h2><div class=\"exercise\"> <p><strong>Exercise</strong><br>Can the <code class=\"language-julia\">else</code> part of an <code class=\"language-julia\">if</code> statement be omitted? <x-blank-mc goal=\"blank-0\"><button class=\"choice\">Yes</button><button class=\"choice\">No</button></x-blank-mc> Try running the example below.</p></div> <pre julia-executable=\"julia-executable\">x = 0.5\nif x &lt; 0\n    print(\"x is negative\")\nelseif x &lt; 1\n    print(\"x is between 0 and 1\")\nend</pre><p><button class=\"next-step\">Continue</button></p></x-step>","goals":["blank-0","next-0"],"keywords":[]},"step-59":{"id":"step-59","title":"Step  ","html":"<x-step id=\"step-59\" goals=\"quill\"><div class=\"exercise\"> <p><strong>Exercise</strong><br>Write a function called <code class=\"language-julia\">my_abs</code> which computes the absolute value of its input.</p></div> <pre julia-executable=\"julia-executable\">function my_abs(x)\n    # add code here\nend\n\nusing Test\n@test my_abs(-3) == 3\n@test my_abs(5.0) == 5.0\n@test my_abs(0.0) == 0.0</pre><x-quill goal=\"quill\"></x-quill></x-step>","goals":["quill"],"keywords":[]},"step-myabs-solution":{"id":"step-myabs-solution","title":"Step Myabs Solution","html":"<x-step id=\"step-myabs-solution\" goals=\"\"><p><em>Solution.</em> We use a single if-else expression:</p><pre julia-executable=\"julia-executable\">function my_abs(x)\n    if x ≥ 0\n        x\n    else\n        -x\n    end\nend</pre></x-step>","goals":[],"keywords":[]},"step-60":{"id":"step-60","title":"Step  ","html":"<x-step id=\"step-60\" goals=\"quill\"><div class=\"exercise\"> <p><strong>Exercise</strong><br>Write a function which returns the quadrant number (1, 2, 3, or 4) in which the point <code class=\"language-julia\">(x,y)</code> is located. Recall that the quadrants are numbered counter-clockwise: the northeast quadrant is quadrant 1, the northwest quadrant is 2, and so on. For convenience, you may assume that both <code class=\"language-julia\">x</code> and <code class=\"language-julia\">y</code> are nonzero.</p><p>Consider nesting if-else blocks inside of an if-else block.</p></div> <pre julia-executable=\"julia-executable\">function quadrant(x,y)\n    # add code here\nend\n\nusing Test\n@test quadrant(1.0, 2.0) == 1\n@test quadrant(-13.0, -2) == 3\n@test quadrant(4, -3) == 4\n@test quadrant(-2, 6) == 2\n</pre><x-quill goal=\"quill\"></x-quill></x-step>","goals":["quill"],"keywords":[]},"step-61":{"id":"step-61","title":"Step  ","html":"<x-step id=\"step-61\" goals=\"\"><p><em>Solution.</em> Here's an example solution:</p><pre julia-executable=\"julia-executable\">function quadrant(x,y)\n    if x &gt; 0\n        if y &gt; 0\n            1\n        else\n            4\n        end\n    else\n        if y &gt; 0\n            2\n        else\n            3\n        end\n    end\nend</pre></x-step>","goals":[],"keywords":[]},"functions":{"id":"functions","title":"Functions","html":"<x-step id=\"functions\" goals=\"next-0\"><p><x-gloss xid=\"function-julia\">Functions</x-gloss> can be used to organize code and achieve <em>separation of concerns:</em> once a function is written, it may be relied upon to perform its designated task without the programmer having to think about <em>how</em> it accomplishes that task. This conceptual aid is crucial for writing maintainable code to solve large, complex problems.</p><p><button class=\"next-step\">Continue</button></p></x-step>","goals":["next-0"],"keywords":[]},"step-62":{"id":"step-62","title":"Step  ","html":"<x-step id=\"step-62\" goals=\"next-0\"><p>A good rule of thumb is that a function should be sufficiently general to be re-usable without duplicating internal logic, but specific enough that you can actually implement it.</p><div class=\"exercise\"> <p><strong>Exercise</strong><br>How could the design of the following code be improved?</p><pre class=\"language-julia\"><code>function remove_one_leading_space(S)\n    if S[1] == \" \"\n        S[1:end]\n    else\n        S\n    end\nend\n\nfunction remove_two_leading_spaces(S)\n    if S[1:2] == \"  \"\n        S[2:]\n    else\n        S\n    end\nend\n\nfunction remove_three_leading_spaces(S)\n    if S[1:3] == \"  \"\n        S[3:end]\n    else\n        S\n    end\nend</code></pre></div> <p><button class=\"next-step\">Continue</button></p></x-step>","goals":["next-0"],"keywords":[]},"step-63":{"id":"step-63","title":"Step  ","html":"<x-step id=\"step-63\" goals=\"next-0\"><p><em>Solution.</em> We should have a single function to remove whatever number of leading spaces the string happens to have. The design above has the problem that we have to figure out how many leading spaces there are before we can call the appropriate function, which means that most of the work that should be performed by the function will have to be performed when the function is called. Thus separation of concerns is not achieved.</p><p><button class=\"next-step\">Continue</button></p></x-step>","goals":["next-0"],"keywords":[]},"step-64":{"id":"step-64","title":"Step  ","html":"<x-step id=\"step-64\" goals=\"next-0\"><h2>Arguments</h2><p>The objects supplied to a function when it's called are referred to as the function's <strong>arguments</strong>. The variables which represent the arguments in the function definition are called <strong>parameters</strong>. The block of code that runs when the function is called is the <strong>body</strong> of the function.</p><p><button class=\"next-step\">Continue</button></p></x-step>","goals":["next-0"],"keywords":[]},"step-65":{"id":"step-65","title":"Step  ","html":"<x-step id=\"step-65\" goals=\"blank-0 blank-1\"><div class=\"exercise\"> <p><strong>Exercise</strong><br>In the following block of code, <code class=\"language-julia\">s</code> is <span class=\"nowrap\"><x-blank-mc goal=\"blank-0\"><button class=\"choice\">a parameter</button><button class=\"choice\">an argument</button></x-blank-mc>,</span> while <code class=\"language-julia\">\"hello\"</code> is <span class=\"nowrap\"><x-blank-mc goal=\"blank-1\"><button class=\"choice\">an argument </button><button class=\"choice\"> a parameter</button></x-blank-mc>.</span></p><pre class=\"language-julia\"><code>function duplicate(s)\n    s * s\nend\n\nduplicate(\"hello\")</code></pre></div> </x-step>","goals":["blank-0","blank-1"],"keywords":[]},"step-66":{"id":"step-66","title":"Step  ","html":"<x-step id=\"step-66\" goals=\"next-0\"><p>We can give parameters <strong>default values</strong> and supply arguments for those parameters optionally when calling the function:</p><pre julia-executable=\"julia-executable\">function line(m, x; b=0)\n    m * x + b\nend\n\nline(2,3) # returns 6\nline(5,4,b=2) # returns 22</pre><p><button class=\"next-step\">Continue</button></p></x-step>","goals":["next-0"],"keywords":[]},"step-67":{"id":"step-67","title":"Step  ","html":"<x-step id=\"step-67\" goals=\"next-0\"><p>The arguments 1, 2, and 3 in this example are called <strong>positional</strong> arguments, and <code class=\"language-julia\">5</code> is a <strong>keyword argument</strong>.</p><p><button class=\"next-step\">Continue</button></p></x-step>","goals":["next-0"],"keywords":[]},"step-68":{"id":"step-68","title":"Step  ","html":"<x-step id=\"step-68\" goals=\"next-0\"><p>If a string literal appears immediately before a function's definition, that string will be interpreted as documentation for the function. This <strong>docstring</strong> helps you and other users of your functions quickly ascertain how they are meant to be used. A function's docstring can accessed in a Julia REPL or notebook by prepending the funtion name with a question mark. For example, <code class=\"language-julia\">?print</code> pulls up the docstring for the built-in <code class=\"language-julia\">print</code> function.</p><p><button class=\"next-step\">Continue</button></p></x-step>","goals":["next-0"],"keywords":[]},"step-69":{"id":"step-69","title":"Step  ","html":"<x-step id=\"step-69\" goals=\"next-0\"><h2>Anonymous functions</h2><p>A function may be defined without assigning a name to it. Such a function is said to be <em>anonymous</em>. Julia's anonymous function <x-gloss xid=\"syntax\">syntax</x-gloss> looks like the corresponding math syntax: the function <svg style=\"vertical-align: -0.566ex\" width=\"15.683ex\" height=\"2.452ex\" class=\"mathjax\" viewBox=\"0 -833.9 6931.8 1083.9\"><title>(x,y)\\mapsto x^2 + y^2</title><defs><path id=\"MJX-3368-TEX-N-28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"></path><path id=\"MJX-3368-TEX-I-1D465\" d=\"M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z\"></path><path id=\"MJX-3368-TEX-N-2C\" d=\"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z\"></path><path id=\"MJX-3368-TEX-I-1D466\" d=\"M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z\"></path><path id=\"MJX-3368-TEX-N-29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"></path><path id=\"MJX-3368-TEX-N-21A6\" d=\"M95 155V109Q95 83 92 73T75 63Q61 63 58 74T54 130Q54 140 54 180T55 250Q55 421 57 425Q61 437 75 437Q88 437 91 428T95 393V345V270H835Q719 357 692 493Q692 494 692 496T691 499Q691 511 708 511H711Q720 511 723 510T729 506T732 497T735 481T743 456Q765 389 816 336T935 261Q944 258 944 250Q944 244 939 241T915 231T877 212Q836 186 806 152T761 85T740 35T732 4Q730 -6 727 -8T711 -11Q691 -11 691 0Q691 7 696 25Q728 151 835 230H95V155Z\"></path><path id=\"MJX-3368-TEX-N-32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"></path><path id=\"MJX-3368-TEX-N-2B\" d=\"M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z\"></path></defs><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\"><g data-mml-node=\"math\"><g data-mml-node=\"mo\"><use xlink:href=\"#MJX-3368-TEX-N-28\"></use></g><g data-mml-node=\"mi\" transform=\"translate(389, 0)\"><use xlink:href=\"#MJX-3368-TEX-I-1D465\"></use></g><g data-mml-node=\"mo\" transform=\"translate(961, 0)\"><use xlink:href=\"#MJX-3368-TEX-N-2C\"></use></g><g data-mml-node=\"mi\" transform=\"translate(1405.7, 0)\"><use xlink:href=\"#MJX-3368-TEX-I-1D466\"></use></g><g data-mml-node=\"mo\" transform=\"translate(1895.7, 0)\"><use xlink:href=\"#MJX-3368-TEX-N-29\"></use></g><g data-mml-node=\"mo\" transform=\"translate(2562.4, 0)\"><use xlink:href=\"#MJX-3368-TEX-N-21A6\"></use></g><g data-mml-node=\"msup\" transform=\"translate(3840.2, 0)\"><g data-mml-node=\"mi\"><use xlink:href=\"#MJX-3368-TEX-I-1D465\"></use></g><g data-mml-node=\"mn\" transform=\"translate(572, 363) scale(0.707)\"><use xlink:href=\"#MJX-3368-TEX-N-32\"></use></g></g><g data-mml-node=\"mo\" transform=\"translate(5038, 0)\"><use xlink:href=\"#MJX-3368-TEX-N-2B\"></use></g><g data-mml-node=\"msup\" transform=\"translate(6038.2, 0)\"><g data-mml-node=\"mi\"><use xlink:href=\"#MJX-3368-TEX-I-1D466\"></use></g><g data-mml-node=\"mn\" transform=\"translate(490, 363) scale(0.707)\"><use xlink:href=\"#MJX-3368-TEX-N-32\"></use></g></g></g></g></svg> can be written as <code class=\"language-julia\">(x,y) -&gt; x^2 + y^2</code> in Julia. A common situation where anonymous functions can be useful is when supplying one function to another as an argument. For example:</p><pre julia-executable=\"julia-executable\">apply_three_times(f, x) = f(f(f(x)))\n\napply_three_times(x-&gt;x^2, 2)</pre><p><button class=\"next-step\">Continue</button></p></x-step>","goals":["next-0"],"keywords":[]},"step-70":{"id":"step-70","title":"Step  ","html":"<x-step id=\"step-70\" goals=\"quill\"><div class=\"exercise\"> <p><strong>Exercise</strong><br>Write a function that takes two arguments <code class=\"language-julia\">a</code> and <code class=\"language-julia\">b</code> and a function <code class=\"language-julia\">f</code> and returns <code class=\"language-julia\">a</code> if <code class=\"language-julia\">f(a) &lt; f(b)</code> and <code class=\"language-julia\">b</code> otherwise. Then use anonymous function syntax to call your function with two numbers and the negation function <span class=\"nowrap\"><svg style=\"vertical-align: -0.186ex\" width=\"7.868ex\" height=\"1.505ex\" class=\"mathjax\" viewBox=\"0 -583 3477.6 665\"><title>x\\mapsto -x</title><defs><path id=\"MJX-3369-TEX-I-1D465\" d=\"M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z\"></path><path id=\"MJX-3369-TEX-N-21A6\" d=\"M95 155V109Q95 83 92 73T75 63Q61 63 58 74T54 130Q54 140 54 180T55 250Q55 421 57 425Q61 437 75 437Q88 437 91 428T95 393V345V270H835Q719 357 692 493Q692 494 692 496T691 499Q691 511 708 511H711Q720 511 723 510T729 506T732 497T735 481T743 456Q765 389 816 336T935 261Q944 258 944 250Q944 244 939 241T915 231T877 212Q836 186 806 152T761 85T740 35T732 4Q730 -6 727 -8T711 -11Q691 -11 691 0Q691 7 696 25Q728 151 835 230H95V155Z\"></path><path id=\"MJX-3369-TEX-N-2212\" d=\"M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z\"></path></defs><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><use xlink:href=\"#MJX-3369-TEX-I-1D465\"></use></g><g data-mml-node=\"mo\" transform=\"translate(849.8, 0)\"><use xlink:href=\"#MJX-3369-TEX-N-21A6\"></use></g><g data-mml-node=\"mo\" transform=\"translate(2127.6, 0)\"><use xlink:href=\"#MJX-3369-TEX-N-2212\"></use></g><g data-mml-node=\"mi\" transform=\"translate(2905.6, 0)\"><use xlink:href=\"#MJX-3369-TEX-I-1D465\"></use></g></g></g></svg>.</span></p></div> <pre julia-executable=\"julia-executable\"></pre><x-quill goal=\"quill\"></x-quill></x-step>","goals":["quill"],"keywords":[]},"step-71":{"id":"step-71","title":"Step  ","html":"<x-step id=\"step-71\" goals=\"next-0\"><p><em>Solution.</em> Here's an example solution:</p><pre julia-executable=\"julia-executable\">function which_bigger(a, b, f)\n    if f(a) &lt; f(b)\n        a\n    else\n        b\n    end\nend\n\nwhich_bigger(4, 6, x-&gt;-x)</pre><p><button class=\"next-step\">Continue</button></p></x-step>","goals":["next-0"],"keywords":[]},"step-72":{"id":"step-72","title":"Step  ","html":"<x-step id=\"step-72\" goals=\"next-0\"><h2>Scope</h2><p>The <strong>scope</strong> of a variable is the region in the program where it is accessible. For example, if you define <code class=\"language-julia\">x</code> to be <code class=\"language-julia\">47</code> on line 413 of your file and get an error because you tried to use <code class=\"language-julia\">x</code> on line 35, the problem is that the variable wasn't <em>in scope</em> yet.</p><p>A variable defined in the main body of a file has <strong>global scope</strong>, meaning that it is visible throughout the program from its point of definition.</p><p><button class=\"next-step\">Continue</button></p></x-step>","goals":["next-0"],"keywords":[]},"step-local-scope":{"id":"step-local-scope","title":"Step Local Scope","html":"<x-step id=\"step-local-scope\" goals=\"next-0\"><p>A variable defined in the body of a function is in that function's <strong>local scope</strong>. For example:</p><pre julia-executable=\"julia-executable\">function f(x)\n    y = 2\n    x + y\nend\n\ny</pre><p><button class=\"next-step\">Continue</button></p></x-step>","goals":["next-0"],"keywords":[]},"step-scope-exercise":{"id":"step-scope-exercise","title":"Step Scope Exercise","html":"<x-step id=\"step-scope-exercise\" goals=\"quill\"><div class=\"exercise\"> <p><strong>Exercise</strong><br>Try nesting one function definition inside another. Are variables in the enclosing function body available in the inner function. What about vice versa?</p></div> <pre julia-executable=\"julia-executable\">function f()\n    function g()\n        j = 2\n        i\n    end\n    print(j)\n    i = 1\n    g()\nend\n\nf()</pre><x-quill goal=\"quill\"></x-quill></x-step>","goals":["quill"],"keywords":[]},"step-73":{"id":"step-73","title":"Step  ","html":"<x-step id=\"step-73\" goals=\"next-0\"><p><em>Solution.</em> The variable defined in the inner function is not in scope in the body of the outer function, but the variable defined in the body of the outer function is in scope in the body of the inner function.</p><p><button class=\"next-step\">Continue</button></p></x-step>","goals":["next-0"],"keywords":[]},"step-74":{"id":"step-74","title":"Step  ","html":"<x-step id=\"step-74\" goals=\"blank-0 quill\"><h2>Testing</h2><p>It's highly recommended to write tests to accompany your functions, so you can confirm that each function behaves as expected. This is especially important as your codebase grows, because changes in one function can lead to problems in other functions that use it. Having a way to test functions throughout your codebase helps you discover these breakages quickly, before they cause harm.</p><p>The standard way to do this in Julia (which you have already seen several times in this course) is write <code class=\"language-julia\">@test</code> statements. An <code class=\"language-julia\">@test</code> statement throws an error if the following expression evaluates to <span class=\"nowrap\"><code class=\"language-julia\">false</code>.</span> In a full-fledged Julia project, these tests typically go in a directory called <code class=\"language-julia\">test</code> so that tests can be run for the whole project.</p><pre julia-executable=\"julia-executable\">\"\"\"\nConcatenate strings s and t, ensuring a space\nbetween them if s ends with a non-space character\nand t begins with a non-space character\n\"\"\"\nfunction space_concat(s,t)\n    if s[end] == ' ' || t[1] == ' '\n        s * t\n    else\n        return s * \" \" * t\n    end\nend\n\nusing Test\n@test space_concat(\"foo\", \"bar\") == \"foo bar\"\n@test space_concat(\"foo \", \"bar\") == \"foo bar\"\n\ntest_space_concat()\nspace_concat(\"foo\", \"bar\")</pre><div class=\"exercise\"> <p><strong>Exercise</strong><br>The test cases above don't cover the <em>degenerate</em> situation where one of the strings is empty. Does the function return correct values for these degenerate cases? <x-blank-mc goal=\"blank-0\"><button class=\"choice\">No</button><button class=\"choice\">Yes</button></x-blank-mc> Add test cases for this, and fix the function so that they pass.</p></div> <x-quill goal=\"quill\"></x-quill></x-step>","goals":["blank-0","quill"],"keywords":[]},"step-75":{"id":"step-75","title":"Step  ","html":"<x-step id=\"step-75\" goals=\"next-0\"><p><em>Solution.</em> We check the empty string conditions prior to checking the last/first characters. This solves the problem because <code class=\"language-julia\">||</code> is <strong>short-circuiting</strong>: if the first bool is <code class=\"language-julia\">true</code> in an <code class=\"language-julia\">||</code> operation, the second is never evaluated.</p><pre julia-executable=\"julia-executable\">function space_concat(s,t)\n    if s == \"\" || t == \"\" || s[end] == ' ' || t[1] == ' '\n        s * t\n    else\n        s * \" \" * t\n    end\nend\n\nusing Test\n@test space_concat(\"foo\", \"bar\") == \"foo bar\"\n@test space_concat(\"foo \", \"bar\") == \"foo bar\"\n@test space_concat(\"foo\", \"\") == \"foo\"\n@test space_concat(\"\", \"bar\") == \"bar\"</pre><p><button class=\"next-step\">Continue</button></p></x-step>","goals":["next-0"],"keywords":[]},"step-function-exercises":{"id":"step-function-exercises","title":"Step Function Exercises","html":"<x-step id=\"step-function-exercises\" goals=\"quill\"><h2>Exercises</h2><div class=\"exercise\"> <p><strong>Exercise</strong><br>Write a function which accepts two strings as input and returns the concatenation of those two strings in alphabetical order.</p><p><em>Hint</em>: Make a guess about which operator can be used to compare strings alphabetically.</p></div> <pre julia-executable=\"julia-executable\">function alphabetical_concat(s,t)\n    # add code here\nend\n\nusing Test\n@test alphabetical_concat(\"alphabet\", \"soup\") == \"alphabetsoup\"\n@test alphabetical_concat(\"socks\", \"red\") == \"redsocks\"\n</pre><x-quill goal=\"quill\"></x-quill></x-step>","goals":["quill"],"keywords":[]},"step-76":{"id":"step-76","title":"Step  ","html":"<x-step id=\"step-76\" goals=\"\"><p><em>Solution.</em></p><pre julia-executable=\"julia-executable\">function alphabetical_concat(s,t)\n    if s &lt; t\n        s * t\n    else\n        t * s\n    end\nend</pre></x-step>","goals":[],"keywords":[]},"packages":{"id":"packages","title":"Packages","html":"<x-step id=\"packages\" goals=\"next-0\"><p>A <x-gloss xid=\"package\"><strong>package</strong></x-gloss> is a collection of Julia files that provide functionality beyond the core functionality available in every Julia program. Packages achieve separation of concerns at the community level: someone else solves a problem of general interest, and then you can leverage their work and focus on applying it to the problem at hand.</p><p>Julia has a built-in package management system. Package management is important because dependencies and versions can quickly become a mess if you are trying to copy code files from other people and put them alongside the files in your project. The package manager is alert to these dependencies and does the computational work to resolve them. It also stores the package code in a central location on your computer so that it is visible to Julia regardless of where your scripts are located.</p><p>To add a Julia package, do <code class=\"language-julia\">using Pkg; Pkg.add(\"PackageName\")</code> from a Julia session. Then <code class=\"language-julia\">using PackageName</code> to load the package. Important packages include</p><ul> <li><code class=\"language-julia\">Plots</code> There are many plotting packages in Julia, but this is the closest the ecosystem has to a standard.</li><li><code class=\"language-julia\">DataFrames</code> The standard package for storing tabular data.</li><li><code class=\"language-julia\">CSV</code> Reading data stored in comma-separated value files.</li><li><code class=\"language-julia\">PyCall</code> Interfacing with Python.</li></ul> <p><button class=\"next-step\">Continue</button></p></x-step>","goals":["next-0"],"keywords":[]},"step-module":{"id":"step-module","title":"Step Module","html":"<x-step id=\"step-module\" goals=\"quill\"><p>Packages might use lots of variable names internally, and some of them might conflict with names you're using. For this reason, package code is wrapped in a <strong>module</strong>, which is a separate variable workspace.</p><p>You can load a module by running, for example, <code class=\"language-julia\">import Plots</code> or <span class=\"nowrap\"><code class=\"language-julia\">using Plots</code>.</span> With the <code class=\"language-julia\">import</code> keyword, your name space and that of the module are kept separate, and you have to access variables within the module using dot syntax: <span class=\"nowrap\"><code class=\"language-julia\">Plots.histogram</code>.</span> In the latter case, any names <em>exported</em> by the module become available in the importing namespace (without the dot syntax). You can also choose specific functions to import: <code class=\"language-julia\">using Plots: histogram</code></p><h2>Exercises</h2><div class=\"exercise\"> <p><strong>Exercise</strong><br> To import just the <code class=\"language-julia\">DataFrame</code> function from <span class=\"nowrap\"><code class=\"language-julia\">DataFrames</code>,</span> we would use what statement?</p></div> <x-quill goal=\"quill\"></x-quill></x-step>","goals":["quill"],"keywords":[]},"step-78":{"id":"step-78","title":"Step  ","html":"<x-step id=\"step-78\" goals=\"next-0\"><p><em>Solution.</em> <code class=\"language-julia\">using DataFrames: DataFrame</code></p><p><button class=\"next-step\">Continue</button></p></x-step>","goals":["next-0"],"keywords":[]},"step-79":{"id":"step-79","title":"Step  ","html":"<x-step id=\"step-79\" goals=\"quill\"><div class=\"exercise\"> <p><strong>Exercise</strong><br> If we want to be able to solve equations using <span class=\"nowrap\"><code class=\"language-julia\">SymPy.solve</code>,</span> what import statement should we run first?</p></div> <x-quill goal=\"quill\"></x-quill></x-step>","goals":["quill"],"keywords":[]},"step-80":{"id":"step-80","title":"Step  ","html":"<x-step id=\"step-80\" goals=\"next-0\"><p><em>Solution</em> <code class=\"language-julia\">import SymPy</code></p><p><button class=\"next-step\">Continue</button></p></x-step>","goals":["next-0"],"keywords":[]},"custom-types":{"id":"custom-types","title":"Custom Types","html":"<x-step id=\"custom-types\" goals=\"next-0\"><p>Suppose you want to write a program which keeps track of the albums you own. Each album is associated with several data, like the name of the album, the year it came out, the number of tracks, etc. You could store all these data by assigning them to different variables, but that becomes untidy very quickly. For example, you will frequently want to pass an album to a function, and you don't want that function to require a long list of parameters just because the album has a lot of data associated with it.</p><p><button class=\"next-step\">Continue</button></p></x-step>","goals":["next-0"],"keywords":[]},"step-85":{"id":"step-85","title":"Step  ","html":"<x-step id=\"step-85\" goals=\"next-0\"><p>What you want is to be able to treat each album as its own Julia object, with all its associated data stored inside. In other words, you want an <code class=\"language-julia\">Album</code> type. You can do that with the <code class=\"language-julia\">struct</code> keyword.</p><pre julia-executable=\"julia-executable\">struct Album\n    name\n    artist\n    year\n    duration\nend\n\nA = Album(\"Abbey Road\", \"The Beatles\", 1969, \"47:23\")</pre><p>In the last line, we have defined a new object of type <code class=\"language-julia\">Album</code> and saved it to the variable <span class=\"nowrap\"><code class=\"language-julia\">A</code>.</span> We call <span class=\"nowrap\"><code class=\"language-julia\">name</code>,</span> <span class=\"nowrap\"><code class=\"language-julia\">artist</code>,</span> <span class=\"nowrap\"><code class=\"language-julia\">year</code>,</span> and <code class=\"language-julia\">duration</code> <strong>fields</strong> of the <code class=\"language-julia\">Album</code> type. The fields of an object can be accessed by name using dot syntax:</p><pre julia-executable=\"julia-executable\">A.duration</pre><p><button class=\"next-step\">Continue</button></p></x-step>","goals":["next-0"],"keywords":[]},"step-86":{"id":"step-86","title":"Step  ","html":"<x-step id=\"step-86\" goals=\"next-0\"><p>We can define functions to operate on our new data type. For example, we might want to be able to calculate how old an album was as of a given year. We can specify types for a function's arguments using double colon syntax:</p><pre julia-executable=\"julia-executable\">function num_years_ago(A::Album, year::Integer)\n    year - A.year\nend</pre><p>Note: <code class=\"language-julia\">Integer</code> is an <strong>abstract type</strong> which encompasses <span class=\"nowrap\"><code class=\"language-julia\">Int64</code>,</span> <code class=\"language-julia\">Int32</code> (which uses 32 bits instead of 64), and any other type which represents a mathematical integer.</p><p><button class=\"next-step\">Continue</button></p></x-step>","goals":["next-0"],"keywords":[]},"step-multiple-dispatch":{"id":"step-multiple-dispatch","title":"Step Multiple Dispatch","html":"<x-step id=\"step-multiple-dispatch\" goals=\"next-0\"><p>One reason it's helpful to be able to specify type information when defining a function is that we can specify different behavior for different types:</p><pre julia-executable=\"julia-executable\">function num_years_ago(earlier_year::Integer, later_year::Integer)\n    later_year - earlier_year\nend\n\nnum_years_ago(A, 2019) # returns 50\nnum_years_ago(1986, 2019) # returns 33</pre><p>We say that <code class=\"language-julia\">num_years_ago</code> now has two <strong>methods</strong>: one which accepts an <code class=\"language-julia\">Album</code> as its first argument and an <code class=\"language-julia\">Integer</code> as its second argument, and one which accepts <code class=\"language-julia\">Integer</code>s for both arguments. Julia is responsible for correctly dispatching each function call to the correct method. This feature of Julia is called <strong>multiple dispatch</strong>.</p><p><button class=\"next-step\">Continue</button></p></x-step>","goals":["next-0"],"keywords":[]},"step-type-exercise":{"id":"step-type-exercise","title":"Step Type Exercise","html":"<x-step id=\"step-type-exercise\" goals=\"quill\"><div class=\"exercise\"> <p><strong>Exercise</strong><br>Write a type <code class=\"language-julia\">Line</code> for representing non-vertical lines in the plane. Write a two-argument method <code class=\"language-julia\">intersect</code> which finds the intersection point of two lines (you may return the intersection point as a tuple of floats, and for simplicity, you can assume the lines intersect).</p></div> <pre julia-executable=\"julia-executable\"></pre><x-quill goal=\"quill\"></x-quill></x-step>","goals":["quill"],"keywords":[]},"step-line-type-solution":{"id":"step-line-type-solution","title":"Step Line Type Solution","html":"<x-step id=\"step-line-type-solution\" goals=\"\"><p><em>Solution.</em> Since we only need to store non-vertical lines, we can represent every line via its slope and intercept. We can specify that these data types should be <code class=\"language-julia\">Float64</code>s if we want:</p><pre julia-executable=\"julia-executable\">struct Line\n    slope::Float64\n    intercept::Float64\nend</pre><p> The intersection point of two lines is given by</p><pre julia-executable=\"julia-executable\">function intersect(L::Line,M::Line)\n    x = -(L.intercept-M.intercept)/(L.slope-M.slope)\n    y = L.intercept + x*L.slope\n    (x,y)\nend</pre></x-step>","goals":[],"keywords":[]},"lists-and-tuples":{"id":"lists-and-tuples","title":"Lists And Tuples","html":"<x-step id=\"lists-and-tuples\" goals=\"next-0\"><p>Let's revisit the spreadsheet example we discussed earlier: suppose you're writing a spreadsheet application and you want to introduce some functionality for highlighting every row whose third-column value is greater than 10:</p><table><tbody><tr><td><div class=\"pill grey\">20</div></td><td><div class=\"pill grey\">16</div></td><td><div class=\"pill grey\">2</div></td><td><div class=\"pill grey\">1</div></td><td><div class=\"pill grey\">19</div></td></tr><tr><td><div class=\"pill blue\">9</div></td><td><div class=\"pill blue\">12</div></td><td><div class=\"pill blue\">15</div></td><td><div class=\"pill blue\">1</div></td><td><div class=\"pill blue\">19</div></td></tr><tr><td><div class=\"pill grey\">7</div></td><td><div class=\"pill grey\">2</div></td><td><div class=\"pill grey\">1</div></td><td><div class=\"pill grey\">15</div></td><td><div class=\"pill grey\">4</div></td></tr><tr><td><div class=\"pill blue\">19</div></td><td><div class=\"pill blue\">6</div></td><td><div class=\"pill blue\">16</div></td><td><div class=\"pill blue\">4</div></td><td><div class=\"pill blue\">7</div></td></tr><tr><td><div class=\"pill grey\">3</div></td><td><div class=\"pill grey\">14</div></td><td><div class=\"pill grey\">3</div></td><td><div class=\"pill grey\">1</div></td><td><div class=\"pill grey\">1</div></td></tr><tr><td><div class=\"pill blue\">16</div></td><td><div class=\"pill blue\">5</div></td><td><div class=\"pill blue\">15</div></td><td><div class=\"pill blue\">6</div></td><td><div class=\"pill blue\">6</div></td></tr><tr><td><div class=\"pill grey\">14</div></td><td><div class=\"pill grey\">9</div></td><td><div class=\"pill grey\">7</div></td><td><div class=\"pill grey\">18</div></td><td><div class=\"pill grey\">15</div></td></tr><tr><td><div class=\"pill grey\">15</div></td><td><div class=\"pill grey\">9</div></td><td><div class=\"pill grey\">3</div></td><td><div class=\"pill grey\">9</div></td><td><div class=\"pill grey\">16</div></td></tr><tr><td><div class=\"pill blue\">13</div></td><td><div class=\"pill blue\">6</div></td><td><div class=\"pill blue\">13</div></td><td><div class=\"pill blue\">10</div></td><td><div class=\"pill blue\">20</div></td></tr><tr><td><div class=\"pill grey\">10</div></td><td><div class=\"pill grey\">14</div></td><td><div class=\"pill grey\">5</div></td><td><div class=\"pill grey\">8</div></td><td><div class=\"pill grey\">8</div></td></tr><tr><td><div class=\"pill blue\">4</div></td><td><div class=\"pill blue\">13</div></td><td><div class=\"pill blue\">16</div></td><td><div class=\"pill blue\">15</div></td><td><div class=\"pill blue\">9</div></td></tr><tr><td><div class=\"pill grey\">16</div></td><td><div class=\"pill grey\">9</div></td><td><div class=\"pill grey\">4</div></td><td><div class=\"pill grey\">14</div></td><td><div class=\"pill grey\">1</div></td></tr><tr><td><div class=\"pill grey\">17</div></td><td><div class=\"pill grey\">9</div></td><td><div class=\"pill grey\">4</div></td><td><div class=\"pill grey\">3</div></td><td><div class=\"pill grey\">8</div></td></tr><tr><td><div class=\"pill grey\">2</div></td><td><div class=\"pill grey\">6</div></td><td><div class=\"pill grey\">4</div></td><td><div class=\"pill grey\">6</div></td><td><div class=\"pill grey\">14</div></td></tr><tr><td><div class=\"pill blue\">15</div></td><td><div class=\"pill blue\">8</div></td><td><div class=\"pill blue\">14</div></td><td><div class=\"pill blue\">3</div></td><td><div class=\"pill blue\">14</div></td></tr><tr><td><div class=\"pill grey\">14</div></td><td><div class=\"pill grey\">19</div></td><td><div class=\"pill grey\">8</div></td><td><div class=\"pill grey\">17</div></td><td><div class=\"pill grey\">10</div></td></tr><tr><td><div class=\"pill grey\">18</div></td><td><div class=\"pill grey\">8</div></td><td><div class=\"pill grey\">9</div></td><td><div class=\"pill grey\">5</div></td><td><div class=\"pill grey\">9</div></td></tr><tr><td><div class=\"pill grey\">4</div></td><td><div class=\"pill grey\">4</div></td><td><div class=\"pill grey\">5</div></td><td><div class=\"pill grey\">5</div></td><td><div class=\"pill grey\">8</div></td></tr><tr><td><div class=\"pill grey\">11</div></td><td><div class=\"pill grey\">8</div></td><td><div class=\"pill grey\">1</div></td><td><div class=\"pill grey\">14</div></td><td><div class=\"pill grey\">2</div></td></tr><tr><td><div class=\"pill blue\">12</div></td><td><div class=\"pill blue\">11</div></td><td><div class=\"pill blue\">13</div></td><td><div class=\"pill blue\">19</div></td><td><div class=\"pill blue\">7</div></td></tr></tbody></table><p>We definitely don't want to think of 100 variable names for the 100 values in the table, and we don't want to write a line of code for each row. What we need is a way to store all of the rows (or columns) in an object designed to contain many objects. Julia provides several such <strong>compound data structures</strong>, and in this section we will learn about two: <strong>arrays</strong> and <strong>tuples</strong>.</p><p><button class=\"next-step\">Continue</button></p></x-step>","goals":["next-0"],"keywords":[]},"step-91":{"id":"step-91","title":"Step  ","html":"<x-step id=\"step-91\" goals=\"blank-0\"><h2>Arrays</h2><p>A <code class=\"language-julia\">Array</code> in Julia is a compound data type for storing a finite ordered sequence of Julia objects. Arrays are <strong>mutable</strong>, meaning that they can be changed.</p><p>The simplest way to produce an array in a Julia program is with a <strong>array literal</strong>, which requires listing the objects separated by commas and delimited by square brackets:</p><pre julia-executable=\"julia-executable\">myArray = [1, \"flower\", true, 7]\nx = 5\nmyOtherArray = [1, x, x, 2]</pre><div class=\"exercise\"> <p><strong>Exercise</strong><br>What happens to <code class=\"language-julia\">myOtherArray</code> in the example above if a different value is assigned to <code class=\"language-julia\">x</code> <em>after</em> <code class=\"language-julia\">myOtherArray</code> is created? <x-blank-mc goal=\"blank-0\"><button class=\"choice\">the list doesn't change</button><button class=\"choice\">the list changes</button></x-blank-mc></p></div> </x-step>","goals":["blank-0"],"keywords":[]},"step-92":{"id":"step-92","title":"Step  ","html":"<x-step id=\"step-92\" goals=\"next-0\"><p><em>Solution.</em> The list doesn't change. The object associated with the variable <code class=\"language-julia\">x</code> is retrieved when the list is created, and after that point the list is no longer connected to the name <span class=\"nowrap\"><code class=\"language-julia\">x</code>.</span></p><p><button class=\"next-step\">Continue</button></p></x-step>","goals":["next-0"],"keywords":[]},"step-93":{"id":"step-93","title":"Step  ","html":"<x-step id=\"step-93\" goals=\"next-0\"><p>Like strings, arrays can be <strong>indexed</strong> to obtain their elements. The keyword <span class=\"math\" data-voice=\"end\"><mi>end</mi></span> in an array index refers to the last index.</p><pre julia-executable=\"julia-executable\">myArray = [1, \"flower\", true, 7]\nmyArray[1] # returns 1\nmyArray[4] # returns 7\nmyArray[end-1] # returns true</pre><p><button class=\"next-step\">Continue</button></p></x-step>","goals":["next-0"],"keywords":[]},"step-95":{"id":"step-95","title":"Step  ","html":"<x-step id=\"step-95\" goals=\"blank-0 blank-1 next-0\"><p>Subarrays can be extracted by <strong>slicing</strong>. Indexing a list with the range object <code class=\"language-python\">i:j</code> returns the portion of the list from the <span class=\"math\" data-voice=\"_i_\"><mi>i</mi></span>th element to the <span class=\"math\" data-voice=\"_j_\"><mi>j</mi></span>th element.</p><pre julia-executable=\"julia-executable\">myList = [1, \"flower\", true, 7]\nmyList[1:3]</pre><div class=\"exercise\"> <p><strong>Exercise</strong><br>If <code class=\"language-julia\">i</code> = <x-blank solution=\"2\" goal=\"blank-0\"></x-blank> and <code class=\"language-julia\">j</code> = <span class=\"nowrap\"><x-blank solution=\"3\" goal=\"blank-1\"></x-blank>,</span> then <code class=\"language-julia\">myList[i:j]</code> is equal to <span class=\"nowrap\"><code class=\"language-julia\">[\"flower\", true]</code>.</span></p></div> <p><button class=\"next-step\">Continue</button></p></x-step>","goals":["blank-0","blank-1","next-0"],"keywords":[]},"step-97":{"id":"step-97","title":"Step  ","html":"<x-step id=\"step-97\" goals=\"next-0\"><p>Range objects can include a <em>step</em> value between the starting and ending values. For example, <code class=\"language-julia\">A[1:<img class=\"emoji\" width=\"20\" height=\"20\" src=\"https://static.mathigon.org/emoji/2.png\" alt=\"2\">:9]</code> returns the elements of <code class=\"language-julia\">A</code> at positions 1, 3, 5, 7, and 9.</p><p><button class=\"next-step\">Continue</button></p></x-step>","goals":["next-0"],"keywords":[]},"step-98":{"id":"step-98","title":"Step  ","html":"<x-step id=\"step-98\" goals=\"blank-0 next-0\"><div class=\"exercise\"> <p><strong>Exercise</strong><br>What step value can be used to <em>reverse</em> a list? <x-blank solution=\"-1\" goal=\"blank-0\"></x-blank> (Hint: you can reason it out!)</p></div> <pre julia-executable=\"julia-executable\">[2,4,6,8][] # insert a range object to return [8,6,4,2]</pre><p><button class=\"next-step\">Continue</button></p></x-step>","goals":["blank-0","next-0"],"keywords":[]},"step-99":{"id":"step-99","title":"Step  ","html":"<x-step id=\"step-99\" goals=\"next-0\"><p><em>Solution.</em> Going in reverse order through a list corresponds to stepping by <svg style=\"vertical-align: -0.186ex\" width=\"2.891ex\" height=\"1.692ex\" class=\"mathjax\" viewBox=\"0 -666 1278 748\"><title>-1</title><defs><path id=\"MJX-224-TEX-N-2212\" d=\"M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z\"></path><path id=\"MJX-224-TEX-N-31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path></defs><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\"><g data-mml-node=\"math\"><g data-mml-node=\"mo\"><use xlink:href=\"#MJX-224-TEX-N-2212\"></use></g><g data-mml-node=\"mn\" transform=\"translate(778, 0)\"><use xlink:href=\"#MJX-224-TEX-N-31\"></use></g></g></g></svg> each time. Using the range object <code class=\"language-julia\">end : -1 : 1</code> to index an array reverses the array.</p><p><button class=\"next-step\">Continue</button></p></x-step>","goals":["next-0"],"keywords":[]},"step-100":{"id":"step-100","title":"Step  ","html":"<x-step id=\"step-100\" goals=\"next-0\"><p>Arrays can be concatenated with the <code class=\"language-julia\">vcat</code> function:</p><pre julia-executable=\"julia-executable\">vcat([1,2,3],[4,5,6,7])</pre><p><button class=\"next-step\">Continue</button></p></x-step>","goals":["next-0"],"keywords":[]},"step-pushing":{"id":"step-pushing","title":"Step Pushing","html":"<x-step id=\"step-pushing\" goals=\"next-0\"><p>Elements can be appended to an array with <span class=\"nowrap\"><code class=\"language-julia\">push!</code>:</span></p><pre julia-executable=\"julia-executable\">A = [1,2,5]\npush!(A,-4)\nA</pre><p><button class=\"next-step\">Continue</button></p></x-step>","goals":["next-0"],"keywords":[]},"step-broadcasting":{"id":"step-broadcasting","title":"Step Broadcasting","html":"<x-step id=\"step-broadcasting\" goals=\"next-0\"><p>To perform operations entry-by-entry on two arrays, prefix the operation with a dot:</p><pre julia-executable=\"julia-executable\">[1,2,3] .+ [4,5,6]</pre><p>Same idea for functions. To apply the function <code class=\"language-julia\">sin</code> to each entry in an array of 100 equally spaced values from 0 to 2π, we would do:</p><pre julia-executable=\"julia-executable\">sin.(range(0, stop=2π, length=100))</pre><p>This is called <strong>broadcasting</strong>.</p><p>(Note: the <code class=\"language-julia\">range</code> function is another way to produce a <code class=\"language-julia\">range</code> object; it allows us to specify the number of entries rather than the step size.)</p><p><button class=\"next-step\">Continue</button></p></x-step>","goals":["next-0"],"keywords":[]},"step-rotate-exercise":{"id":"step-rotate-exercise","title":"Step Rotate Exercise","html":"<x-step id=\"step-rotate-exercise\" goals=\"quill\"><div class=\"exercise\"> <p><strong>Exercise</strong><br>Write a <x-gloss xid=\"function-julia\">function</x-gloss> which takes as arguments an array <code class=\"language-julia\">A</code> and a positive integer <code class=\"language-julia\">n</code> and rotates <code class=\"language-julia\">A</code> by <code class=\"language-julia\">n</code> positions. In other words, every element of the list should move forward <code class=\"language-julia\">n</code> positions, wrapping around to the beginning if it goes off the end of the list.</p></div> <pre julia-executable=\"julia-executable\">\"Cyclically shift the A by n positions\"\nfunction rotate(A, n)\n    # add code here\nend\n\nusing Test\n@test rotate([1,2,3],1) == [3,1,2]\n@test rotate([1,2,3],2) == [2,3,1]      \n@test rotate([1,2,3,4,5],8) == [3,4,5,1,2]</pre><x-quill goal=\"quill\"></x-quill></x-step>","goals":["quill"],"keywords":[]},"step-101":{"id":"step-101","title":"Step  ","html":"<x-step id=\"step-101\" goals=\"next-0\"><p><em>Solution.</em> We figure out where the list needs to be split and concatenate the two resulting sublists in the opposite order:</p><pre julia-executable=\"julia-executable\">function rotate(L, n)\n    k = length(L) - n % length(L) + 1\n    vcat(L[k:end], L[1:k-1])\nend</pre><p><button class=\"next-step\">Continue</button></p></x-step>","goals":["next-0"],"keywords":[]},"step-102":{"id":"step-102","title":"Step  ","html":"<x-step id=\"step-102\" goals=\"quill\"><p>Arrays may be modified by combining indexing with assignment:</p><pre julia-executable=\"julia-executable\">A = [4,-3,2]\nA[1] = 1\nA[2:3] = [6,3]\nA</pre><div class=\"exercise\"> <p><strong>Exercise</strong><br>Write a line of code which sets every even-indexed entry of an array <code class=\"language-julia\">A</code> to zero. Note that you can get a list of <code class=\"language-julia\">n</code> zeros <span class=\"math\" data-voice=\"fill of 0 _n_\"><mi>fill</mi><mfenced><mn>0</mn><mo value=\",\" lspace=\"0\">,</mo><mi>n</mi></mfenced></span></p></div> <pre julia-executable=\"julia-executable\">A = [1,2,3,4,5,6,7,8,9,10]\nA</pre><x-quill goal=\"quill\"></x-quill></x-step>","goals":["quill"],"keywords":[]},"step-103":{"id":"step-103","title":"Step  ","html":"<x-step id=\"step-103\" goals=\"next-0\"><p><em>Solution.</em> <code class=\"language-julia\">A[2:<img class=\"emoji\" width=\"20\" height=\"20\" src=\"https://static.mathigon.org/emoji/2.png\" alt=\"2\">:end] = fill(0,length(A)÷2)</code></p><p><button class=\"next-step\">Continue</button></p></x-step>","goals":["next-0"],"keywords":[]},"step-106":{"id":"step-106","title":"Step  ","html":"<x-step id=\"step-106\" goals=\"next-0\"><h2>List comprehensions</h2><p>Two of the most common ways of generating one list from another are (1) applying a given function to every element of the original list, and (2) retaining only those elements of the original list which satisfy a given criterion. These two operations are called <strong>map</strong> and <strong>filter</strong>, respectively.</p><pre class=\"language-julia\"><code>square(x) = x * x\n\ncollect(map(square, 0:5)) # returns [0, 1, 4, 9, 16]\n\ncollect(filter(iseven, 0:5)) # returns [0,2,4]</code></pre><p>The extra calls to <code class=\"language-julia\">collect</code> in the examples above are required to see the result because <code class=\"language-julia\">map</code> and <code class=\"language-julia\">filter</code> are <em>lazy</em>: they return objects which <em>promise</em> to perform the specified calculation when it's needed. The function <code class=\"language-python\">collect</code> forces Julia to turn such objects into actual arrays.</p><p>Julia provides a convenient <x-gloss xid=\"syntax\">syntax</x-gloss> for both mapping <em>and</em> filtering: the <strong>array comprehension</strong>. It's essentially a programming version of set builder notation. For example, to square the even numbers from 0 to 4, we can use the following expression:</p><pre julia-executable=\"julia-executable\">[x^2 for x in 0:4 if iseven(x)]</pre><p><button class=\"next-step\">Continue</button></p></x-step>","goals":["next-0"],"keywords":[]},"step-107":{"id":"step-107","title":"Step  ","html":"<x-step id=\"step-107\" goals=\"quill\"><p>Let's break this example down step-by-step: the first value of <code class=\"language-julia\">0:4</code> is assigned to the variable <span class=\"nowrap\"><code class=\"language-julia\">x</code>,</span> and then the <code class=\"language-julia\">if</code> expression is evaluated. If it's true, the expression <code class=\"language-julia\">x^2</code> is evaluated and stored as the first value of the list that is to be returned. Then the second value of <code class=\"language-julia\">0:4</code> is assigned to <span class=\"nowrap\"><code class=\"language-julia\">x</code>,</span> the condition is evaluated, and so on.</p><div class=\"exercise\"> <p><strong>Exercise</strong><br>Write an array comprehension which returns a list whose kth entry is the last digit of the kth three-digit prime number. Note: the <code class=\"language-julia\">string</code> function converts an integer into a string.</p></div> <pre julia-executable=\"julia-executable\">using Primes: isprime</pre><x-quill goal=\"quill\"></x-quill></x-step>","goals":["quill"],"keywords":[]},"step-108":{"id":"step-108","title":"Step  ","html":"<x-step id=\"step-108\" goals=\"next-0\"><p><em>Solution.</em> Here's an example solution:</p><pre julia-executable=\"julia-executable\">using Primes: isprime\n[string(k)[end] for k in 100:999 if isprime(k)]</pre><p><button class=\"next-step\">Continue</button></p></x-step>","goals":["next-0"],"keywords":[]},"step-109":{"id":"step-109","title":"Step  ","html":"<x-step id=\"step-109\" goals=\"quill\"><div class=\"exercise\"> <p><strong>Exercise</strong><br>Write an array comprehension which takes a array of arrays and returns only those arrays whose second element has a least five elements.</p></div> <pre julia-executable=\"julia-executable\">records = [[3, \"flower\", -1], [2, \"rise\", 3], [0, \"basket\", 0]]</pre><x-quill goal=\"quill\"></x-quill></x-step>","goals":["quill"],"keywords":[]},"step-110":{"id":"step-110","title":"Step  ","html":"<x-step id=\"step-110\" goals=\"next-0\"><p><em>Solution.</em> Here's one solution:</p><pre julia-executable=\"julia-executable\">     [record for record in records if length(record[2]) ≥ 5]</pre><p><button class=\"next-step\">Continue</button></p></x-step>","goals":["next-0"],"keywords":[]},"step-111":{"id":"step-111","title":"Step  ","html":"<x-step id=\"step-111\" goals=\"next-0\"><h2>Tuples</h2><p>Tuples are very similar to lists, except that tuples are <span class=\"nowrap\"><x-gloss xid=\"immutable\">immutable</x-gloss>.</span></p><pre julia-executable=\"julia-executable\">row = (22,2.0,\"tomato\")\nrow[3] # returns \"tomato\"\nrow[3] = \"squash\" # throws MethodError</pre><p>Programmers tend to use tuples instead of lists in situations where <strong>position</strong> in the tuple carries more meaning than <strong>order</strong>. For example, perhaps the tuple assigned to <code class=\"language-julia\">row</code> above describes a row of plants in a garden, with the three numbers indicating the number of plants, the number of weeks since they were planted, and the type of plant. We could have chosen some other order for those three values, as long as we're consistent about which position corresponds to which value. By contrast, the 22 heights of the plants on that row would typically be stored in an <em>array</em>, since the list order corresponds to something meaningful in that case (namely, the order of the plants in the row).</p><p><button class=\"next-step\">Continue</button></p></x-step>","goals":["next-0"],"keywords":[]},"step-112":{"id":"step-112","title":"Step  ","html":"<x-step id=\"step-112\" goals=\"next-0\"><p>Functions often return multiple values by returning a tuple containing those values. You can access individual elements of a tuple without having to index the tuple using <em>tuple unpacking</em>:</p><pre julia-executable=\"julia-executable\">mycolor = (1.0,1.0,0.44)\nr, g, b = mycolor\nb</pre><p>The convention in Julia for values you don't want to store is to assign them to the variable whose name is just an underscore. That way you don't have to think of names for those variables, and you signal to anyone reading your code that you are not using those values.</p><p><button class=\"next-step\">Continue</button></p></x-step>","goals":["next-0"],"keywords":[]},"step-113":{"id":"step-113","title":"Step  ","html":"<x-step id=\"step-113\" goals=\"quill\"><p>Tuple unpacking can be combined with array comprehension syntax. If we want to extract the first element from each tuple in a list of triples, for example, we can do that as follows:</p><pre julia-executable=\"julia-executable\">A = [(1,2,3),(4,5,6),(7,8,9)]\n[a for (a,_,_) in A]</pre><p>The value 1 is assigned to <span class=\"nowrap\"><code class=\"language-julia\">a</code>,</span> the value 2 is assigned to the underscore variable, and then the value 3 is also assigned to the underscore variable (this overwrite is no problem since we aren't using that value anyway). Then <code class=\"language-julia\">a</code> is evaluated as the first element in the new list, and the process repeats for the remaining triples in the list.</p><div class=\"exercise\"> <p><strong>Exercise</strong><br>Write a list comprehension which adds the first two elements of each tuple in <span class=\"nowrap\"><code class=\"language-julia\">A</code>.</span> (So for the example above, the resulting list should be <span class=\"nowrap\"><code class=\"language-julia\">[3, 9, 15]</code>.</span>)</p></div> <pre julia-executable=\"julia-executable\"></pre><x-quill goal=\"quill\"></x-quill></x-step>","goals":["quill"],"keywords":[]},"step-114":{"id":"step-114","title":"Step  ","html":"<x-step id=\"step-114\" goals=\"next-0\"><p><em>Solution.</em> Same idea:</p><pre julia-executable=\"julia-executable\">A = [(1,2,3),(4,5,6),(7,8,9)]\n[a+b for (a,b,_) in A]</pre><p><button class=\"next-step\">Continue</button></p></x-step>","goals":["next-0"],"keywords":[]},"step-115":{"id":"step-115","title":"Step  ","html":"<x-step id=\"step-115\" goals=\"quill\"><div class=\"exercise\"> <p><strong>Exercise</strong><br>The fractional part of a positive real number <svg style=\"vertical-align: -0.025ex\" width=\"1.294ex\" height=\"1.025ex\" class=\"mathjax\" viewBox=\"0 -442 572 453\"><title>x</title><defs><path id=\"MJX-28-TEX-I-1D465\" d=\"M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z\"></path></defs><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><use xlink:href=\"#MJX-28-TEX-I-1D465\"></use></g></g></g></svg> is the part after the decimal point: it's defined to be the positive difference between <svg style=\"vertical-align: -0.025ex\" width=\"1.294ex\" height=\"1.025ex\" class=\"mathjax\" viewBox=\"0 -442 572 453\"><title>x</title><defs><path id=\"MJX-28-TEX-I-1D465\" d=\"M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z\"></path></defs><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><use xlink:href=\"#MJX-28-TEX-I-1D465\"></use></g></g></g></svg> and the greatest integer which is less than or equal to <span class=\"nowrap\"><svg style=\"vertical-align: -0.025ex\" width=\"1.294ex\" height=\"1.025ex\" class=\"mathjax\" viewBox=\"0 -442 572 453\"><title>x</title><defs><path id=\"MJX-28-TEX-I-1D465\" d=\"M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z\"></path></defs><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><use xlink:href=\"#MJX-28-TEX-I-1D465\"></use></g></g></g></svg>.</span> You can find the fractional part of <code class=\"language-julia\">x</code> in Julia with the expression <code class=\"language-julia\">mod(x,1)</code></p><p>Find the fractional parts of the first 100 positive integer multiples of <span class=\"nowrap\"><svg style=\"vertical-align: -0.025ex\" width=\"1.29ex\" height=\"1ex\" class=\"mathjax\" viewBox=\"0 -431 570 442\"><title>\\pi</title><defs><path id=\"MJX-139-TEX-I-1D70B\" d=\"M132 -11Q98 -11 98 22V33L111 61Q186 219 220 334L228 358H196Q158 358 142 355T103 336Q92 329 81 318T62 297T53 285Q51 284 38 284Q19 284 19 294Q19 300 38 329T93 391T164 429Q171 431 389 431Q549 431 553 430Q573 423 573 402Q573 371 541 360Q535 358 472 358H408L405 341Q393 269 393 222Q393 170 402 129T421 65T431 37Q431 20 417 5T381 -10Q370 -10 363 -7T347 17T331 77Q330 86 330 121Q330 170 339 226T357 318T367 358H269L268 354Q268 351 249 275T206 114T175 17Q164 -11 132 -11Z\"></path></defs><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><use xlink:href=\"#MJX-139-TEX-I-1D70B\"></use></g></g></g></svg>.</span> Use the function <code class=\"language-julia\">extrema</code> on the resulting array to find its least and greatest values. Find the ratio of the greatest value to the least.</p></div> <pre julia-executable=\"julia-executable\"></pre><x-quill goal=\"quill\"></x-quill></x-step>","goals":["quill"],"keywords":[]},"step-116":{"id":"step-116","title":"Step  ","html":"<x-step id=\"step-116\" goals=\"next-0\"><p><em>Solution.</em> We use tuple unpacking to extract the min and max values from the tuple returned by the <code class=\"language-julia\">extrema</code> function.</p><pre julia-executable=\"julia-executable\">m,M = extrema([mod(pi*k,1) for k in 1:100])\nM/m</pre><p>The result is about 56.08.</p><p><button class=\"next-step\">Continue</button></p></x-step>","goals":["next-0"],"keywords":[]},"step-117":{"id":"step-117","title":"Step  ","html":"<x-step id=\"step-117\" goals=\"quill\"><p>A common pattern for generating new arrays combines list comprehension, tuple unpacking, and the function <span class=\"nowrap\"><code class=\"language-julia\">zip</code>.</span> The <code class=\"language-julia\">zip</code> function takes two arrays and returns a single array of pairs of corresponding entries (or three arrays, in which case it returns an array of triples, etc.). For example,</p><pre class=\"language-julia\"><code>zip([\"a\", \"b\", \"c\"], [1, 2, 3])</code></pre><p>returns an object which is equivalent to <span class=\"nowrap\"><code class=\"language-julia\">[(\"a\", 1), (\"b\", 2), (\"c\", 3)]</code>.</span></p><div class=\"exercise\"> <p><strong>Exercise</strong><br>Suppose that <svg style=\"vertical-align: 0\" width=\"2.009ex\" height=\"1.545ex\" class=\"mathjax\" viewBox=\"0 -683 888 683\"><title>H</title><defs><path id=\"MJX-186-TEX-I-1D43B\" d=\"M228 637Q194 637 192 641Q191 643 191 649Q191 673 202 682Q204 683 219 683Q260 681 355 681Q389 681 418 681T463 682T483 682Q499 682 499 672Q499 670 497 658Q492 641 487 638H485Q483 638 480 638T473 638T464 637T455 637Q416 636 405 634T387 623Q384 619 355 500Q348 474 340 442T328 395L324 380Q324 378 469 378H614L615 381Q615 384 646 504Q674 619 674 627T617 637Q594 637 587 639T580 648Q580 650 582 660Q586 677 588 679T604 682Q609 682 646 681T740 680Q802 680 835 681T871 682Q888 682 888 672Q888 645 876 638H874Q872 638 869 638T862 638T853 637T844 637Q805 636 794 634T776 623Q773 618 704 340T634 58Q634 51 638 51Q646 48 692 46H723Q729 38 729 37T726 19Q722 6 716 0H701Q664 2 567 2Q533 2 504 2T458 2T437 1Q420 1 420 10Q420 15 423 24Q428 43 433 45Q437 46 448 46H454Q481 46 514 49Q520 50 522 50T528 55T534 64T540 82T547 110T558 153Q565 181 569 198Q602 330 602 331T457 332H312L279 197Q245 63 245 58Q245 51 253 49T303 46H334Q340 38 340 37T337 19Q333 6 327 0H312Q275 2 178 2Q144 2 115 2T69 2T48 1Q31 1 31 10Q31 12 34 24Q39 43 44 45Q48 46 59 46H65Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Q285 635 228 637Z\"></path></defs><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><use xlink:href=\"#MJX-186-TEX-I-1D43B\"></use></g></g></g></svg> is a list which stores the heights of 100 cylinders and <svg style=\"vertical-align: -0.048ex\" width=\"1.717ex\" height=\"1.593ex\" class=\"mathjax\" viewBox=\"0 -683 759 704\"><title>R</title><defs><path id=\"MJX-1997-TEX-I-1D445\" d=\"M230 637Q203 637 198 638T193 649Q193 676 204 682Q206 683 378 683Q550 682 564 680Q620 672 658 652T712 606T733 563T739 529Q739 484 710 445T643 385T576 351T538 338L545 333Q612 295 612 223Q612 212 607 162T602 80V71Q602 53 603 43T614 25T640 16Q668 16 686 38T712 85Q717 99 720 102T735 105Q755 105 755 93Q755 75 731 36Q693 -21 641 -21H632Q571 -21 531 4T487 82Q487 109 502 166T517 239Q517 290 474 313Q459 320 449 321T378 323H309L277 193Q244 61 244 59Q244 55 245 54T252 50T269 48T302 46H333Q339 38 339 37T336 19Q332 6 326 0H311Q275 2 180 2Q146 2 117 2T71 2T50 1Q33 1 33 10Q33 12 36 24Q41 43 46 45Q50 46 61 46H67Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628Q287 635 230 637ZM630 554Q630 586 609 608T523 636Q521 636 500 636T462 637H440Q393 637 386 627Q385 624 352 494T319 361Q319 360 388 360Q466 361 492 367Q556 377 592 426Q608 449 619 486T630 554Z\"></path></defs><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><use xlink:href=\"#MJX-1997-TEX-I-1D445\"></use></g></g></g></svg> is a list which stores their radii (in the same order). Write an <x-gloss xid=\"listcomp\">array comprehension</x-gloss> which returns a list containing the volumes of these cylinders.</p></div> <pre julia-executable=\"julia-executable\">H = [1, 2, 3]\nR = [0.8, 1.0, 1.2]</pre><x-quill goal=\"quill\"></x-quill></x-step>","goals":["quill"],"keywords":[]},"step-118":{"id":"step-118","title":"Step  ","html":"<x-step id=\"step-118\" goals=\"next-0\"><p><em>Solution.</em> We zip <code class=\"language-julia\">H</code> and <code class=\"language-julia\">R</code> and use the volume formula <span class=\"nowrap\"><svg style=\"vertical-align: -0.025ex\" width=\"4.526ex\" height=\"1.912ex\" class=\"mathjax\" viewBox=\"0 -833.9 2000.6 844.9\"><title>\\pi r^2 h</title><defs><path id=\"MJX-3370-TEX-I-1D70B\" d=\"M132 -11Q98 -11 98 22V33L111 61Q186 219 220 334L228 358H196Q158 358 142 355T103 336Q92 329 81 318T62 297T53 285Q51 284 38 284Q19 284 19 294Q19 300 38 329T93 391T164 429Q171 431 389 431Q549 431 553 430Q573 423 573 402Q573 371 541 360Q535 358 472 358H408L405 341Q393 269 393 222Q393 170 402 129T421 65T431 37Q431 20 417 5T381 -10Q370 -10 363 -7T347 17T331 77Q330 86 330 121Q330 170 339 226T357 318T367 358H269L268 354Q268 351 249 275T206 114T175 17Q164 -11 132 -11Z\"></path><path id=\"MJX-3370-TEX-I-1D45F\" d=\"M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z\"></path><path id=\"MJX-3370-TEX-N-32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"></path><path id=\"MJX-3370-TEX-I-210E\" d=\"M137 683Q138 683 209 688T282 694Q294 694 294 685Q294 674 258 534Q220 386 220 383Q220 381 227 388Q288 442 357 442Q411 442 444 415T478 336Q478 285 440 178T402 50Q403 36 407 31T422 26Q450 26 474 56T513 138Q516 149 519 151T535 153Q555 153 555 145Q555 144 551 130Q535 71 500 33Q466 -10 419 -10H414Q367 -10 346 17T325 74Q325 90 361 192T398 345Q398 404 354 404H349Q266 404 205 306L198 293L164 158Q132 28 127 16Q114 -11 83 -11Q69 -11 59 -2T48 16Q48 30 121 320L195 616Q195 629 188 632T149 637H128Q122 643 122 645T124 664Q129 683 137 683Z\"></path></defs><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><use xlink:href=\"#MJX-3370-TEX-I-1D70B\"></use></g><g data-mml-node=\"msup\" transform=\"translate(570, 0)\"><g data-mml-node=\"mi\"><use xlink:href=\"#MJX-3370-TEX-I-1D45F\"></use></g><g data-mml-node=\"mn\" transform=\"translate(451, 363) scale(0.707)\"><use xlink:href=\"#MJX-3370-TEX-N-32\"></use></g></g><g data-mml-node=\"mi\" transform=\"translate(1424.6, 0)\"><use xlink:href=\"#MJX-3370-TEX-I-210E\"></use></g></g></g></svg>:</span></p><pre julia-executable=\"julia-executable\">H = [1, 2, 3]\nR = [0.8, 1.0, 1.2]\n[pi*r*r*h for (h,r) in zip(H,R)]</pre><p><button class=\"next-step\">Continue</button></p></x-step>","goals":["next-0"],"keywords":[]},"step-120":{"id":"step-120","title":"Step  ","html":"<x-step id=\"step-120\" goals=\"quill\"><div class=\"exercise\"> <p><strong>Exercise</strong><br>Write a function which takes a matrix <code class=\"language-julia\">M</code> and an index <code class=\"language-julia\">i</code> and returns the $i$th column of <span class=\"nowrap\"><code class=\"language-julia\">M</code>.</span> Assume that <code class=\"language-julia\">M</code> is represented as an array of arrays, where each array represents a row.</p></div> <pre julia-executable=\"julia-executable\">function select_col(M, i)\n    # add code\nend\n\nusing Test\n@test select_col([[1,2],[3,4]],1) == [1,3]\n@test select_col([[7,8],[8,-2],[3,4]],2) == [8,-2,4]\n</pre><x-quill goal=\"quill\"></x-quill></x-step>","goals":["quill"],"keywords":[]},"step-121":{"id":"step-121","title":"Step  ","html":"<x-step id=\"step-121\" goals=\"next-0\"><p><em>Solution.</em> We use an array comprehension to select the appropriate entry from each row.</p><pre julia-executable=\"julia-executable\">function select_col(M, i)\n    [row[i] for row in M]\nend</pre><p><button class=\"next-step\">Continue</button></p></x-step>","goals":["next-0"],"keywords":[]},"step-122":{"id":"step-122","title":"Step  ","html":"<x-step id=\"step-122\" goals=\"quill\"><div class=\"exercise\"> <p><strong>Exercise</strong><br>Write a function which reverses the words in a sentence. For simplicity, you may assume that the sentence does not contain punctuation.</p><p><em>Hint</em>: The functions <code class=\"language-julia\">join</code> and <code class=\"language-julia\">split</code> might be helpful.</p></div> <pre julia-executable=\"julia-executable\">function reverse_words(sentence)\n    # add code\nend\n\nusing Test\n@test reverse_words(\"The quick brown fox\") == \"fox brown quick The\"\n@test reverse_words(\"\") == \"\"\n</pre><x-quill goal=\"quill\"></x-quill></x-step>","goals":["quill"],"keywords":[]},"step-123":{"id":"step-123","title":"Step  ","html":"<x-step id=\"step-123\" goals=\"\"><p><em>Solution.</em> We use the string method <span class=\"nowrap\"><code class=\"language-julia\">split</code>,</span> which splits a string on a given character. This gives us a list of the words in the sentence, which we can reverse by indexing with a negative step and rejoin with the <code class=\"language-julia\">join</code> method.</p><pre julia-executable=\"julia-executable\">function reverse_words(sentence)\n    join(split(sentence,\" \")[end:-1:1],\" \")\nend</pre></x-step>","goals":[],"keywords":[]},"sets-and-dictionaries":{"id":"sets-and-dictionaries","title":"Sets And Dictionaries","html":"<x-step id=\"sets-and-dictionaries\" goals=\"quill\"><h2>Sets</h2><p><strong>Sets</strong> are unordered collections of unique values. The main advantage of having a special type for sets is that the design of the data structure can be optimized for membership checking. Figuring out whether a given value is in an array requires going through each element in the array, so the amount of time it takes increases with the length of the array. By contrast, checking membership in a set can be done very quickly even if the set is large.</p><pre julia-executable=\"julia-executable\">A = [1,2,3]\nS = Set(A)\n2 in S # evaluates to true\npop!(S, 2) # removes 2\npush!(S, 11) # puts 11 in the set\n2 in S # evaluates to false now</pre><div class=\"exercise\"> <p><strong>Exercise</strong><br>Make a set which contains the first 10,000 prime numbers.</p><p><em>Hint</em>: It suffices to look for primes among the first 110,000 integers. Compare how long it takes to check whether a given number is in that set to the time it takes to compute whether the number is prime using <span class=\"nowrap\"><code class=\"language-julia\">Primes.isprime</code>.</span></p></div> <pre julia-executable=\"julia-executable\">using Primes: isprime\nprimes = # add code here\nprimes_set = Set(primes)\n@time 98779 in primes\n@time 98779 in primes_set\n@time isprime(98779)</pre><x-quill goal=\"quill\"></x-quill></x-step>","goals":["quill"],"keywords":[]},"step-124":{"id":"step-124","title":"Step  ","html":"<x-step id=\"step-124\" goals=\"sortable-0\"><p><em>Solution.</em> To get exactly 10,000 primes, we index the list obtained by filtering out the composite numbers:</p><pre julia-executable=\"julia-executable\">using Primes: isprime\nprimes = [k for k in 2:110_000 if isprime(k)][1:10000]\nprimes_set = Set(primes)\n@time 98779 in primes\n@time 98779 in primes_set\n@time isprime(98779)</pre><p>Put the three methods in order from fastest to slowest:</p><x-sortable goal=\"sortable-0\"><div class=\"item\" data-index=\"2\">List membership checking</div><div class=\"item\" data-index=\"0\">Set membership checking</div><div class=\"item\" data-index=\"1\">Computing from scratch</div></x-sortable></x-step>","goals":["sortable-0"],"keywords":[]},"step-125":{"id":"step-125","title":"Step  ","html":"<x-step id=\"step-125\" goals=\"blank-0 blank-1\"><h2>Dictionaries</h2><p>The internal mechanism that sets use to check membership extremely fast is also useful when the information you want to retrieve is more complex than just <code class=\"language-julia\">true</code> or <span class=\"nowrap\"><code class=\"language-julia\">false</code>.</span></p><p>For example, suppose you want to store a collection of color names together with the <a href=\"https://en.wikipedia.org/wiki/RGB_color_model\" target=\"_blank\">RGB values</a> for each one. We'll store the names as <x-blank-mc goal=\"blank-0\"><button class=\"choice\">strings</button><button class=\"choice\">floats</button><button class=\"choice\">integers</button></x-blank-mc> and the RGB triples as <span class=\"nowrap\"><x-blank-mc goal=\"blank-1\"><button class=\"choice\">tuples</button><button class=\"choice\">strings</button><button class=\"choice\">floats</button></x-blank-mc>.</span></p></x-step>","goals":["blank-0","blank-1"],"keywords":[]},"step-126":{"id":"step-126","title":"Step  ","html":"<x-step id=\"step-126\" goals=\"blank-0\"><p>It's possible to do this by putting the names in an array and the values in a list of the same length:</p><pre class=\"language-julia\"><code>names = [\"fuchsia\", \"firebrick\", \"goldenrod\"]\nrgbs = [(256, 0, 256), (178, 34, 34), (218, 165, 32)]</code></pre><p>However, this solution gets very tedious quickly. For example, modifying this structure requires <span class=\"nowrap\"><x-blank-mc goal=\"blank-0\"><button class=\"choice\">modifying both arrays</button><button class=\"choice\">modifying at least one of the arrays</button></x-blank-mc>.</span></p></x-step>","goals":["blank-0"],"keywords":[]},"step-127":{"id":"step-127","title":"Step  ","html":"<x-step id=\"step-127\" goals=\"next-0\"><p>The Julia data structure tailored to the problem of encoding a map from one finite set to another is called a <strong>dictionary</strong>. Dictionaries are created by supplying pairs to the <code class=\"language-julia\">Dict</code> function. For example, the dictionary encoding the map described above looks like this:</p><pre julia-executable=\"julia-executable\">rgb = Dict(\n  \"fuchsia\" =&gt; (256, 0, 256),\n  \"firebrick\" =&gt; (178, 34, 34),\n  \"goldenrod\" =&gt; (218, 165, 32)\n)</pre><p>The domain elements <span class=\"nowrap\"><code class=\"language-julia\">\"fuchsia\"</code>,</span> <code class=\"language-julia\">\"firebrick\"</code> and <code class=\"language-julia\">\"goldenrod\"</code> are called the <strong>keys</strong> of the dictionary, and the codomain elements <span class=\"nowrap\"><code class=\"language-julia\">(256,0,256)</code>,</span> <span class=\"nowrap\"><code class=\"language-julia\">(178,34,34)</code>,</span> and <code class=\"language-julia\">(218,165,32)</code> are called the <strong>values</strong>.</p><p>We can also form new dictionaries from lists of pairs using the <code class=\"language-julia\">dict</code> function:</p><pre class=\"language-julia\"><code>Dict([\n  (\"fuchsia\", (256, 0, 256)),\n  (\"firebrick\", (178, 34, 34)),\n  (\"goldenrod\", (218, 165, 32))\n])</code></pre><p><button class=\"next-step\">Continue</button></p></x-step>","goals":["next-0"],"keywords":[]},"step-128":{"id":"step-128","title":"Step  ","html":"<x-step id=\"step-128\" goals=\"next-0\"><p>We can perform a dictionary lookup using indexing <span class=\"nowrap\"><x-gloss xid=\"syntax\">syntax</x-gloss>:</span> <code class=\"language-julia\">rgb[\"fuchsia\"]</code> returns <span class=\"nowrap\"><code class=\"language-julia\">(256,0,256)</code>.</span> We can also change the value associated with a given key or introduce a new key-value pair using indexing and assignment:</p><pre julia-executable=\"julia-executable\">rgb = Dict(\n  \"fuchsia\" =&gt; (256, 0, 256),\n  \"firebrick\" =&gt; (178, 34, 34),\n  \"goldenrod\" =&gt; (218, 165, 32)\n)\nrgb[\"crimson\"] = (220, 20, 60)\nrgb</pre><p><code class=\"language-julia\">keys</code> and <code class=\"language-julia\">values</code> functions may be used to obtain the keys and values.</p><pre julia-executable=\"julia-executable\">rgb = Dict(\n  \"fuchsia\" =&gt; (256, 0, 256),\n  \"firebrick\" =&gt; (178, 34, 34),\n  \"goldenrod\" =&gt; (218, 165, 32)\n)\ncollect(keys(rgb))</pre><p><button class=\"next-step\">Continue</button></p></x-step>","goals":["next-0"],"keywords":[]},"step-129":{"id":"step-129","title":"Step  ","html":"<x-step id=\"step-129\" goals=\"blank-0 blank-1 next-0 quill\"><div class=\"exercise\"> <p><strong>Exercise</strong><br>Consider a dictionary which encodes flight arrival times:</p><pre class=\"language-julia\"><code>import Dates\narrival_times = Dict(\n  \"JetBlue 924\" =&gt; Dates.Time(7,9),\n  \"United 1282\" =&gt; Dates.Time(7,42),\n  \"Southwest 196\" =&gt; Dates.Time(7,3)\n)</code></pre><p>You can most easily use this dictionary to <span class=\"nowrap\"><x-blank-mc goal=\"blank-0\"><button class=\"choice\">look up the arrival time of a flight</button><button class=\"choice\">look up which flights arrive at a given time</button></x-blank-mc>.</span></p><p>Suppose you want to reverse the lookup direction: for any given time, you want to see which flight arrives at that time. One problem is that <span class=\"nowrap\"><x-blank-mc goal=\"blank-1\"><button class=\"choice\">multiple flights may arrive at the same time</button><button class=\"choice\">the airlines aren't the same</button></x-blank-mc>.</span></p><p>Assuming that the codomain values are distinct, however, you can form a new dictionary that allows you to look up keys for values by using an array comprehension that iterates over the key-value pairs of the dictionary (obtainable using the <code class=\"language-julia\">pairs</code> function).</p><p>Implement this idea in the block below. Check that your dictionary works by indexing it with <span class=\"nowrap\"><code class=\"language-julia\">Dates.time(7,9)</code>.</span></p></div> <pre julia-executable=\"julia-executable\">import Dates\narrival_times = Dict(\n  \"JetBlue 924\" =&gt; Dates.Time(7,9),\n  \"United 1282\" =&gt; Dates.Time(7,42),\n  \"Southwest 196\" =&gt; Dates.Time(7,3)\n)    </pre><x-quill goal=\"quill\"></x-quill><p><button class=\"next-step\"> Submit</button></p></x-step>","goals":["blank-0","blank-1","next-0","quill"],"keywords":[]},"step-130":{"id":"step-130","title":"Step  ","html":"<x-step id=\"step-130\" goals=\"next-0\"><p><em>Solution.</em> We use the <code class=\"language-julia\">Dict</code> function to convert the list of pairs back into a dictionary: <span class=\"nowrap\"><code class=\"language-julia\">Dict([(b,a) for (a,b) in pairs(arrival_times)])</code>.</span></p><p><button class=\"next-step\">Continue</button></p></x-step>","goals":["next-0"],"keywords":[]},"step-131":{"id":"step-131","title":"Step  ","html":"<x-step id=\"step-131\" goals=\"quill\"><h2>Exercises</h2><div class=\"exercise\"> <p><strong>Exercise</strong><br>You can construct dictionaries using a comprehension in Julia. For example, here's a dictionary that maps each one-digit positive integer to its square:</p><pre class=\"language-julia\"><code>square_dict = Dict(k =&gt; k*k for k in 1:9)</code></pre><p>Use a dictionary comprehension to make a dictionary which maps each of the first 100 powers of 2 to its units digit. Note: you'll need to use <code class=\"language-julia\">big(2)</code> instead of <code class=\"language-julia\">2</code> to calculate its 100th power, because <svg style=\"vertical-align: 0\" width=\"3.644ex\" height=\"1.887ex\" class=\"mathjax\" viewBox=\"0 -833.9 1610.7 833.9\"><title>2^{100}</title><defs><path id=\"MJX-170-TEX-N-32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"></path><path id=\"MJX-170-TEX-N-31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path><path id=\"MJX-170-TEX-N-30\" d=\"M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z\"></path></defs><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\"><g data-mml-node=\"math\"><g data-mml-node=\"msup\"><g data-mml-node=\"mn\"><use xlink:href=\"#MJX-170-TEX-N-32\"></use></g><g data-mml-node=\"TeXAtom\" transform=\"translate(500, 363) scale(0.707)\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"mn\"><use xlink:href=\"#MJX-170-TEX-N-31\"></use><use xlink:href=\"#MJX-170-TEX-N-30\" transform=\"translate(500, 0)\"></use><use xlink:href=\"#MJX-170-TEX-N-30\" transform=\"translate(1000, 0)\"></use></g></g></g></g></g></svg> is larger than the largest 64-bit integer.</p></div> <pre julia-executable=\"julia-executable\"></pre><x-quill goal=\"quill\"></x-quill></x-step>","goals":["quill"],"keywords":[]},"step-132":{"id":"step-132","title":"Step  ","html":"<x-step id=\"step-132\" goals=\"next-0\"><p><em>Solution.</em> We convert to a string, get the last character, and convert back to an integer:</p><pre julia-executable=\"julia-executable\">  Dict([big(2)^k =&gt; parse(Int64, string(big(2)^k)[end]) for k in 1:100])</pre><p><button class=\"next-step\">Continue</button></p></x-step>","goals":["next-0"],"keywords":[]},"step-133":{"id":"step-133","title":"Step  ","html":"<x-step id=\"step-133\" goals=\"blank-0 next-0\"><div class=\"exercise\"> <p><strong>Exercise</strong><br>Suppose you want to store student IDs in a part of a web application where the main thing you need to do is check whether an ID input by a student is a valid student ID (so you can flag it if it has been mistyped). Among the given options, the best data structure for this purpose would be a <span class=\"nowrap\"><x-blank-mc goal=\"blank-0\"><button class=\"choice\">set</button><button class=\"choice\">list</button><button class=\"choice\">tuple</button><button class=\"choice\">dictionary</button></x-blank-mc>.</span></p></div> <p><button class=\"next-step\">Continue</button></p></x-step>","goals":["blank-0","next-0"],"keywords":[]},"step-134":{"id":"step-134","title":"Step  ","html":"<x-step id=\"step-134\" goals=\"\"><p><em>Solution.</em> This is an ideal use case for sets. Lists and tuples will be slower for checking membership, and dictionaries aren't quite appropriate because it isn't clear what the values would be.</p></x-step>","goals":[],"keywords":[]},"iteration":{"id":"iteration","title":"Iteration","html":"<x-step id=\"iteration\" goals=\"next-0\"><p>We have already seen one way of doing something to each element in a collection: the <span class=\"nowrap\"><x-gloss xid=\"arraycomp\"><em>array comprehension</em></x-gloss>.</span></p><pre julia-executable=\"julia-executable\">smallest_factor = Dict(2 =&gt; 2, 3 =&gt; 3, 4 =&gt; 2, 5 =&gt; 5,\n                       6 =&gt; 2, 7 =&gt; 7, 8 =&gt; 2, 9 =&gt; 3)\n[v for (k,v) in pairs(smallest_factor)]</pre><p>In this array comprehension, we <strong>iterate</strong> over the pairs of the <x-gloss xid=\"dictionary-julia\">dictionary</x-gloss> to produce a new list. Although list comprehensions are very useful, they are not flexible enough to cover all our iteration needs. A much more flexible tool is the <strong>for loop</strong>.</p><p><button class=\"next-step\">Continue</button></p></x-step>","goals":["next-0"],"keywords":[]},"step-135":{"id":"step-135","title":"Step  ","html":"<x-step id=\"step-135\" goals=\"next-0\"><h2><em>For</em> statements</h2><p>The code above could also be rewritten as follows:</p><pre julia-executable=\"julia-executable\">smallest_factor = Dict(2 =&gt; 2, 3 =&gt; 3, 4 =&gt; 2, 5 =&gt; 5,\n                       6 =&gt; 2, 7 =&gt; 7, 8 =&gt; 2, 9 =&gt; 3)\nA = []\nfor (k,v) in pairs(smallest_factor)\n    push!(A,v)\nend\nA</pre><p>The statement <code class=\"language-julia\">for item in collection:</code> works as follows: the first element of <code class=\"language-julia\">collection</code> is assigned to <span class=\"nowrap\"><code class=\"language-julia\">item</code>,</span> and the block indented below the <code class=\"language-julia\">for</code> statement is executed. Then, the second element of <code class=\"language-julia\">collection</code> is assigned to <span class=\"nowrap\"><code class=\"language-julia\">item</code>,</span> the indented block is executed again, etc., until the end of the collection is reached.</p><p><button class=\"next-step\">Continue</button></p></x-step>","goals":["next-0"],"keywords":[]},"step-136":{"id":"step-136","title":"Step  ","html":"<x-step id=\"step-136\" goals=\"next-0\"><p>We can nest <code class=\"language-julia\">for</code> statements. For example, suppose we have a matrix represented as an array of arrays, and we want to sum all of the matrix entries. We can do that by iterating over the rows and then iterating over each row:</p><pre julia-executable=\"julia-executable\">\"\"\"\nReturn the sum of the entries of M\n\"\"\"\nfunction sum_matrix_entries(M)\n    s = 0\n    for row in M\n        for entry in row\n            s = s + entry\n        end\n    end\n    s\nend\n\nusing Test\nM = [[1,2,3],[4,5,6],[7,8,9]]\n@test sum_matrix_entries(M) == 45</pre><p><button class=\"next-step\">Continue</button></p></x-step>","goals":["next-0"],"keywords":[]},"step-137":{"id":"step-137","title":"Step  ","html":"<x-step id=\"step-137\" goals=\"quill\"><div class=\"exercise\"> <p><strong>Exercise</strong><br>Suppose you have imported a function <code class=\"language-julia\">file_bug_report</code> with two parameters: <code class=\"language-julia\">id</code> and <span class=\"nowrap\"><code class=\"language-julia\">description</code>.</span> Suppose also that you have a <code class=\"language-julia\">Dict</code> called <code class=\"language-julia\">bugs</code> whose keys are ids and whose values are strings representing descriptions. Write a loop which performs the action of filing each bug report in the dictionary. </p></div> <pre julia-executable=\"julia-executable\">\"A dummy function which represents filing a bug report\"\nfunction file_bug_report(id, description)\n    println(\"bug $id ($description) successfully filed\")\nend\n\n\nbugs = Dict(\n  \"07cc242a\" =&gt;\n     \"`trackShipment` hangs if `trackingNumber` is missing\",\n  \"100b359a\" =&gt;\n     \"customers not receiving text alerts\"\n)</pre><x-quill goal=\"quill\"></x-quill></x-step>","goals":["quill"],"keywords":[]},"step-137a":{"id":"step-137a","title":"Step 137a","html":"<x-step id=\"step-137a\" goals=\"next-0\"><p><em>Solution.</em> We loop over the pairs of the dictionary:</p><pre julia-executable=\"julia-executable\">for (id, desc) in pairs(bugs)\n    file_bug_report(id, desc)\nend</pre><p><button class=\"next-step\">Continue</button></p></x-step>","goals":["next-0"],"keywords":[]},"step-138":{"id":"step-138","title":"Step  ","html":"<x-step id=\"step-138\" goals=\"quill\"><div class=\"exercise\"> <p><strong>Exercise</strong><br>Write a <x-gloss xid=\"function-julia\">function</x-gloss> called <code class=\"language-julia\">sumorial</code> which takes a positive integer <code class=\"language-julia\">n</code> as an argument and sums of the integers 1 to <code class=\"language-julia\">n</code> using a loop.</p></div> <pre julia-executable=\"julia-executable\">\"Return the sumorial of a positive integer n\"\nfunction sumorial(n)\n    # add code here\nend\n\nusing Test\n@test sumorial(3) == 6\n@test sumorial(8) == 36\n@test sumorial(200) == 20100</pre><x-quill goal=\"quill\"></x-quill></x-step>","goals":["quill"],"keywords":[]},"step-139":{"id":"step-139","title":"Step  ","html":"<x-step id=\"step-139\" goals=\"next-0\"><p><em>Solution.</em> We loop through <code class=\"language-julia\">1:n</code> and add as we go.</p><pre julia-executable=\"julia-executable\">function sumorial(n)\n    total = 0\n    for k in 1:n\n        total = total + k\n    end\n    total\nend\n\nusing Test\n@test sumorial(3) == 6\n@test sumorial(8) == 36\n@test sumorial(200) == 20100     </pre><p><button class=\"next-step\">Continue</button></p></x-step>","goals":["next-0"],"keywords":[]},"step-140":{"id":"step-140","title":"Step  ","html":"<x-step id=\"step-140\" goals=\"quill\"><h2><em>While</em> statements</h2><p>The <strong>Collatz conjecture</strong> is one of the easiest-to-state unsolved problems in mathematics. Starting from any given positive integer, we halve it if it's even and triple it and add one if it's odd. The Collatz conjecture states that repeatedly applying this rule always gets us to the number 1 eventually. For example, the <em>Collatz sequence</em> starting from 17 is</p><center><p>17, 52, 26, 13, 40, 20, 10, 5, 16, 8, 4, 2, 1</p></center><p>If we want to write a Julia function which returns the Collatz sequence for any given starting number, we face a problem: we don't know from the start how many steps it will take to reach 1, so it isn't clear how we could use a <em>for loop</em>. What we want to do is execute a block of code until a given condition is met. Julia provides the <code class=\"language-julia\">while</code> loop for this purpose.</p><pre julia-executable=\"julia-executable\">\"Return the Collatz sequence starting from n\"\nfunction collatz_sequence(n)\n    sequence = [n]\n    while n &gt; 1\n        if n % 2 == 0\n            n = n ÷ 2\n        else\n            n = 3n + 1\n        end\n        push!(sequence,n)\n    end\n    sequence\nend\n\nusing Test\n@test collatz_sequence(17) == [17, 52, 26, 13,\n                                40, 20, 10, 5,\n                                16, 8, 4, 2, 1]</pre><p>The expression which appears immediately following the <code class=\"language-julia\">while</code> keyword is called the <strong>condition</strong>, and the block indented below the <code class=\"language-julia\">while</code> statement is the <strong>body</strong> of the loop. The rules of the language stipulate the following execution sequence for a <code class=\"language-julia\">while</code> statement: the condition is evaluated, and if it's true, then the body is executed, then condition is evaluated again, and so on. When the condition returns <span class=\"nowrap\"><code class=\"language-julia\">false</code>,</span> the loop is exited. An exit can also be forced from within the body of the while loop with the keyword <span class=\"nowrap\"><code class=\"language-julia\">break</code>.</span></p><div class=\"exercise\"> <p><strong>Exercise</strong><br>Newton's algorithm for finding the square root of a number <code class=\"language-julia\">n</code> starts from 1 and repeatedly applies the function <span class=\"nowrap\"><svg style=\"vertical-align: -0.781ex\" width=\"16.212ex\" height=\"2.737ex\" class=\"mathjax\" viewBox=\"0 -864.9 7165.6 1209.9\"><title>x\\mapsto \\frac{1}{2}(x + n/x)</title><defs><path id=\"MJX-3371-TEX-I-1D465\" d=\"M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z\"></path><path id=\"MJX-3371-TEX-N-21A6\" d=\"M95 155V109Q95 83 92 73T75 63Q61 63 58 74T54 130Q54 140 54 180T55 250Q55 421 57 425Q61 437 75 437Q88 437 91 428T95 393V345V270H835Q719 357 692 493Q692 494 692 496T691 499Q691 511 708 511H711Q720 511 723 510T729 506T732 497T735 481T743 456Q765 389 816 336T935 261Q944 258 944 250Q944 244 939 241T915 231T877 212Q836 186 806 152T761 85T740 35T732 4Q730 -6 727 -8T711 -11Q691 -11 691 0Q691 7 696 25Q728 151 835 230H95V155Z\"></path><path id=\"MJX-3371-TEX-N-31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path><path id=\"MJX-3371-TEX-N-32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"></path><path id=\"MJX-3371-TEX-N-28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"></path><path id=\"MJX-3371-TEX-N-2B\" d=\"M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z\"></path><path id=\"MJX-3371-TEX-I-1D45B\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"></path><path id=\"MJX-3371-TEX-N-2F\" d=\"M423 750Q432 750 438 744T444 730Q444 725 271 248T92 -240Q85 -250 75 -250Q68 -250 62 -245T56 -231Q56 -221 230 257T407 740Q411 750 423 750Z\"></path><path id=\"MJX-3371-TEX-N-29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"></path></defs><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><use xlink:href=\"#MJX-3371-TEX-I-1D465\"></use></g><g data-mml-node=\"mo\" transform=\"translate(849.8, 0)\"><use xlink:href=\"#MJX-3371-TEX-N-21A6\"></use></g><g data-mml-node=\"mfrac\" transform=\"translate(2127.6, 0)\"><g data-mml-node=\"mn\" transform=\"translate(220, 394) scale(0.707)\"><use xlink:href=\"#MJX-3371-TEX-N-31\"></use></g><g data-mml-node=\"mn\" transform=\"translate(220, -345) scale(0.707)\"><use xlink:href=\"#MJX-3371-TEX-N-32\"></use></g><rect width=\"553.6\" height=\"60\" x=\"120\" y=\"220\"></rect></g><g data-mml-node=\"mo\" transform=\"translate(2921.1, 0)\"><use xlink:href=\"#MJX-3371-TEX-N-28\"></use></g><g data-mml-node=\"mi\" transform=\"translate(3310.1, 0)\"><use xlink:href=\"#MJX-3371-TEX-I-1D465\"></use></g><g data-mml-node=\"mo\" transform=\"translate(4104.3, 0)\"><use xlink:href=\"#MJX-3371-TEX-N-2B\"></use></g><g data-mml-node=\"mi\" transform=\"translate(5104.6, 0)\"><use xlink:href=\"#MJX-3371-TEX-I-1D45B\"></use></g><g data-mml-node=\"TeXAtom\" data-mjx-texclass=\"ORD\" transform=\"translate(5704.6, 0)\"><g data-mml-node=\"mo\"><use xlink:href=\"#MJX-3371-TEX-N-2F\"></use></g></g><g data-mml-node=\"mi\" transform=\"translate(6204.6, 0)\"><use xlink:href=\"#MJX-3371-TEX-I-1D465\"></use></g><g data-mml-node=\"mo\" transform=\"translate(6776.6, 0)\"><use xlink:href=\"#MJX-3371-TEX-N-29\"></use></g></g></g></svg>.</span> For example, applying this algorithm to approximate <span class=\"nowrap\"><svg style=\"vertical-align: -0.225ex\" width=\"3.061ex\" height=\"2.398ex\" class=\"mathjax\" viewBox=\"0 -960.5 1353 1060\"><title>\\sqrt{2}</title><defs><path id=\"MJX-200-TEX-N-221A\" d=\"M95 178Q89 178 81 186T72 200T103 230T169 280T207 309Q209 311 212 311H213Q219 311 227 294T281 177Q300 134 312 108L397 -77Q398 -77 501 136T707 565T814 786Q820 800 834 800Q841 800 846 794T853 782V776L620 293L385 -193Q381 -200 366 -200Q357 -200 354 -197Q352 -195 256 15L160 225L144 214Q129 202 113 190T95 178Z\"></path><path id=\"MJX-200-TEX-N-32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"></path></defs><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\"><g data-mml-node=\"math\"><g data-mml-node=\"msqrt\"><g transform=\"translate(853, 0)\"><g data-mml-node=\"mn\"><use xlink:href=\"#MJX-200-TEX-N-32\"></use></g></g><g data-mml-node=\"mo\" transform=\"translate(0, 100.5)\"><use xlink:href=\"#MJX-200-TEX-N-221A\"></use></g><rect width=\"500\" height=\"60\" x=\"853\" y=\"840.5\"></rect></g></g></g></svg>,</span> we get</p><center><p>1, 3/2, 17/12, 577/408, ...</p></center><p>This algorithm converges very fast: 577/408 approximates <svg style=\"vertical-align: -0.225ex\" width=\"3.061ex\" height=\"2.398ex\" class=\"mathjax\" viewBox=\"0 -960.5 1353 1060\"><title>\\sqrt{2}</title><defs><path id=\"MJX-200-TEX-N-221A\" d=\"M95 178Q89 178 81 186T72 200T103 230T169 280T207 309Q209 311 212 311H213Q219 311 227 294T281 177Q300 134 312 108L397 -77Q398 -77 501 136T707 565T814 786Q820 800 834 800Q841 800 846 794T853 782V776L620 293L385 -193Q381 -200 366 -200Q357 -200 354 -197Q352 -195 256 15L160 225L144 214Q129 202 113 190T95 178Z\"></path><path id=\"MJX-200-TEX-N-32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"></path></defs><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\"><g data-mml-node=\"math\"><g data-mml-node=\"msqrt\"><g transform=\"translate(853, 0)\"><g data-mml-node=\"mn\"><use xlink:href=\"#MJX-200-TEX-N-32\"></use></g></g><g data-mml-node=\"mo\" transform=\"translate(0, 100.5)\"><use xlink:href=\"#MJX-200-TEX-N-221A\"></use></g><rect width=\"500\" height=\"60\" x=\"853\" y=\"840.5\"></rect></g></g></g></svg> with a relative error of about 0.00015%.</p><p>Write a function <code class=\"language-julia\">newtonsqrt</code> which takes as an argument the value <code class=\"language-julia\">n</code> to square root and applies Newton's algorithm until the relative difference between consecutive iterates drops below <span class=\"nowrap\"><svg style=\"vertical-align: -0.05ex\" width=\"4.42ex\" height=\"2.005ex\" class=\"mathjax\" viewBox=\"0 -864 1953.7 886\"><title>10^{-8}</title><defs><path id=\"MJX-3373-TEX-N-31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path><path id=\"MJX-3373-TEX-N-30\" d=\"M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z\"></path><path id=\"MJX-3373-TEX-N-2212\" d=\"M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z\"></path><path id=\"MJX-3373-TEX-N-38\" d=\"M70 417T70 494T124 618T248 666Q319 666 374 624T429 515Q429 485 418 459T392 417T361 389T335 371T324 363L338 354Q352 344 366 334T382 323Q457 264 457 174Q457 95 399 37T249 -22Q159 -22 101 29T43 155Q43 263 172 335L154 348Q133 361 127 368Q70 417 70 494ZM286 386L292 390Q298 394 301 396T311 403T323 413T334 425T345 438T355 454T364 471T369 491T371 513Q371 556 342 586T275 624Q268 625 242 625Q201 625 165 599T128 534Q128 511 141 492T167 463T217 431Q224 426 228 424L286 386ZM250 21Q308 21 350 55T392 137Q392 154 387 169T375 194T353 216T330 234T301 253T274 270Q260 279 244 289T218 306L210 311Q204 311 181 294T133 239T107 157Q107 98 150 60T250 21Z\"></path></defs><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\"><g data-mml-node=\"math\"><g data-mml-node=\"msup\"><g data-mml-node=\"mn\"><use xlink:href=\"#MJX-3373-TEX-N-31\"></use><use xlink:href=\"#MJX-3373-TEX-N-30\" transform=\"translate(500, 0)\"></use></g><g data-mml-node=\"TeXAtom\" transform=\"translate(1000, 393.1) scale(0.707)\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"mo\"><use xlink:href=\"#MJX-3373-TEX-N-2212\"></use></g><g data-mml-node=\"mn\" transform=\"translate(778, 0)\"><use xlink:href=\"#MJX-3373-TEX-N-38\"></use></g></g></g></g></g></svg>.</span></p><p>Note that <svg style=\"vertical-align: -0.05ex\" width=\"4.42ex\" height=\"2.005ex\" class=\"mathjax\" viewBox=\"0 -864 1953.7 886\"><title>10^{-8}</title><defs><path id=\"MJX-3373-TEX-N-31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path><path id=\"MJX-3373-TEX-N-30\" d=\"M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z\"></path><path id=\"MJX-3373-TEX-N-2212\" d=\"M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z\"></path><path id=\"MJX-3373-TEX-N-38\" d=\"M70 417T70 494T124 618T248 666Q319 666 374 624T429 515Q429 485 418 459T392 417T361 389T335 371T324 363L338 354Q352 344 366 334T382 323Q457 264 457 174Q457 95 399 37T249 -22Q159 -22 101 29T43 155Q43 263 172 335L154 348Q133 361 127 368Q70 417 70 494ZM286 386L292 390Q298 394 301 396T311 403T323 413T334 425T345 438T355 454T364 471T369 491T371 513Q371 556 342 586T275 624Q268 625 242 625Q201 625 165 599T128 534Q128 511 141 492T167 463T217 431Q224 426 228 424L286 386ZM250 21Q308 21 350 55T392 137Q392 154 387 169T375 194T353 216T330 234T301 253T274 270Q260 279 244 289T218 306L210 311Q204 311 181 294T133 239T107 157Q107 98 150 60T250 21Z\"></path></defs><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\"><g data-mml-node=\"math\"><g data-mml-node=\"msup\"><g data-mml-node=\"mn\"><use xlink:href=\"#MJX-3373-TEX-N-31\"></use><use xlink:href=\"#MJX-3373-TEX-N-30\" transform=\"translate(500, 0)\"></use></g><g data-mml-node=\"TeXAtom\" transform=\"translate(1000, 393.1) scale(0.707)\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"mo\"><use xlink:href=\"#MJX-3373-TEX-N-2212\"></use></g><g data-mml-node=\"mn\" transform=\"translate(778, 0)\"><use xlink:href=\"#MJX-3373-TEX-N-38\"></use></g></g></g></g></g></svg> can be represented in Julia using scientific notation <span class=\"nowrap\"><code class=\"language-julia\">1e-8</code>.</span></p></div> <pre julia-executable=\"julia-executable\">function newtonsqrt(n)\n    \"\"\"Use Newton's algorithm to approximate √n\"\"\"\n    # add code here\nend\n\nusing Test\n@test abs(newtonsqrt(2) - 1.4142135623730951) &lt; 1e-6\n@test abs(newtonsqrt(9) - 3) &lt; 1e-6\n</pre><x-quill goal=\"quill\"></x-quill></x-step>","goals":["quill"],"keywords":[]},"step-141":{"id":"step-141","title":"Step  ","html":"<x-step id=\"step-141\" goals=\"next-0\"><p><em>Solution.</em> We keep up with two separate variables, which we call <code class=\"language-julia\">x</code> and <span class=\"nowrap\"><code class=\"language-julia\">old_x</code>,</span> to compare the most recent two iterates:</p><pre julia-executable=\"julia-executable\">\"\"\"Use Newton's algorithm to approximate √n\"\"\"\nfunction newtonsqrt(n)\n    x = 1\n    while true\n        old_x = x\n        x = 1/2 * (x + n/x)\n        if abs(x - old_x)/old_x &lt; 1e-8\n            return x\n        end\n    end\nend</pre><p><button class=\"next-step\">Continue</button></p></x-step>","goals":["next-0"],"keywords":[]},"step-142":{"id":"step-142","title":"Step  ","html":"<x-step id=\"step-142\" goals=\"quill\"><h2>Exercises</h2><div class=\"exercise\"> <p><strong>Exercise</strong><br>Write a function which prints an <svg style=\"vertical-align: -0.025ex\" width=\"5.481ex\" height=\"1.136ex\" class=\"mathjax\" viewBox=\"0 -491 2422.4 502\"><title>n \\times n</title><defs><path id=\"MJX-1834-TEX-I-1D45B\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"></path><path id=\"MJX-1834-TEX-N-D7\" d=\"M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z\"></path></defs><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><use xlink:href=\"#MJX-1834-TEX-I-1D45B\"></use></g><g data-mml-node=\"mo\" transform=\"translate(822.2, 0)\"><use xlink:href=\"#MJX-1834-TEX-N-D7\"></use></g><g data-mml-node=\"mi\" transform=\"translate(1822.4, 0)\"><use xlink:href=\"#MJX-1834-TEX-I-1D45B\"></use></g></g></g></svg> checkerboard pattern of <code class=\"language-julia\">x</code>'s and <code class=\"language-julia\">o</code>'s.</p><p><em>Note</em>: <code class=\"language-julia\">\\n</code> in a string literal represents the \"newline\" character. You'll need to print this character after each row you've printed.</p></div> <pre julia-executable=\"julia-executable\">\"\"\"\nPrints an n × n checkerboard, like:\n  \nxoxo\noxox\nxoxo\noxox\n\"\"\"    \nfunction checkerboard(n)\n    # add code here\nend</pre><x-quill goal=\"quill\"></x-quill></x-step>","goals":["quill"],"keywords":[]},"step-143":{"id":"step-143","title":"Step  ","html":"<x-step id=\"step-143\" goals=\"next-0\"><p><em>Solution.</em> We loop through the rows and use an <code class=\"language-julia\">if</code> statement to print a different output depending on whether the row is even-numbered or odd-numbered.</p><pre julia-executable=\"julia-executable\">\"Prints an n × n checkerboard\"\nfunction checkerboard(n)\n    for i in 1:n\n        if iseven(i)\n            print(\"xo\" ^ (n÷2))\n        else\n            print(\"ox\" ^ (n÷2))\n        end\n        print(\"\\n\")\n    end\nend</pre><p><button class=\"next-step\">Continue</button></p></x-step>","goals":["next-0"],"keywords":[]},"step-pascal-exercise":{"id":"step-pascal-exercise","title":"Step Pascal Exercise","html":"<x-step id=\"step-pascal-exercise\" goals=\"quill\"><div class=\"exercise\"> <p><strong>Exercise</strong><br>Write a function which prints <a href=\"https://en.wikipedia.org/wiki/Pascal%27s_triangle\" target=\"_blank\">Pascal's triangle</a> up to the $n$th row, where the top row counts as row zero. You might want to use a helper function <code class=\"language-julia\">print_row(n,row)</code> to manage the responsibility of printing each row, as well as a helper function <code class=\"language-julia\">next_row(row)</code> to calculate each row from the previous one.</p><p>Example output, for <span class=\"nowrap\"><code class=\"language-julia\">n = 4</code>:</span></p><pre class=\"language-md\"><code>        1\n      1   1\n    1   2   1\n  1   3   3   1\n1   4   6   4   1</code></pre><p><em>Note</em>: there's no solution to this one, but you can do it on your own!</p></div> <pre julia-executable=\"julia-executable\">\"\"\"\nPrints the nth row (`row`) of Pascal's triangle\nwith appropriate spacing.\n\"\"\"\nfunction print_row(n,row)\n    # add code here\nend\n    \n\"\"\"\nReturns the next row in Pascal's triangle.\nExample: next_row([1,3,3,1]) == [1,4,6,4,1]\n\"\"\"\nfunction next_row(row)\n    # add code here\nend\n\n\"\"\"\nPrint the first n rows of Pascal's triangle\n\"\"\"\nfunction pascals_triangle(n)\n    # add code here\nend    </pre><x-quill goal=\"quill\"></x-quill></x-step>","goals":["quill"],"keywords":[]},"multidimensional-arrays":{"id":"multidimensional-arrays","title":"Multidimensional Arrays","html":"<x-step id=\"multidimensional-arrays\" goals=\"next-0\"><p>We've seen a couple exercises that involve dealing with matrices as an array of arrays. This gets quite tedious if you have to deal with matrices often, because many common tasks require custom methods with this approach (for example, simply selecting a column).</p><p><button class=\"next-step\">Continue</button></p></x-step>","goals":["next-0"],"keywords":[]},"step-multidim":{"id":"step-multidim","title":"Step Multidim","html":"<x-step id=\"step-multidim\" goals=\"blank-0 next-0\"><p>Since multidimensional arrays are very common in scientific computing, Julia has a built-in multidimensional array type. In other words, Julia arrays can be arranged in a rectangle or a cube, etc. The syntax for inputting a rectangular array involves separating rows with semicolons and row elements with spaces: <span class=\"nowrap\"><code class=\"language-julia\">A = [1 2 3; 4 5 6; 7 8 9]</code>.</span> Alternatively, you can use the newline character to separate rows:</p><pre julia-executable=\"julia-executable\">A = [\n1 2 3\n4 5 6\n7 8 9\n]</pre><p>We can find the dimensions of <code class=\"language-julia\">A</code> using <span class=\"nowrap\"><code class=\"language-julia\">size(A)</code>.</span> For example, the size of the matrix <code class=\"language-julia\">A</code> defined above is <span class=\"nowrap\"><x-blank-mc goal=\"blank-0\"><button class=\"choice\">(3,3)</button><button class=\"choice\">(2,2)</button><button class=\"choice\">(2,3)</button></x-blank-mc>.</span> You can access particular dimensions with a second argument, like <code class=\"language-julia\">size(A,1)</code> or <span class=\"nowrap\"><code class=\"language-julia\">size(A,2)</code>.</span></p><p><button class=\"next-step\">Continue</button></p></x-step>","goals":["blank-0","next-0"],"keywords":[]},"step-multidimensional-index":{"id":"step-multidimensional-index","title":"Step Multidimensional Index","html":"<x-step id=\"step-multidimensional-index\" goals=\"next-0\"><p>To index a multidimensional array, we use commas to separate selectors for each dimension. For example, <code class=\"language-julia\">A[2:3,:]</code> selects the second row through the third row and all of the columns (the lone colon is short for <code class=\"language-julia\">1:end</code>).</p><p>Array comprehension syntax works with multidimensional arrays as well. Just separate the index iterators with a comma:</p><pre class=\"language-julia\"><code>julia&gt; [i^2 + j^2 for i in 1:3, j in 1:5]\n\n3×5 Array{Int64,2}:\n2   5  10  17  26\n5   8  13  20  29\n10  13  18  25  34</code></pre><p>As you can see in the first line of the above output, the type of an array prints as <code class=\"language-julia\">Array{T,d}</code> where <code class=\"language-julia\">T</code> is the type of the array's entries and <code class=\"language-julia\">d</code> is the number of dimensions.</p><p><button class=\"next-step\">Continue</button></p></x-step>","goals":["next-0"],"keywords":[]},"step-random-arrays":{"id":"step-random-arrays","title":"Step Random Arrays","html":"<x-step id=\"step-random-arrays\" goals=\"next-0\"><p>Random arrays can be generated in Julia using <code class=\"language-julia\">rand</code> (uniform in the interval <svg style=\"vertical-align: -0.566ex\" width=\"4.526ex\" height=\"2.262ex\" class=\"mathjax\" viewBox=\"0 -750 2000.7 1000\"><title>[0,1]</title><defs><path id=\"MJX-3-TEX-N-5B\" d=\"M118 -250V750H255V710H158V-210H255V-250H118Z\"></path><path id=\"MJX-3-TEX-N-30\" d=\"M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z\"></path><path id=\"MJX-3-TEX-N-2C\" d=\"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z\"></path><path id=\"MJX-3-TEX-N-31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path><path id=\"MJX-3-TEX-N-5D\" d=\"M22 710V750H159V-250H22V-210H119V710H22Z\"></path></defs><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\"><g data-mml-node=\"math\"><g data-mml-node=\"mo\"><use xlink:href=\"#MJX-3-TEX-N-5B\"></use></g><g data-mml-node=\"mn\" transform=\"translate(278, 0)\"><use xlink:href=\"#MJX-3-TEX-N-30\"></use></g><g data-mml-node=\"mo\" transform=\"translate(778, 0)\"><use xlink:href=\"#MJX-3-TEX-N-2C\"></use></g><g data-mml-node=\"mn\" transform=\"translate(1222.7, 0)\"><use xlink:href=\"#MJX-3-TEX-N-31\"></use></g><g data-mml-node=\"mo\" transform=\"translate(1722.7, 0)\"><use xlink:href=\"#MJX-3-TEX-N-5D\"></use></g></g></g></svg>) or <code class=\"language-julia\">randn</code> (standard normal distribution). These functions take an integer argument to specify the length of the output array.</p><pre julia-executable=\"julia-executable\">rand(10) # a vector of ten Unif([0,1])'s\nrandn(10) # a vector of ten standard normals\nrand([3,5,11],100) # a vector of 100 samples from the array [3,5,11]</pre><p><button class=\"next-step\">Continue</button></p></x-step>","goals":["next-0"],"keywords":[]},"step-seeding":{"id":"step-seeding","title":"Step Seeding","html":"<x-step id=\"step-seeding\" goals=\"blank-0 blank-1\"><p>The random number generator can be <em>seeded</em> to ensure it produces the same results when run repeatedly:</p><pre julia-executable=\"julia-executable\">using Random\nRandom.seed!(123)\nrand(), rand()</pre><p>The two calls to <code class=\"language-julia\">rand</code> yield <span class=\"nowrap\"><x-blank-mc goal=\"blank-0\"><button class=\"choice\">different outputs</button><button class=\"choice\">the same output</button></x-blank-mc>,</span> but if we run the whole block again, we will get <span class=\"nowrap\"><x-blank-mc goal=\"blank-1\"><button class=\"choice\">the same two numbers</button><button class=\"choice\">two different numbers</button></x-blank-mc>.</span></p></x-step>","goals":["blank-0","blank-1"],"keywords":[]},"step-multidim-array-exercise":{"id":"step-multidim-array-exercise","title":"Step Multidim Array Exercise","html":"<x-step id=\"step-multidim-array-exercise\" goals=\"\"><div class=\"exercise\"> <p><strong>Exercise</strong><br>Succinctly generate the following two-dimensional array</p><p class=\"text-center\"><svg style=\"vertical-align: -6.9ex\" width=\"17.724ex\" height=\"14.932ex\" class=\"mathjax\" viewBox=\"0 -3550 7834 6600\"><title>\\begin{align*}\\begin{bmatrix} 0 &amp; 1 &amp; 2 &amp; 3 &amp; 4 \\\\ 1 &amp; 2 &amp; 3 &amp; 4 &amp; 0 \\\\ 2 &amp; 3 &amp; 4 &amp; 0 &amp; 1 \\\\ 3 &amp; 4 &amp; 0 &amp; 1 &amp; 2 \\\\ 4 &amp; 0 &amp; 1 &amp; 2 &amp; 3 \\end{bmatrix}\\end{align*}</title><defs><path id=\"MJX-3372-TEX-S4-23A1\" d=\"M319 -645V1154H666V1070H403V-645H319Z\"></path><path id=\"MJX-3372-TEX-S4-23A3\" d=\"M319 -644V1155H403V-560H666V-644H319Z\"></path><path id=\"MJX-3372-TEX-S4-23A2\" d=\"M319 0V602H403V0H319Z\"></path><path id=\"MJX-3372-TEX-N-30\" d=\"M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z\"></path><path id=\"MJX-3372-TEX-N-31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path><path id=\"MJX-3372-TEX-N-32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"></path><path id=\"MJX-3372-TEX-N-33\" d=\"M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z\"></path><path id=\"MJX-3372-TEX-N-34\" d=\"M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z\"></path><path id=\"MJX-3372-TEX-S4-23A4\" d=\"M0 1070V1154H347V-645H263V1070H0Z\"></path><path id=\"MJX-3372-TEX-S4-23A6\" d=\"M263 -560V1155H347V-644H0V-560H263Z\"></path><path id=\"MJX-3372-TEX-S4-23A5\" d=\"M263 0V602H347V0H263Z\"></path></defs><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\"><g data-mml-node=\"math\"><g data-mml-node=\"mtable\"><g data-mml-node=\"mtr\"><g data-mml-node=\"mtd\"><g data-mml-node=\"mrow\"><g data-mml-node=\"mo\"><use xlink:href=\"#MJX-3372-TEX-S4-23A1\" transform=\"translate(0, 2396)\"></use><use xlink:href=\"#MJX-3372-TEX-S4-23A3\" transform=\"translate(0, -2406)\"></use><svg width=\"667\" height=\"3202\" y=\"-1351\" x=\"0\" viewBox=\"0 800.5 667 3202\"><use xlink:href=\"#MJX-3372-TEX-S4-23A2\" transform=\"scale(1, 7.978)\"></use></svg></g><g data-mml-node=\"mtable\" transform=\"translate(667, 0)\"><g data-mml-node=\"mtr\" transform=\"translate(0, 2800)\"><g data-mml-node=\"mtd\"><g data-mml-node=\"mn\"><use xlink:href=\"#MJX-3372-TEX-N-30\"></use></g></g><g data-mml-node=\"mtd\" transform=\"translate(1500, 0)\"><g data-mml-node=\"mn\"><use xlink:href=\"#MJX-3372-TEX-N-31\"></use></g></g><g data-mml-node=\"mtd\" transform=\"translate(3000, 0)\"><g data-mml-node=\"mn\"><use xlink:href=\"#MJX-3372-TEX-N-32\"></use></g></g><g data-mml-node=\"mtd\" transform=\"translate(4500, 0)\"><g data-mml-node=\"mn\"><use xlink:href=\"#MJX-3372-TEX-N-33\"></use></g></g><g data-mml-node=\"mtd\" transform=\"translate(6000, 0)\"><g data-mml-node=\"mn\"><use xlink:href=\"#MJX-3372-TEX-N-34\"></use></g></g></g><g data-mml-node=\"mtr\" transform=\"translate(0, 1400)\"><g data-mml-node=\"mtd\"><g data-mml-node=\"mn\"><use xlink:href=\"#MJX-3372-TEX-N-31\"></use></g></g><g data-mml-node=\"mtd\" transform=\"translate(1500, 0)\"><g data-mml-node=\"mn\"><use xlink:href=\"#MJX-3372-TEX-N-32\"></use></g></g><g data-mml-node=\"mtd\" transform=\"translate(3000, 0)\"><g data-mml-node=\"mn\"><use xlink:href=\"#MJX-3372-TEX-N-33\"></use></g></g><g data-mml-node=\"mtd\" transform=\"translate(4500, 0)\"><g data-mml-node=\"mn\"><use xlink:href=\"#MJX-3372-TEX-N-34\"></use></g></g><g data-mml-node=\"mtd\" transform=\"translate(6000, 0)\"><g data-mml-node=\"mn\"><use xlink:href=\"#MJX-3372-TEX-N-30\"></use></g></g></g><g data-mml-node=\"mtr\" transform=\"translate(0, 0)\"><g data-mml-node=\"mtd\"><g data-mml-node=\"mn\"><use xlink:href=\"#MJX-3372-TEX-N-32\"></use></g></g><g data-mml-node=\"mtd\" transform=\"translate(1500, 0)\"><g data-mml-node=\"mn\"><use xlink:href=\"#MJX-3372-TEX-N-33\"></use></g></g><g data-mml-node=\"mtd\" transform=\"translate(3000, 0)\"><g data-mml-node=\"mn\"><use xlink:href=\"#MJX-3372-TEX-N-34\"></use></g></g><g data-mml-node=\"mtd\" transform=\"translate(4500, 0)\"><g data-mml-node=\"mn\"><use xlink:href=\"#MJX-3372-TEX-N-30\"></use></g></g><g data-mml-node=\"mtd\" transform=\"translate(6000, 0)\"><g data-mml-node=\"mn\"><use xlink:href=\"#MJX-3372-TEX-N-31\"></use></g></g></g><g data-mml-node=\"mtr\" transform=\"translate(0, -1400)\"><g data-mml-node=\"mtd\"><g data-mml-node=\"mn\"><use xlink:href=\"#MJX-3372-TEX-N-33\"></use></g></g><g data-mml-node=\"mtd\" transform=\"translate(1500, 0)\"><g data-mml-node=\"mn\"><use xlink:href=\"#MJX-3372-TEX-N-34\"></use></g></g><g data-mml-node=\"mtd\" transform=\"translate(3000, 0)\"><g data-mml-node=\"mn\"><use xlink:href=\"#MJX-3372-TEX-N-30\"></use></g></g><g data-mml-node=\"mtd\" transform=\"translate(4500, 0)\"><g data-mml-node=\"mn\"><use xlink:href=\"#MJX-3372-TEX-N-31\"></use></g></g><g data-mml-node=\"mtd\" transform=\"translate(6000, 0)\"><g data-mml-node=\"mn\"><use xlink:href=\"#MJX-3372-TEX-N-32\"></use></g></g></g><g data-mml-node=\"mtr\" transform=\"translate(0, -2800)\"><g data-mml-node=\"mtd\"><g data-mml-node=\"mn\"><use xlink:href=\"#MJX-3372-TEX-N-34\"></use></g></g><g data-mml-node=\"mtd\" transform=\"translate(1500, 0)\"><g data-mml-node=\"mn\"><use xlink:href=\"#MJX-3372-TEX-N-30\"></use></g></g><g data-mml-node=\"mtd\" transform=\"translate(3000, 0)\"><g data-mml-node=\"mn\"><use xlink:href=\"#MJX-3372-TEX-N-31\"></use></g></g><g data-mml-node=\"mtd\" transform=\"translate(4500, 0)\"><g data-mml-node=\"mn\"><use xlink:href=\"#MJX-3372-TEX-N-32\"></use></g></g><g data-mml-node=\"mtd\" transform=\"translate(6000, 0)\"><g data-mml-node=\"mn\"><use xlink:href=\"#MJX-3372-TEX-N-33\"></use></g></g></g></g><g data-mml-node=\"mo\" transform=\"translate(7167, 0)\"><use xlink:href=\"#MJX-3372-TEX-S4-23A4\" transform=\"translate(0, 2396)\"></use><use xlink:href=\"#MJX-3372-TEX-S4-23A6\" transform=\"translate(0, -2406)\"></use><svg width=\"667\" height=\"3202\" y=\"-1351\" x=\"0\" viewBox=\"0 800.5 667 3202\"><use xlink:href=\"#MJX-3372-TEX-S4-23A5\" transform=\"scale(1, 7.978)\"></use></svg></g></g></g></g></g></g></g></svg></p><p>store it to a variable, and write a line of code to select the submatrix </p><p class=\"text-center\"><svg style=\"vertical-align: -2.149ex\" width=\"17.095ex\" height=\"5.43ex\" class=\"mathjax\" viewBox=\"0 -1450 7556 2400\"><title>\\begin{align*}\\begin{bmatrix} 3 &amp; 4 &amp; 0 &amp; 1 &amp; 2 \\\\ 4 &amp; 0 &amp; 1 &amp; 2 &amp; 3 \\end{bmatrix}\\end{align*}</title><defs><path id=\"MJX-3374-TEX-S3-5B\" d=\"M247 -949V1450H516V1388H309V-887H516V-949H247Z\"></path><path id=\"MJX-3374-TEX-N-33\" d=\"M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z\"></path><path id=\"MJX-3374-TEX-N-34\" d=\"M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z\"></path><path id=\"MJX-3374-TEX-N-30\" d=\"M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z\"></path><path id=\"MJX-3374-TEX-N-31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path><path id=\"MJX-3374-TEX-N-32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"></path><path id=\"MJX-3374-TEX-S3-5D\" d=\"M11 1388V1450H280V-949H11V-887H218V1388H11Z\"></path></defs><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\"><g data-mml-node=\"math\"><g data-mml-node=\"mtable\"><g data-mml-node=\"mtr\"><g data-mml-node=\"mtd\"><g data-mml-node=\"mrow\"><g data-mml-node=\"mo\"><use xlink:href=\"#MJX-3374-TEX-S3-5B\"></use></g><g data-mml-node=\"mtable\" transform=\"translate(528, 0)\"><g data-mml-node=\"mtr\" transform=\"translate(0, 700)\"><g data-mml-node=\"mtd\"><g data-mml-node=\"mn\"><use xlink:href=\"#MJX-3374-TEX-N-33\"></use></g></g><g data-mml-node=\"mtd\" transform=\"translate(1500, 0)\"><g data-mml-node=\"mn\"><use xlink:href=\"#MJX-3374-TEX-N-34\"></use></g></g><g data-mml-node=\"mtd\" transform=\"translate(3000, 0)\"><g data-mml-node=\"mn\"><use xlink:href=\"#MJX-3374-TEX-N-30\"></use></g></g><g data-mml-node=\"mtd\" transform=\"translate(4500, 0)\"><g data-mml-node=\"mn\"><use xlink:href=\"#MJX-3374-TEX-N-31\"></use></g></g><g data-mml-node=\"mtd\" transform=\"translate(6000, 0)\"><g data-mml-node=\"mn\"><use xlink:href=\"#MJX-3374-TEX-N-32\"></use></g></g></g><g data-mml-node=\"mtr\" transform=\"translate(0, -700)\"><g data-mml-node=\"mtd\"><g data-mml-node=\"mn\"><use xlink:href=\"#MJX-3374-TEX-N-34\"></use></g></g><g data-mml-node=\"mtd\" transform=\"translate(1500, 0)\"><g data-mml-node=\"mn\"><use xlink:href=\"#MJX-3374-TEX-N-30\"></use></g></g><g data-mml-node=\"mtd\" transform=\"translate(3000, 0)\"><g data-mml-node=\"mn\"><use xlink:href=\"#MJX-3374-TEX-N-31\"></use></g></g><g data-mml-node=\"mtd\" transform=\"translate(4500, 0)\"><g data-mml-node=\"mn\"><use xlink:href=\"#MJX-3374-TEX-N-32\"></use></g></g><g data-mml-node=\"mtd\" transform=\"translate(6000, 0)\"><g data-mml-node=\"mn\"><use xlink:href=\"#MJX-3374-TEX-N-33\"></use></g></g></g></g><g data-mml-node=\"mo\" transform=\"translate(7028, 0)\"><use xlink:href=\"#MJX-3374-TEX-S3-5D\"></use></g></g></g></g></g></g></g></svg></p><p>Hint: you might want to use the function <code class=\"language-julia\">rem</code>—look it up from a Julia session to check how it works.</p></div> <p><em>Solution.</em> <code class=\"language-julia\">A = [rem(i+j,5) for i=0:4,j=0:4]</code> generates the first matrix and stores it to the variable <span class=\"nowrap\"><code class=\"language-julia\">A</code>.</span> Then <code class=\"language-julia\">A[end-1:end,:]</code> takes the last two rows of <span class=\"nowrap\"><code class=\"language-julia\">A</code>.</span></p></x-step>","goals":[],"keywords":[]},"plotting":{"id":"plotting","title":"Plotting","html":"<x-step id=\"plotting\" goals=\"next-0\"><p>The main plotting package in Julia is called <span class=\"nowrap\"><code class=\"language-julia\">Plots</code>.</span> To create a figure, you supply data in the form of arrays as arguments to the <code class=\"language-python\">plot</code> function (<code class=\"language-julia\">x</code> first, then <code class=\"language-julia\">y</code> if appropriate, then <code class=\"language-julia\">z</code> if appropriate). All other plot information (called <em>attributes</em>, in Plots lingo) is supplied using keyword arguments. For example:</p><pre julia-executable=\"julia-executable\">using Plots\nusing Random\nRandom.seed!(123)\nplot(rand(10), rand(10), seriestype = :scatter,\n     group = rand(0:1,10), title = \"Some random points\")</pre><figure><img src=\"/content/programming-in-julia/images/random-points.svg\" alt=\"\"></figure><p>Note that the <code class=\"language-julia\">group</code> keyword argument partitioned the data into two series, one for each unique value in the array supplied to <span class=\"nowrap\"><code class=\"language-julia\">group</code>.</span> These series are automatically shown in different colors and labeled in the legend.</p><p><button class=\"next-step\">Continue</button></p></x-step>","goals":["next-0"],"keywords":[]},"step-plotsjl-cheatsheet":{"id":"step-plotsjl-cheatsheet","title":"Step Plotsjl Cheatsheet","html":"<x-step id=\"step-plotsjl-cheatsheet\" goals=\"next-0\"><p>You can see all the main plot types and attributes on the <a href=\"https://data1010.github.io/docs/cheatsheets/plotsjl-cheatsheet.pdf\" target=\"_blank\">Plots.jl cheatsheet</a>.</p><p><button class=\"next-step\">Continue</button></p></x-step>","goals":["next-0"],"keywords":[]},"step-save-plot":{"id":"step-save-plot","title":"Step Save Plot","html":"<x-step id=\"step-save-plot\" goals=\"next-0\"><p>To save a plot, use the <code class=\"language-julia\">savefig</code> function:</p><pre julia-executable=\"julia-executable\">P = plot(rand(0:10),rand(0:10), seriestype=:scatter)\nsavefig(P,\"myfigure.pdf\") # save figure as a PDF file</pre><p><button class=\"next-step\">Continue</button></p></x-step>","goals":["next-0"],"keywords":[]},"step-plots-exercise-1":{"id":"step-plots-exercise-1","title":"Step Plots Exercise  ","html":"<x-step id=\"step-plots-exercise-1\" goals=\"quill\"><div class=\"exercise\"> <p><strong>Exercise</strong><br>Make a graph which looks as much as possible like the one shown below. You'll want to look at the <a href=\"https://data1010.github.io/docs/cheatsheets/plotsjl-cheatsheet.pdf\" target=\"_blank\">Plots.jl cheatsheet</a> for options.</p></div> <figure><img src=\"/content/programming-in-julia/images/example-graph.svg\" alt=\"\"></figure><pre julia-executable=\"julia-executable\">using Plots\nx = range(0, stop = 2π, length = 100)\ny = sin.(x)\n# add plotting code here</pre><x-quill goal=\"quill\"></x-quill></x-step>","goals":["quill"],"keywords":[]},"step-plotting-solution":{"id":"step-plotting-solution","title":"Step Plotting Solution","html":"<x-step id=\"step-plotting-solution\" goals=\"\"><p><em>Solution.</em> We change the line style and width, and we add labels for the axes:</p><pre julia-executable=\"julia-executable\">using Plots\nx = range(0, stop = 2π, length = 100)\ny = sin.(x)\nplot(x,y, linewidth = 3, linestyle = :dash,\n     xlabel=\"x\", ylabel=\"sin(x)\", legend = :none)</pre></x-step>","goals":[],"keywords":[]},"step-167":{"id":"step-167","title":"Step  ","html":"<x-step id=\"step-167\" goals=\"\"><p>To get a quick refresher on how to perform common tasks in Julia, check out the <a href=\"https://browndsi.github.io/docs/cheatsheets/jpr-cheatsheet.pdf\" target=\"_blank\">Julia-Python-R cheatsheet</a>, also linked from <a href=\"https://browndsi.github.io\" target=\"_blank\">browndsi.github.io</a>.</p><p>Congratulations! You have finished the Data Gymnasia <em>Programming with Julia</em> course.</p></x-step>","goals":[],"keywords":[]}},"availableLocales":["en"],"biosJSON":"{}","glossJSON":"{\"command-line\":{\"title\":\"Command line\",\"text\":\"<p>A <strong>command-line interface</strong> (CLI) is a way of interacting with a computer using a sequence of commands entered as lines of text. Each typed command is submitted to the command line application by pressing \\\"enter\\\" and is run by the computer.</p><p>On macOS, the command-line application is called <em>Terminal</em> and may be opened by spotlighting \\\"Terminal\\\" (do ⌘-spacebar and start typing \\\"Terminal\\\").</p><p>The language for the Windows CLI is quite different from the standard one for macOS/Linux. We recommend ins talling the <a href=\\\"https://gitforwindows.org\\\" target=\\\"_blank\\\">Git Bash</a> emulator so that you can learn to operate the command line in a cross-platform way.</p>\"},\"anaconda\":{\"title\":\"Anaconda\",\"text\":\"<p>Anaconda is a distribution of Python which is designed to alleviate some of the difficulties with Python's main package manager <code class=\\\"language-python\\\">pip</code> when it comes to managing the sorts of extensive binary dependencies that are common in data science packages.</p>\"},\"rounding\":{\"title\":\"Floating point representation\",\"text\":\"<p>A real number typically has to be rounded by about <svg style=\\\"vertical-align: -0.05ex\\\" width=\\\"5.22ex\\\" height=\\\"2.005ex\\\" class=\\\"mathjax\\\" viewBox=\\\"0 -864 2307.2 886\\\"><title>10^{-16}</title><defs><path id=\\\"MJX-199-TEX-N-31\\\" d=\\\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\\\"></path><path id=\\\"MJX-199-TEX-N-30\\\" d=\\\"M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z\\\"></path><path id=\\\"MJX-199-TEX-N-2212\\\" d=\\\"M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z\\\"></path><path id=\\\"MJX-199-TEX-N-36\\\" d=\\\"M42 313Q42 476 123 571T303 666Q372 666 402 630T432 550Q432 525 418 510T379 495Q356 495 341 509T326 548Q326 592 373 601Q351 623 311 626Q240 626 194 566Q147 500 147 364L148 360Q153 366 156 373Q197 433 263 433H267Q313 433 348 414Q372 400 396 374T435 317Q456 268 456 210V192Q456 169 451 149Q440 90 387 34T253 -22Q225 -22 199 -14T143 16T92 75T56 172T42 313ZM257 397Q227 397 205 380T171 335T154 278T148 216Q148 133 160 97T198 39Q222 21 251 21Q302 21 329 59Q342 77 347 104T352 209Q352 289 347 316T329 361Q302 397 257 397Z\\\"></path></defs><g stroke=\\\"currentColor\\\" fill=\\\"currentColor\\\" stroke-width=\\\"0\\\" transform=\\\"matrix(1 0 0 -1 0 0)\\\"><g data-mml-node=\\\"math\\\"><g data-mml-node=\\\"msup\\\"><g data-mml-node=\\\"mn\\\"><use xlink:href=\\\"#MJX-199-TEX-N-31\\\"></use><use xlink:href=\\\"#MJX-199-TEX-N-30\\\" transform=\\\"translate(500, 0)\\\"></use></g><g data-mml-node=\\\"TeXAtom\\\" transform=\\\"translate(1000, 393.1) scale(0.707)\\\" data-mjx-texclass=\\\"ORD\\\"><g data-mml-node=\\\"mo\\\"><use xlink:href=\\\"#MJX-199-TEX-N-2212\\\"></use></g><g data-mml-node=\\\"mn\\\" transform=\\\"translate(778, 0)\\\"><use xlink:href=\\\"#MJX-199-TEX-N-31\\\"></use><use xlink:href=\\\"#MJX-199-TEX-N-36\\\" transform=\\\"translate(500, 0)\\\"></use></g></g></g></g></g></svg> times its absolute value to be represented as a float. For example, the difference between <svg style=\\\"vertical-align: -0.225ex\\\" width=\\\"3.061ex\\\" height=\\\"2.398ex\\\" class=\\\"mathjax\\\" viewBox=\\\"0 -960.5 1353 1060\\\"><title>\\\\sqrt{2}</title><defs><path id=\\\"MJX-200-TEX-N-221A\\\" d=\\\"M95 178Q89 178 81 186T72 200T103 230T169 280T207 309Q209 311 212 311H213Q219 311 227 294T281 177Q300 134 312 108L397 -77Q398 -77 501 136T707 565T814 786Q820 800 834 800Q841 800 846 794T853 782V776L620 293L385 -193Q381 -200 366 -200Q357 -200 354 -197Q352 -195 256 15L160 225L144 214Q129 202 113 190T95 178Z\\\"></path><path id=\\\"MJX-200-TEX-N-32\\\" d=\\\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\\\"></path></defs><g stroke=\\\"currentColor\\\" fill=\\\"currentColor\\\" stroke-width=\\\"0\\\" transform=\\\"matrix(1 0 0 -1 0 0)\\\"><g data-mml-node=\\\"math\\\"><g data-mml-node=\\\"msqrt\\\"><g transform=\\\"translate(853, 0)\\\"><g data-mml-node=\\\"mn\\\"><use xlink:href=\\\"#MJX-200-TEX-N-32\\\"></use></g></g><g data-mml-node=\\\"mo\\\" transform=\\\"translate(0, 100.5)\\\"><use xlink:href=\\\"#MJX-200-TEX-N-221A\\\"></use></g><rect width=\\\"500\\\" height=\\\"60\\\" x=\\\"853\\\" y=\\\"840.5\\\"></rect></g></g></g></svg> and the float which is closest to <svg style=\\\"vertical-align: -0.225ex\\\" width=\\\"3.061ex\\\" height=\\\"2.398ex\\\" class=\\\"mathjax\\\" viewBox=\\\"0 -960.5 1353 1060\\\"><title>\\\\sqrt{2}</title><defs><path id=\\\"MJX-200-TEX-N-221A\\\" d=\\\"M95 178Q89 178 81 186T72 200T103 230T169 280T207 309Q209 311 212 311H213Q219 311 227 294T281 177Q300 134 312 108L397 -77Q398 -77 501 136T707 565T814 786Q820 800 834 800Q841 800 846 794T853 782V776L620 293L385 -193Q381 -200 366 -200Q357 -200 354 -197Q352 -195 256 15L160 225L144 214Q129 202 113 190T95 178Z\\\"></path><path id=\\\"MJX-200-TEX-N-32\\\" d=\\\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\\\"></path></defs><g stroke=\\\"currentColor\\\" fill=\\\"currentColor\\\" stroke-width=\\\"0\\\" transform=\\\"matrix(1 0 0 -1 0 0)\\\"><g data-mml-node=\\\"math\\\"><g data-mml-node=\\\"msqrt\\\"><g transform=\\\"translate(853, 0)\\\"><g data-mml-node=\\\"mn\\\"><use xlink:href=\\\"#MJX-200-TEX-N-32\\\"></use></g></g><g data-mml-node=\\\"mo\\\" transform=\\\"translate(0, 100.5)\\\"><use xlink:href=\\\"#MJX-200-TEX-N-221A\\\"></use></g><rect width=\\\"500\\\" height=\\\"60\\\" x=\\\"853\\\" y=\\\"840.5\\\"></rect></g></g></g></svg> is about <svg style=\\\"vertical-align: -0.05ex\\\" width=\\\"12.008ex\\\" height=\\\"2.02ex\\\" class=\\\"mathjax\\\" viewBox=\\\"0 -871.1 5307.7 893.1\\\"><title>9.66 \\\\times 10^{-17}</title><defs><path id=\\\"MJX-201-TEX-N-39\\\" d=\\\"M352 287Q304 211 232 211Q154 211 104 270T44 396Q42 412 42 436V444Q42 537 111 606Q171 666 243 666Q245 666 249 666T257 665H261Q273 665 286 663T323 651T370 619T413 560Q456 472 456 334Q456 194 396 97Q361 41 312 10T208 -22Q147 -22 108 7T68 93T121 149Q143 149 158 135T173 96Q173 78 164 65T148 49T135 44L131 43Q131 41 138 37T164 27T206 22H212Q272 22 313 86Q352 142 352 280V287ZM244 248Q292 248 321 297T351 430Q351 508 343 542Q341 552 337 562T323 588T293 615T246 625Q208 625 181 598Q160 576 154 546T147 441Q147 358 152 329T172 282Q197 248 244 248Z\\\"></path><path id=\\\"MJX-201-TEX-N-2E\\\" d=\\\"M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z\\\"></path><path id=\\\"MJX-201-TEX-N-36\\\" d=\\\"M42 313Q42 476 123 571T303 666Q372 666 402 630T432 550Q432 525 418 510T379 495Q356 495 341 509T326 548Q326 592 373 601Q351 623 311 626Q240 626 194 566Q147 500 147 364L148 360Q153 366 156 373Q197 433 263 433H267Q313 433 348 414Q372 400 396 374T435 317Q456 268 456 210V192Q456 169 451 149Q440 90 387 34T253 -22Q225 -22 199 -14T143 16T92 75T56 172T42 313ZM257 397Q227 397 205 380T171 335T154 278T148 216Q148 133 160 97T198 39Q222 21 251 21Q302 21 329 59Q342 77 347 104T352 209Q352 289 347 316T329 361Q302 397 257 397Z\\\"></path><path id=\\\"MJX-201-TEX-N-D7\\\" d=\\\"M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z\\\"></path><path id=\\\"MJX-201-TEX-N-31\\\" d=\\\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\\\"></path><path id=\\\"MJX-201-TEX-N-30\\\" d=\\\"M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z\\\"></path><path id=\\\"MJX-201-TEX-N-2212\\\" d=\\\"M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z\\\"></path><path id=\\\"MJX-201-TEX-N-37\\\" d=\\\"M55 458Q56 460 72 567L88 674Q88 676 108 676H128V672Q128 662 143 655T195 646T364 644H485V605L417 512Q408 500 387 472T360 435T339 403T319 367T305 330T292 284T284 230T278 162T275 80Q275 66 275 52T274 28V19Q270 2 255 -10T221 -22Q210 -22 200 -19T179 0T168 40Q168 198 265 368Q285 400 349 489L395 552H302Q128 552 119 546Q113 543 108 522T98 479L95 458V455H55V458Z\\\"></path></defs><g stroke=\\\"currentColor\\\" fill=\\\"currentColor\\\" stroke-width=\\\"0\\\" transform=\\\"matrix(1 0 0 -1 0 0)\\\"><g data-mml-node=\\\"math\\\"><g data-mml-node=\\\"mn\\\"><use xlink:href=\\\"#MJX-201-TEX-N-39\\\"></use><use xlink:href=\\\"#MJX-201-TEX-N-2E\\\" transform=\\\"translate(500, 0)\\\"></use><use xlink:href=\\\"#MJX-201-TEX-N-36\\\" transform=\\\"translate(778, 0)\\\"></use><use xlink:href=\\\"#MJX-201-TEX-N-36\\\" transform=\\\"translate(1278, 0)\\\"></use></g><g data-mml-node=\\\"mo\\\" transform=\\\"translate(2000.2, 0)\\\"><use xlink:href=\\\"#MJX-201-TEX-N-D7\\\"></use></g><g data-mml-node=\\\"msup\\\" transform=\\\"translate(3000.4, 0)\\\"><g data-mml-node=\\\"mn\\\"><use xlink:href=\\\"#MJX-201-TEX-N-31\\\"></use><use xlink:href=\\\"#MJX-201-TEX-N-30\\\" transform=\\\"translate(500, 0)\\\"></use></g><g data-mml-node=\\\"TeXAtom\\\" transform=\\\"translate(1000, 393.1) scale(0.707)\\\" data-mjx-texclass=\\\"ORD\\\"><g data-mml-node=\\\"mo\\\"><use xlink:href=\\\"#MJX-201-TEX-N-2212\\\"></use></g><g data-mml-node=\\\"mn\\\" transform=\\\"translate(778, 0)\\\"><use xlink:href=\\\"#MJX-201-TEX-N-31\\\"></use><use xlink:href=\\\"#MJX-201-TEX-N-37\\\" transform=\\\"translate(500, 0)\\\"></use></g></g></g></g></g></svg>.</p><p>However, numbers which are rational with a power of 2 in the denominator (including integers) can typically be represented exactly. Exceptions are when the number itself is very large or when the power of 2 in the denominator is very large.</p>\"},\"respectively\":{\"title\":\"Respectively\",\"text\":\"<p><em>Respectively</em> means <em>in the given order</em>. For example, the sentence \\\"Alice and Bob wore a green and a blue shirt, respectively.\\\" means that Alice wore a green shirt and Bob wore a blue shirt.</p>\"},\"function-julia\":{\"title\":\"Function\",\"text\":\"<p>A packaged block of related code for performing a specific computation or action. Values to be input are called <strong>parameters</strong>, and they can be given default values:</p><pre class=\\\"language-julia\\\"><code>function add(x, y; z=0)\\n    x + y + z\\nend\\nadd(3,2) # returns 5\\nadd(3,2,z=7) # returns 12</code></pre>\"},\"syntax\":{\"title\":\"Syntax\",\"text\":\"<p>Syntax refers to the textual <strong>form</strong> of a given construct in a programming language. Examples:</p><p>Indexing: <code>myList[0], myDict[\\\"green\\\"]</code></p><p>Named functions: <code>myFunction(x)</code></p><p>Anonymous functions: <code>lambda x,y: x**y</code></p><p>Lists: <code>[1, 2, 3]</code></p><p>Tuples: <code>(1, 2, 3)</code></p><p>Dictionaries: <code>{\\\"a\\\": 1, \\\"b\\\": 2}</code></p><p>Dot syntax: <code>module.function, object.attribute, object.method()</code></p>\"},\"package\":{\"title\":\"Package\",\"text\":\"<p>A package is a collection of code that is distributed by the authors and may be loaded by a user to extend the functionality of the language.</p>\"},\"immutable\":{\"title\":\"Immutable\",\"text\":\"<p>A type is immutable if the values it stores cannot be changed. For example,</p><p><pre>T = (1, 2, 3)\\nT[1] = 4</pre></p><p>throws an error, because tuples are immutable. Changes in mutable data structures can be handled by assigning <strong>new</strong> instances of the type to the variable:</p><p><pre>T = (1, 2, 3)\\nT = (T[0], 4, T[2])</pre></p><p>Dictionaries, lists, and sets are mutable.</p>\"},\"listcomp\":{\"title\":\"List Comprehension\",\"text\":\"<p>Special syntax for generating lists by mapping and filtering. To remove the elements of <code>L</code> not satisfying a condition <code>cond</code> and apply a function <code>f</code> to the remaining elements:</p><p><pre>[f(x) for x in L if cond(x)]</pre></p><p>The <code>if</code> clause may be omitted.</p><p><pre>[x**2 for x in range(5)\\n        if x % 2 == 0]</pre></p><p>returns <code>[0, 4, 16]</code></p>\"},\"arraycomp\":{\"title\":\"Array Comprehension\",\"text\":\"<p>Special syntax for generating lists by mapping and filtering. To remove the elements of <code class=\\\"language-julia\\\">A</code> not satisfying a condition <code class=\\\"language-julia\\\">cond</code> and apply a function <code class=\\\"language-julia\\\">f</code> to the remaining elements:</p><pre class=\\\"language-julia\\\"><code>[f(x) for x in L if cond(x)]</code></pre>\"},\"dictionary-julia\":{\"title\":\"Dictionary\",\"text\":\"<p>An unordered, mutable data type used for encoding a function whose domain is a finite set.</p><p>For example, if we set</p><pre class=\\\"language-julia\\\"><code>D = Dict(\\\"a\\\" =&gt; 1, \\\"b\\\" =&gt; 2, \\\"c\\\" =&gt; 3)</code></pre><p>then the expression <code class=\\\"language-julia\\\">D[\\\"b\\\"]</code> returns <span class=\\\"nowrap\\\"><code class=\\\"language-julia\\\">2</code>.</span></p>\"}}","hintsJSON":"{\"welcome\":\"<p>Welcome to Data Gymnasia! I’m Bruno, your personal tutor. <img class=\\\"emoji\\\" width=\\\"20\\\" height=\\\"20\\\" src=\\\"https://static.mathigon.org/emoji/graduation-cap.png\\\" alt=\\\"graduation-cap\\\"></p>\",\"account\":\"<p>You can <x-target class=\\\"step-target pill\\\" to=\\\".nav-link.popup-target\\\">create a free account</x-target> to save your progress.</p>\",\"tutorial1\":\"<p>Our content is divided into small steps. You have to complete the activities to reveal what’s next.</p>\",\"tutorial2\":\"<p>We will save all your progress, so you can come back later and continue right where you left off.</p>\",\"correct\":[\"<p>Well done <img class=\\\"emoji\\\" width=\\\"20\\\" height=\\\"20\\\" src=\\\"https://static.mathigon.org/emoji/smiling-face.png\\\" alt=\\\"smiling-face\\\"></p>\",\"<p>Great Work! <img class=\\\"emoji\\\" width=\\\"20\\\" height=\\\"20\\\" src=\\\"https://static.mathigon.org/emoji/relieved-face.png\\\" alt=\\\"relieved-face\\\"></p>\",\"<p>Awesome <img class=\\\"emoji\\\" width=\\\"20\\\" height=\\\"20\\\" src=\\\"https://static.mathigon.org/emoji/grinning-face.png\\\" alt=\\\"grinning-face\\\"></p>\",\"<p>Brilliant <img class=\\\"emoji\\\" width=\\\"20\\\" height=\\\"20\\\" src=\\\"https://static.mathigon.org/emoji/thumbs-up.png\\\" alt=\\\"thumbs-up\\\"></p>\",\"<p>Excellent! <img class=\\\"emoji\\\" width=\\\"20\\\" height=\\\"20\\\" src=\\\"https://static.mathigon.org/emoji/ok-hand.png\\\" alt=\\\"ok-hand\\\"></p>\",\"<p>Cool <img class=\\\"emoji\\\" width=\\\"20\\\" height=\\\"20\\\" src=\\\"https://static.mathigon.org/emoji/smiling-face-with-sunglasses.png\\\" alt=\\\"smiling-face-with-sunglasses\\\"></p>\",\"<p>Nice! <img class=\\\"emoji\\\" width=\\\"20\\\" height=\\\"20\\\" src=\\\"https://static.mathigon.org/emoji/victory-hand.png\\\" alt=\\\"victory-hand\\\"></p>\",\"<p>Way to go! <img class=\\\"emoji\\\" width=\\\"20\\\" height=\\\"20\\\" src=\\\"https://static.mathigon.org/emoji/smiling-face-with-smiling-eyes.png\\\" alt=\\\"smiling-face-with-smiling-eyes\\\"></p>\",\"<p>Sweet <img class=\\\"emoji\\\" width=\\\"20\\\" height=\\\"20\\\" src=\\\"https://static.mathigon.org/emoji/smiling-face.png\\\" alt=\\\"smiling-face\\\"></p>\",\"<p>Impressive! <img class=\\\"emoji\\\" width=\\\"20\\\" height=\\\"20\\\" src=\\\"https://static.mathigon.org/emoji/trophy.png\\\" alt=\\\"trophy\\\"></p>\",\"<p>Outstanding <img class=\\\"emoji\\\" width=\\\"20\\\" height=\\\"20\\\" src=\\\"https://static.mathigon.org/emoji/grinning-face.png\\\" alt=\\\"grinning-face\\\"></p>\",\"<p>Superb! <img class=\\\"emoji\\\" width=\\\"20\\\" height=\\\"20\\\" src=\\\"https://static.mathigon.org/emoji/star.png\\\" alt=\\\"star\\\"></p>\",\"<p>Wonderful! <img class=\\\"emoji\\\" width=\\\"20\\\" height=\\\"20\\\" src=\\\"https://static.mathigon.org/emoji/smiling-face.png\\\" alt=\\\"smiling-face\\\"></p>\"],\"incorrect\":[\"<p>That’s not quite right <img class=\\\"emoji\\\" width=\\\"20\\\" height=\\\"20\\\" src=\\\"https://static.mathigon.org/emoji/frowning-face.png\\\" alt=\\\"frowning-face\\\"></p>\",\"<p>Are you sure about that? <img class=\\\"emoji\\\" width=\\\"20\\\" height=\\\"20\\\" src=\\\"https://static.mathigon.org/emoji/thinking-face.png\\\" alt=\\\"thinking-face\\\"></p>\",\"<p>That doesn’t look right. <img class=\\\"emoji\\\" width=\\\"20\\\" height=\\\"20\\\" src=\\\"https://static.mathigon.org/emoji/hushed-face.png\\\" alt=\\\"hushed-face\\\"></p>\",\"<p>Try again! <img class=\\\"emoji\\\" width=\\\"20\\\" height=\\\"20\\\" src=\\\"https://static.mathigon.org/emoji/confused-face.png\\\" alt=\\\"confused-face\\\"></p>\"],\"welcomeMorning\":\"<p>Good morning!</p>\",\"welcomeAfternoon\":\"<p>Good afternoon!</p>\",\"welcomeEvening\":\"<p>Good evening!</p>\",\"welcomeMorningNamed\":\"<p>Good morning, $name!</p>\",\"welcomeAfternoonNamed\":\"<p>Good afternoon, $name!</p>\",\"welcomeEveningNamed\":\"<p>Good evening, $name!</p>\",\"expression-1\":\"<p>Don't forget there's an assignment involved!</p>\",\"not-a-variable\":\"<p>That's an object that can be assigned to a variable</p>\",\"mutable\":\"<p>Variables can be changed!</p>\"}"}