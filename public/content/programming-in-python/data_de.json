{"id":"programming-in-python","locale":"de","nextCourse":"linear-algebra","prevCourse":"programming-in-julia","title":"Programmieren mit Python","description":"Einführung, Grundlagen, Typen, Bedingungen, Funktionen, Pakete, Klassen, Lists and Tuples, Sets und Dictionaries, Wiederholung (Schleifen), Projekt 1: Spotify, Projekt 2: Seriendruck","color":"#88349a","author":"Samuel S. Watson","hero":"\\content\\programming-in-python\\hero.jpg","goals":197,"sections":[{"id":"introduction","title":"Einführung","url":"/course/programming-in-python/introduction","steps":["intro","step-1","step-2","step-3","step-4","step-5","step-6","step-7","step-8","step-9","step-10"],"goals":11,"duration":15},{"id":"basics","title":"Grundlagen","url":"/course/programming-in-python/basics","steps":["basics","step-11","step-12","step-13","step-14","step-15","step-16","step-17","step-18","step-19","step-20","step-21","step-22","step-23","step-24","step-25","step-26","step-27","step-28","step-29","step-30","step-31","step-32","step-33"],"goals":31,"duration":35},{"id":"types","title":"Typen","url":"/course/programming-in-python/types","steps":["types","step-34","step-35","step-36","step-37","step-38","step-39","step-40","step-41","step-42","step-43","step-44","step-45","step-46","step-47","step-48","step-49","step-50","step-51","step-52","step-53","step-54","step-55"],"goals":28,"duration":30},{"id":"conditionals","title":"Bedingungen","url":"/course/programming-in-python/conditionals","steps":["conditionals","step-56","step-57","step-58","step-59","step-60","step-61"],"goals":7,"duration":10},{"id":"functions","title":"Funktionen","url":"/course/programming-in-python/functions","steps":["functions","step-62","step-63","step-64","step-65","step-66","step-67","step-68","step-69","step-70","step-71","step-72","step-73","step-74","step-75","step-76"],"goals":17,"duration":25},{"id":"packages","title":"Pakete","url":"/course/programming-in-python/packages","steps":["packages","step-77","step-78","step-79","step-80","step-81","step-82"],"goals":7,"duration":10},{"id":"classes","title":"Klassen","url":"/course/programming-in-python/classes","steps":["classes","step-84","step-85","step-86","step-87","step-88","step-89","step-90"],"goals":7,"duration":15},{"id":"lists-and-tuples","title":"Lists and Tuples","url":"/course/programming-in-python/lists-and-tuples","steps":["lists-and-tuples","step-91","step-92","step-93","step-94","step-95","step-96","step-97","step-98","step-99","step-100","step-101","step-102","step-103","step-104","step-105","step-106","step-107","step-108","step-109","step-110","step-111","step-112","step-113","step-114","step-115","step-116","step-117","step-118","step-119","step-120","step-121","step-122","step-123"],"goals":36,"duration":50},{"id":"sets-and-dictionaries","title":"Sets und Dictionaries","url":"/course/programming-in-python/sets-and-dictionaries","steps":["sets-and-dictionaries","step-124","step-125","step-126","step-127","step-128","step-129","step-130","step-131","step-132","step-133","step-134"],"goals":17,"duration":25},{"id":"iteration","title":"Wiederholung (Schleifen)","url":"/course/programming-in-python/iteration","steps":["iteration","step-135","step-136","step-137","step-137a","step-138","step-139","step-140","step-141","step-142","step-143"],"goals":11,"duration":25},{"id":"project-1-spotify","title":"Projekt 1: Spotify","url":"/course/programming-in-python/project-1-spotify","steps":["project-1","step-144","step-145","step-146","step-147","step-148","step-149","step-150","step-151","step-152","step-153","step-154","step-155","step-156"],"goals":14,"duration":25},{"id":"project-2-mail-merge","title":"Projekt 2: Seriendruck","url":"/course/programming-in-python/project-2-mail-merge","steps":["project-2","step-157","step-158","step-159","step-160","step-161","step-162","step-163","step-164","step-165","step-166","step-167"],"goals":11,"duration":15}],"steps":{"intro":{"id":"intro","title":"Intro","html":"<x-step id=\"intro\" goals=\"next-0\"><p>Dieses Kapitel ist eine Einführung in die Programmierung in <strong>Python</strong>, einer vielseitig einsetzbaren Sprache die unter Softwareentwicklern sehr beliebt ist. Vor allem auch im wissenschaftlichen Bereich aufgrund der seit Anfang der 2000er Jahre entwickelten <x-gloss xid=\"package\">Pakete</x-gloss> ist sie zur beliebtesten Sprache im Zusammenhang mit Data Science (Datenwissenschaft) geworden.</p><p>Mit dem Programmieren steht uns ein mächtiges Werkzeug zur Verfügung. Beim Erlernen der Programmierung verbessert man aber auch ganz allgemein die Fähigkeit, Probleme zu lösen und systematisch an Strukturen und Berechnungen heranzugehen. Du wirst wahrscheinlich feststellen, dass Ideen aus der Informatik deine Fähigkeit, über komplexe Systeme nachzudenken, verbessern werden, selbst in Situationen, die nichts mit Programmieren zu tun haben. Es ist ganz einfach eine nützliche Art zu denken, die dir beim Lernen weiterhelfen kann.</p><p><button class=\"next-step\">Weiter</button></p></x-step>","goals":["next-0"],"keywords":[]},"step-1":{"id":"step-1","title":"Step  ","html":"<x-step id=\"step-1\" goals=\"next-0\"><p>Dieser Kurs enthält viele Übungen. Sie gewissenhaft zu machen ist für die Aneignung von neuem Wissen und das Erlernen neuer Fähigkeiten unerlässlich. Du solltest jede Übung lösen, bevor du auf die Schaltfläche \"Weiter\" klickst, um eine mögliche Lösung anzuzeigen.</p><p><button class=\"next-step\">Weiter</button></p></x-step>","goals":["next-0"],"keywords":[]},"step-2":{"id":"step-2","title":"Step  ","html":"<x-step id=\"step-2\" goals=\"next-0\"><h2>Installation</h2><p>Es gibt mehrere Möglichkeiten, Python anzuwenden:</p><p><strong>Inline</strong>. In diesem Kurs kannst du Python-Codeblöcke direkt auf der Webseite ausführen (wir verdanken das <a href=\"https://github.com/ines/juniper\" target=\"_blank\">Juniper</a> und <a href=\"https://mybinder.org\" target=\"_blank\">Binder</a>). Wenn du also noch nichts installieren willst, musst du es nicht tun. (Die erste sogenannte Zelle, die du mit dieser Methode ausführst, wird jedoch etwas lange auf sich warten lassen - bis zu 30 Sekunden - da zuerst einmal die Programmierumgebung hinter den Kulissen auf den Servern von Binder gestartet werden muss. Wenn es zu lange dauert, lade die Seite neu.)</p><p><button class=\"next-step\">Weiter</button></p></x-step>","goals":["next-0"],"keywords":[]},"step-3":{"id":"step-3","title":"Step  ","html":"<x-step id=\"step-3\" goals=\"next-0\"><p><strong>Binder</strong> oder <strong>Google Colab</strong>. Du kannst Python-Code auch in einem sogenannten Notebook auf der Binder-Website (oder Google Colaboratory)ausführen. Um mit einer Reihe von Paketen zu starten, die auf diesen Kurs zugeschnitten sind, <a href=\"https://mybinder.org/v2/gh/data-gymnasia/python-binder/master\" target=\"_blank\">klicke hier</a>. Wähle dann <em>New</em> (rechte obere Ecke) und <em>Python 3</em> aus. Es wird dringend empfohlen, während der Arbeit an diesem Kurs eine Registerkarte mit einem Binder-Notebook offen zu halten, da es als Platz für Notizen und eigene Versuche dienen kann. Außerdem bietet es mehr Funktionen als die Blöcke, die direkt auf dieser Seite eingebunden sind. <a href=\"https://colab.research.google.com/\" target=\"_blank\">Colab</a> <a href=\"https://mybinder.org/v2/gh/matheharry/Cognitive-Class-Labs-Python-german/binder\" target=\"_blank\">Binder mit deutschen Kursunterlagen</a></p><p><button class=\"next-step\">Weiter</button></p></x-step>","goals":["next-0"],"keywords":[]},"step-4":{"id":"step-4","title":"Step  ","html":"<x-step id=\"step-4\" goals=\"next-0\"><p><strong>Anaconda</strong>. Eine Pythonvariante mit vorinstallierten wissenschaftlichen Rechenpaketen und Tools zur Verwaltung von Python-Umgebungen ist die Distribution <a href=\"https://www.anaconda.com/\" target=\"_blank\">Anaconda</a>. <a href=\"https://www.anaconda.com/distribution\" target=\"_blank\">Lade das Installationsprogramm herunter</a> und starte es, um es auf deinem Computer einzurichten. Wer auf einem PC keine Rechte hat, Software zu installieren, kann auch <a href=\"http://winpython.sourceforge.net/\" target=\"_blank\">WinPython</a> verwenden. </p><p><button class=\"next-step\">Weiter</button></p></x-step>","goals":["next-0"],"keywords":[]},"step-5":{"id":"step-5","title":"Step  ","html":"<x-step id=\"step-5\" goals=\"next-0\"><p><strong>CoCalc</strong>. Wenn du eine komplette Umgebung benötigst, ohne etwas lokal installieren zu müssen, ist <a href=\"https://cocalc.com\" target=\"_blank\">CoCalc</a> eine Community-Plattform mit allem Drum und Dran für mathematisches und wissenschaftliches Open-Source-Computing. Man kann sie mit eingeschränkter Funktionalität kostenlos nutzen, und sie kostet $14 pro Monat, um das Projekt zu unterstützen und kostenpflichtige Zusatzfunktionen zu erhalten.</p><p><button class=\"next-step\">Weiter</button></p></x-step>","goals":["next-0"],"keywords":[]},"step-6":{"id":"step-6","title":"Step  ","html":"<x-step id=\"step-6\" goals=\"next-0\"><h2>Anwendung</h2><p>Sobald du Python installiert hast, gibt es mehrere Möglichkeiten, damit zu arbeiten. </p><p><strong>REPL</strong>. Starte einen sogenannten Read-Eval-Print Loop (eine Lesen-Auswerten-Anzeigen Schleife) über die <span class=\"nowrap\"><x-gloss xid=\"command-line\">Befehlszeile</x-gloss>.</span> Jeder von dir eingegebene Code wird sofort ausgeführt, und alle von deinem Code zurückgegebenen Werte werden angezeigt. Um eine Sitzung zu starten, öffne das Terminal (Befehlszeile) deines Betriebssystems und führe <code class=\"language-python\">python</code> oder <code class=\"language-python\">ipython</code> aus (letzteres ist bunter und hat mehr Funktionen). Du kannst das auch in Binder tun, indem du <em>New &gt; Terminal</em> auswählst. Im Fall von WinPython geht das über <em>WinPython Command Prompt</em>. </p><p><button class=\"next-step\">Weiter</button></p></x-step>","goals":["next-0"],"keywords":[]},"step-7":{"id":"step-7","title":"Step  ","html":"<x-step id=\"step-7\" goals=\"next-0\"><p><strong>Script</strong>. Speichere eine Datei namens <code>example.py</code> und führe <code>python example.py</code> auf der <x-gloss xid=\"command-line\">Befehlszeile</x-gloss> aus (im gleichen Verzeichnis wie die Datei), um den gesamten Code im Skript auszuführen. Du kannst das in Binder tun, indem du <em>New &gt; Text File</em> auswählst und dann den Namen der Textdatei so änderst, dass sie mit <code>.py</code> endet. </p><p><button class=\"next-step\">Weiter</button></p></x-step>","goals":["next-0"],"keywords":[]},"step-8":{"id":"step-8","title":"Step  ","html":"<x-step id=\"step-8\" goals=\"next-0\"><p><strong>Jupyter</strong>. Wie ein REPL, aber erlaubt das Einfügen von Text und mathematischen Ausdrücken, das Gruppieren von Code in Blöcke, etc. Dies ist die standardmäßig in <a href=\"https://mybinder.org/v2/gh/data-gymnasia/python-binder/master\" target=\"_blank\">Binder</a> bereitgestellte Schnittstelle. Lokal kannst du ein Notebook starten, indem du <code class=\"language-python\">jupyter notebook</code> auf der <x-gloss xid=\"command-line\">Befehlszeile</x-gloss> ausführst (vorausgesetzt, du hast Anaconda installiert; in WinPython kann <em>Jupyter Notebook</em> direkt aus dem Programmverzeichnis aufgerufen werden). </p><p><button class=\"next-step\">Weiter</button></p></x-step>","goals":["next-0"],"keywords":[]},"step-9":{"id":"step-9","title":"Step  ","html":"<x-step id=\"step-9\" goals=\"next-0\"><p><strong>Integrierte Entwicklungsumgebung (IDE)</strong>. Eine IDE ist unerlässlich für umfangreiche Softwareentwicklungsprojekte und bietet einen Editor zum komfortablen und effizienten Schreiben von Code und einen Debugger, der dir dabei hilft, deine Fehler zu beheben. Es gibt viele IDEs für Python, darunter Visual Studio Code, Atom und PyCharm.</p><p><button class=\"next-step\">Weiter</button></p></x-step>","goals":["next-0"],"keywords":[]},"step-10":{"id":"step-10","title":"Step  ","html":"<x-step id=\"step-10\" goals=\"sortable-0\"><div class=\"exercise\"> <p><strong>Übung</strong>.<br>Sortiere die folgenden Python-Interaktionsmöglichkeiten in der Reihenfolge, in der sie in diesem Video erscheinen. </p><figure><center><video src=\"/content/programming-in-python/images/jupyter-script-repl.mp4\" width=\"75%\" controls=\"controls\"></video></center></figure><x-sortable goal=\"sortable-0\"><div class=\"item\" data-index=\"2\">REPL</div><div class=\"item\" data-index=\"1\">Script</div><div class=\"item\" data-index=\"0\">Jupyter</div></x-sortable></div> </x-step>","goals":["sortable-0"],"keywords":[]},"basics":{"id":"basics","title":"Basics","html":"<x-step id=\"basics\" goals=\"next-0\"><p>Beginnen wir damit uns einen Grundwortschatz für die Elemente eines Programms zu erarbeiten. Viele der Begriffe stammen aus dem Englischen. Auch wenn es für die meisten dieser Begriffe deutsche Übersetzungen gibt ist es oft einfacher, bei den englischen zu bleiben, nachdem sie einmal erklärt wurden, da sie auch so in Python (bzw. in anderen Programmiersprachen) verwendet werden. Dieser Abschnitt bietet einen Überblick: Einige dieser Begriffe werden in späteren Abschnitten genauer behandelt.</p><p><button class=\"next-step\">Weiter</button></p></x-step>","goals":["next-0"],"keywords":[]},"step-11":{"id":"step-11","title":"Step  ","html":"<x-step id=\"step-11\" goals=\"next-0\"><h2>Objekte</h2><p>Ein <strong>Objekt</strong> ist eine grundlegende Einheit, die von einem Programm manipuliert werden kann. Objekte haben <strong>Typen</strong>; zum Beispiel ist <code class=\"language-python\">5</code> ein <code class=\"language-python\">int</code> (kurz für \"integer\", eine Ganzzahl) und <code class=\"language-python\">\"Hallo Welt!\"</code> ist ein <code class=\"language-python\">str</code> (kurz für \"string\", eine Zeichenkette bzw. Text). Typen sind für den Computer wichtig, um den Überblick zu behalten, da Objekte je nach Typ unterschiedlich gespeichert werden. </p><p><button class=\"next-step\">Weiter</button></p></x-step>","goals":["next-0"],"keywords":[]},"step-12":{"id":"step-12","title":"Step  ","html":"<x-step id=\"step-12\" goals=\"next-0\"><p>Du kannst den Typ eines Objekts mit dem Befehl <code class=\"language-python\">type</code> überprüfen. Zum Beispiel gibt <code class=\"language-python\">type(\"Hallo\")</code> als Ergebnis <code class=\"language-python\">str</code> zurück.</p><p><button class=\"next-step\">Weiter</button></p></x-step>","goals":["next-0"],"keywords":[]},"step-13":{"id":"step-13","title":"Step  ","html":"<x-step id=\"step-13\" goals=\"blank-0\"><div class=\"exercise\"> <p><strong>Übung</strong>.<br>Verwende den folgenden Codeblock, um den Typ von <code class=\"language-python\">1.0</code> zu bestimmen. Hat <code class=\"language-python\">1.0</code> den gleichen Typ wie <span class=\"nowrap\"><code class=\"language-python\">1</code>?</span> <x-blank-mc goal=\"blank-0\"><button class=\"choice\">Nein</button><button class=\"choice\">Ja</button></x-blank-mc></p></div> <pre python-executable=\"python-executable\"># ersetze diesen Text durch Code und drücke zum Ausführen die Eingabetaste mit gedrückter Umschalttaste.</pre></x-step>","goals":["blank-0"],"keywords":[]},"step-14":{"id":"step-14","title":"Step  ","html":"<x-step id=\"step-14\" goals=\"next-0\"><p>(<em>Hinweis</em>: du hast wahrscheinlich die Meldung <code class=\"language-md\">Loading or None returned</code> bemerkt, die kurz beim Ausführen der Zelle angezeigt wurde. Wenn diese Meldung für mehr als 10 Sekunden erscheint, ist es wahrscheinlich, dass die Zelle erfolgreich ausgeführt wurde, aber als Ergebnis nichts zu zeigen hat. Wir werden das in Kürze näher besprechen.)</p><p><button class=\"next-step\">Weiter</button></p></x-step>","goals":["next-0"],"keywords":[]},"step-15":{"id":"step-15","title":"Step  ","html":"<x-step id=\"step-15\" goals=\"next-0\"><h2>Variablen</h2><p>Eine <strong>Variable</strong> ist ein Name, der verwendet wird, um auf ein Objekt zu verweisen. Wir können ein Objekt (z.B. <code class=\"language-python\">41</code>) wie folgt einer Variablen (z.B. <code class=\"language-python\">Alter</code>) <strong>zuweisen</strong> : </p><pre class=\"language-python\"><code>Alter = 41</code></pre><p>Wir sagen, dass <code class=\"language-python\">41</code> der <strong>Wert</strong> der Variablen <code class=\"language-python\">Alter</code> ist.</p><p><button class=\"next-step\">Weiter</button></p></x-step>","goals":["next-0"],"keywords":[]},"step-16":{"id":"step-16","title":"Step  ","html":"<x-step id=\"step-16\" goals=\"blank-0 blank-1\"><p>Variablennamen müssen mit einem Unterstrich oder Buchstaben beginnen und dürfen danach nur Buchstaben, Zahlen und Unterstriche enthalten. Buchstaben können in Groß- oder Kleinschreibung sein, wobei die Groß- und Kleinschreibung einen Unterschied macht. Zum Beispiel ist <code class=\"language-python\">neueWerte0</code> ein <x-blank-mc goal=\"blank-0\"><button class=\"choice\">gültiger</button><button class=\"choice\">ungültiger</button></x-blank-mc> Variablenname, und <code class=\"language-python\">stop!</code> ist ein <x-blank-mc goal=\"blank-1\"><button class=\"choice\">ungültiger</button><button class=\"choice\">gültiger</button></x-blank-mc> Variablenname. </p></x-step>","goals":["blank-0","blank-1"],"keywords":[]},"step-17":{"id":"step-17","title":"Step  ","html":"<x-step id=\"step-17\" goals=\"blank-0\"><p>Das einer Variablen zugeordnete Objekt kann durch weitere Zuweisungen beliebig oft geändert werden.</p><div class=\"exercise\"> <p><strong>Übung</strong>.<br>Finde den Wert den <code class=\"language-python\">x</code> am Ende des folgenden Codeblocks hat. <x-blank solution=\"3\" goal=\"blank-0\"></x-blank></p><pre class=\"language-python\"><code>x = 3\ny = x\nx = x + 1\nx = y</code></pre></div> </x-step>","goals":["blank-0"],"keywords":[]},"step-18":{"id":"step-18","title":"Step  ","html":"<x-step id=\"step-18\" goals=\"next-0\"><p><em>Lösung</em>. Der Wert 3 wird <code class=\"language-python\">x</code> und dann auch <code class=\"language-python\">y</code> in der zweiten Zeile zugewiesen. Nach der dritten Zeile ist der Wert von <code class=\"language-python\">x</code> gleich 4, da sich die rechte Seite zu 4 ergibt und <em>dann</em> der Variablen <code class=\"language-python\">x</code> zugeordnet wird. Nach der vierten Zeile ist <code class=\"language-python\">3</code> wieder der Wert von <code class=\"language-python\">x</code> , da der Wert von <code class=\"language-python\">y</code> bei der Ausführung der vierten Zeile immer noch 3 ist. </p><p><button class=\"next-step\">Weiter</button></p></x-step>","goals":["next-0"],"keywords":[]},"step-19":{"id":"step-19","title":"Step  ","html":"<x-step id=\"step-19\" goals=\"blank-0\"><div class=\"exercise\"> <p><strong>Übung</strong>.<br>Verwende den folgenden Codeblock, um herauszufinden, was passiert, wenn du versuchst, eine Variable zu verwenden, der kein Objekt zugewiesen wurde: Du erhältst einen <x-blank solution=\"Name\" goal=\"blank-0\"></x-blank>Error, wobei Error Fehler bedeutet.</p></div> <pre python-executable=\"python-executable\">anzahl_karotten = 4\nanzahl_Karrotten</pre></x-step>","goals":["blank-0"],"keywords":[]},"step-20":{"id":"step-20","title":"Step  ","html":"<x-step id=\"step-20\" goals=\"blank-0 next-0\"><p>Beachte, dass du bei Auftreten eines Fehlers in deinem Code einen <strong>Traceback</strong> erhältst, der dir hilft, die Fehlerquelle zurückzuverfolgen. (\"trace back\" bedeutet zurückverfolgen). Damit kein Fehler ausgelöst wird müsste die Variable 'anzahl_Karotten' anders geschrieben werden, nämlich <span class=\"nowrap\"><x-blank-mc goal=\"blank-0\"><button class=\"choice\">anzahl_karotten</button><button class=\"choice\">Anzahl_Karotten</button><button class=\"choice\">anzahl karotten</button></x-blank-mc>.</span></p><h2>Funktionen</h2><p>Eine <strong>Funktion</strong> führt eine bestimmte Aufgabe aus. Beispielsweise schreibt <code class=\"language-python\">print(x)</code> den Wert der Variablen <code class=\"language-python\">x</code> als String (Zeichenkette) auf den Bildschirm. (Wenn hier von einer Zeichenkette oder einem Text die Rede ist werden wir von nun an immer den englischen Begriff String verwenden!) </p><p>Die Aufforderung an eine Funktion, ihre Aufgabe auszuführen, wird als <strong>Aufruf</strong> der Funktion bezeichnet. Funktionen werden mit Klammern hinter dem Funktionsnamen aufgerufen, und alle Objekte, die von der Funktion benötigt werden, werden zwischen diesen Klammern bereitgestellt, getrennt durch Kommas. Diese Objekte werden als <strong>Argumente</strong> bezeichnet. </p><p><button class=\"next-step\">Weiter</button></p></x-step>","goals":["blank-0","next-0"],"keywords":[]},"step-21":{"id":"step-21","title":"Step  ","html":"<x-step id=\"step-21\" goals=\"next-0\"><p>Einige Funktionen, wie z.B. <span class=\"nowrap\"><code class=\"language-python\">print</code>,</span> sind schon in die Sprache integriert und immer verfügbar. Du kannst auch eigene Funktionen definieren, indem du <code class=\"language-python\">def</code> verwendest:</p><pre python-executable=\"python-executable\">def schreibe_zweimal(x):\n    print(x)\n    print(x)\n\nschreibe_zweimal(\"Holladaroh!\")</pre><p><button class=\"next-step\">Weiter</button></p></x-step>","goals":["next-0"],"keywords":[]},"step-22":{"id":"step-22","title":"Step  ","html":"<x-step id=\"step-22\" goals=\"next-0\"><p><code class=\"language-python\">def</code> ist ein Beispiel für ein <strong>Schlüsselwort</strong>: ein Name mit einer besonderen Bedeutung in der Sprache. Da es eine besondere Bedeutung hat, darf ein Schlüsselwort nicht als Variablenname verwendet werden. </p><p><button class=\"next-step\">Weiter</button></p></x-step>","goals":["next-0"],"keywords":[]},"step-23":{"id":"step-23","title":"Step  ","html":"<x-step id=\"step-23\" goals=\"blank-0\"><p>Beachte, dass die Codezeilen, die ausgeführt werden sollen wenn die Funktion aufgerufen wird, vier Leerzeichen in Bezug auf <code class=\"language-python\">def</code> <strong>eingerückt sein müssen</strong> . Zum Beispiel die Zeile <code class=\"language-python\">schreibe_zweimal(\"Holladaroh\")</code> <x-blank-mc goal=\"blank-0\"><button class=\"choice\">ist nicht</button><button class=\"choice\">ist</button></x-blank-mc> Teil der Definition der Funktion im obigen Beispiel.</p></x-step>","goals":["blank-0"],"keywords":[]},"step-24":{"id":"step-24","title":"Step  ","html":"<x-step id=\"step-24\" goals=\"next-0\"><p>Eine Funktion kann eine Aktion ausführen, wie z.B. <span class=\"nowrap\"><code class=\"language-python\">schreibe_zweimal</code>,</span> oder sie kann ein Objekt <strong>zurückgeben</strong> . So wird beispielsweise nach dem Ausführen des folgenden Codeblocks das Objekt <code class=\"language-python\">28</code> der Variablen <code class=\"language-python\">y</code> zugeordnet. </p><pre python-executable=\"python-executable\">def addiere_eins(x):\n    return x + 1\n\ny = 20 + addiere_eins(7)\ny</pre><p>(<em>Hinweis:</em> Wir setzen <code class=\"language-python\">y</code> allein auf die letzte Zeile, damit wir den Wert von <code class=\"language-python\">y</code> im Ausgabebereich sehen können. Wenn eine Zuweisung (wie <code class=\"language-python\">y = 20 + addiere_eins(7)</code>) die letzte Zeile in der Zelle ist, dann wird kein Wert gedruckt, und wir erhalten die Meldung <code class=\"language-md\">Loading or None returned.</code>)</p><p><button class=\"next-step\">Weiter</button></p></x-step>","goals":["next-0"],"keywords":[]},"step-25":{"id":"step-25","title":"Step  ","html":"<x-step id=\"step-25\" goals=\"next-0\"><p>Der Variablenname <code class=\"language-python\">x</code> im obigen Block wird als <strong>Parameter</strong> bezeichnet. Variablen spielen bei der Definition einer mathematischen Funktion die gleiche Stellvertreterrolle wie Parameter (z.B. wenn die Quadratfunktion in der Schreibweise <span class=\"math\" data-voice=\"f of _x_ equals _x_ squared\"><mi>f</mi><mfenced><mi>x</mi></mfenced><mo value=\"=\">=</mo><msup><mi>x</mi><mn>2</mn></msup></span> definiert wird).</p><p><button class=\"next-step\">Weiter</button></p></x-step>","goals":["next-0"],"keywords":[]},"step-26":{"id":"step-26","title":"Step  ","html":"<x-step id=\"step-26\" goals=\"next-0\"><p>Ein <strong>Operator</strong> ist eine spezielle Art von Funktion, die auf besondere Weise aufgerufen werden kann. So wird beispielsweise der Multiplikationsoperator <code class=\"language-python\">*</code> wie in der Mathematik üblich aufgerufen: <span class=\"nowrap\"><code class=\"language-python\">3 * 5</code>.</span></p><p><button class=\"next-step\">Weiter</button></p></x-step>","goals":["next-0"],"keywords":[]},"step-27":{"id":"step-27","title":"Step  ","html":"<x-step id=\"step-27\" goals=\"sortable-0\"><div class=\"exercise\"> <p><strong>Übung</strong><br>Ordne die folgenden Operatorbeschreibungen in der Reihenfolge an, wie der entsprechende Python-Operator in der Liste <span class=\"nowrap\"><code class=\"language-python\">+, **, *, //, /</code>.</span> Möglicherweise musst du mit dem untenstehenden Codeblock etwas herumprobieren. </p><x-sortable goal=\"sortable-0\"><div class=\"item\" data-index=\"4\">Division (gewöhnliche Division mit reellen Zahlen)</div><div class=\"item\" data-index=\"3\">ganzzahlige Division (nur Quotient; kein Rest)</div><div class=\"item\" data-index=\"0\">Addition </div><div class=\"item\" data-index=\"2\">Multiplikation</div><div class=\"item\" data-index=\"1\">Potenzieren</div></x-sortable></div> <pre python-executable=\"python-executable\">print(6 + 11)\nprint(2**3)\nprint(3 * 4)\nprint(7//2)\nprint(7/2)</pre></x-step>","goals":["sortable-0"],"keywords":[]},"step-28":{"id":"step-28","title":"Step  ","html":"<x-step id=\"step-28\" goals=\"blank-0\"><h2>Anweisungen und Ausdrücke</h2><p>Eine einzelne ausführbare Codeeinheit in Python wird als <strong>Anweisung</strong> bezeichnet. Beispielsweise ist die Zuordnung<code class=\"language-python\">alter = 41</code> eine Anweisung. Anweisungen können <strong>Ausdrücke</strong> beinhalten, d.h. Kombinationen von Werten, Variablen, Operatoren und Funktionsaufrufen, die eine Sprache interpretiert, <strong>auswertet</strong> und als Wert zurückgibt. Beispielsweise ist <code class=\"language-python\">1 + alter + abs(3*-4)</code> ein Ausdruck, der zu <x-blank solution=\"54\" goal=\"blank-0\"></x-blank> ausgewertet wird (beachte, dass <code class=\"language-python\">abs</code> die Absolutbetragsfunktion ist und dass <code class=\"language-python\">alter</code> auf den zuvor im Absatz angegebenen Wert gesetzt wurde). </p></x-step>","goals":["blank-0"],"keywords":[]},"step-29":{"id":"step-29","title":"Step  ","html":"<x-step id=\"step-29\" goals=\"blank-0 blank-1 blank-2 blank-3 picker-1\"><div class=\"exercise\"> <p><strong>Übung</strong><br><code class=\"language-python\">def f(x): return x*x</code> ist <x-blank-mc goal=\"blank-0\"><button class=\"choice\">eine Anweisung</button><button class=\"choice\">ein Ausdruck</button></x-blank-mc></p><p><code class=\"language-python\">2 + 3*f(4)</code> ist <x-blank-mc goal=\"blank-1\"><button class=\"choice\">ein Ausdruck</button><button class=\"choice\">eine Anweisung</button></x-blank-mc></p><p><code class=\"language-python\">y = 13</code> ist <x-blank-mc goal=\"blank-2\"><button class=\"choice\">eine Anweisung</button><button class=\"choice\">ein Ausdruck</button></x-blank-mc></p><p><code class=\"language-python\">myName = \"John\" + \"Doe\"</code> ist</p><x-picker class=\"list\" goal=\"picker\"><div class=\"item pill bblue\" data-error=\"expression-1\">ein Ausdruck </div><div class=\"item pill bblue\">eine Anweisung, die beim Ausführen einen Ausdruck auswertet</div></x-picker></div> <h2>Übungen</h2><div class=\"exercise\"> <p><strong>Übung</strong><br>(Versuche es ohne den Code auszuführen.) Der Ausdruck <code class=\"language-python\">1 + 5//3 + 2**3</code> ergibt <span class=\"nowrap\"><x-blank solution=\"10\" goal=\"blank-3\"></x-blank>.</span></p></div> </x-step>","goals":["blank-0","blank-1","blank-2","blank-3","picker-1"],"keywords":[]},"step-30":{"id":"step-30","title":"Step  ","html":"<x-step id=\"step-30\" goals=\"blank-0\"><div class=\"exercise\"> <p><strong>Übung</strong><br>(Versuche es ohne den Code auszuführen.) Der Ausdruck <code class=\"language-python\">11/2-11//2-3</code> ergibt <span class=\"nowrap\"><x-blank solution=\"-2.5\" goal=\"blank-0\"></x-blank>,</span> ausgedrückt als Dezimalzahl (gewöhne dich hier gleich daran, als Dezimalzeichen einen <strong>Punkt</strong> (zB 4.2) anstelle eines Beistrichs (zB 4,2) zu verwenden).</p></div> </x-step>","goals":["blank-0"],"keywords":[]},"step-31":{"id":"step-31","title":"Step  ","html":"<x-step id=\"step-31\" goals=\"blank-0\"><div class=\"exercise\"> <p><strong>Übung</strong><br>Finde den Wert den <code class=\"language-python\">x</code> am Ende des folgenden Codeblocks hat. <x-blank solution=\"25\" goal=\"blank-0\"></x-blank></p><pre class=\"language-python\"><code>x = 3**2\nx = x + 1\nx = x + 1\ny = x//2\nx = y*y\nz = 2*x</code></pre></div> </x-step>","goals":["blank-0"],"keywords":[]},"step-32":{"id":"step-32","title":"Step  ","html":"<x-step id=\"step-32\" goals=\"quill\"><div class=\"exercise\"> <p><strong>Übung</strong><br>Schreib eine Funktion <span class=\"nowrap\"><code class=\"language-python\">f</code>,</span> die eine positive ganze Zahl <code class=\"language-python\">n</code> als Eingabe annimmt und die $n$te positive ungerade Zahl zurückgibt. Du solltest die ganze Zeile mit dem Schlüsselwort <code class=\"language-python\">pass</code> im folgenden Codeblock ersetzen (der Rest des Codes prüft ab der vierten Zeile, ob deine Funktion funktioniert).</p><p>Beachte auch, dass du <em>zwei</em> Felder zur Verfügung hast: das erste ist zum Ausprobieren und das zweite zum Speichern deiner Antwort. Wenn du mit deinem Code zufrieden bist, kopiere ihn und füge ihn in das zweite Feld ein.</p></div> <pre python-executable=\"python-executable\">def f(n):\n    pass # hier Code einfügen\n\ndef test_f():\n    assert f(3) == 5\n    assert f(1) == 1\n    assert f(100) == 199\n    return \"Tests bestanden!\"\n\ntest_f()</pre><x-quill goal=\"quill\"></x-quill></x-step>","goals":["quill"],"keywords":[]},"step-33":{"id":"step-33","title":"Step  ","html":"<x-step id=\"step-33\" goals=\"picker-0 picker-3\"><div class=\"exercise\"> <p><strong>Übung</strong><br>Wähle die wahren Aussagen aus.</p><x-picker class=\"list\" goal=\"picker\"><div class=\"item pill bblue\">Die Anweisung <code class=\"language-python\">kontostand = 46.04</code> weist der Variablen <code class=\"language-python\">kontostand</code> den Wert <code class=\"language-python\">46.04</code> zu. </div><div class=\"item pill bblue\" data-error=\"not-a-variable\">Das Objekt <code class=\"language-python\">33</code> ist eine Variable. </div><div class=\"item pill bblue\" data-error=\"mutable\">Der Wert einer Variablen kann nicht geändert werden. </div><div class=\"item pill bblue\">Variablennamen in Python unterscheiden Groß- und Kleinschreibung.</div></x-picker></div> </x-step>","goals":["picker-0","picker-3"],"keywords":[]},"types":{"id":"types","title":"Types","html":"<x-step id=\"types\" goals=\"next-0\"><p>Python hat, wie die meisten Programmiersprachen, eingebaute Typen für die Verarbeitung gängiger Daten wie Zahlen und Text.</p><p><button class=\"next-step\">Weiter</button></p></x-step>","goals":["next-0"],"keywords":[]},"step-34":{"id":"step-34","title":"Step  ","html":"<x-step id=\"step-34\" goals=\"next-0\"><h2>Zahlen</h2><p>Wie im vorherigen Abschnitt erläutert, kann eine Zahl entweder einen Wert vom Typ <code class=\"language-python\">int</code> oder <code class=\"language-python\">float</code> haben. Wir können ganze Zahlen genau darstellen, während die Speicherung einer Gleitkommazahl als Float <span class=\"nowrap\"><x-gloss xid=\"rounding\">oft eine leichte Rundung erfordert</x-gloss>.</span></p><p><button class=\"next-step\">Weiter</button></p></x-step>","goals":["next-0"],"keywords":[]},"step-35":{"id":"step-35","title":"Step  ","html":"<x-step id=\"step-35\" goals=\"next-0\"><p>Eine Zahl, die direkt in ein Python-Programm eingegeben wird, wird als float oder integer gespeichert, je nachdem, ob sie einen Dezimalpunkt enthält. Wenn du also möchtest, dass der Wert 6 als <code class=\"language-python\">float</code> gespeichert wird, musst du <code class=\"language-python\">6.0</code> schreiben. </p><p><button class=\"next-step\">Weiter</button></p></x-step>","goals":["next-0"],"keywords":[]},"step-36":{"id":"step-36","title":"Step  ","html":"<x-step id=\"step-36\" goals=\"blank-0\"><p>Zahlen können mit den Operatoren <code class=\"language-python\">==,&gt;,&lt;,&lt;=,&gt;=,!=</code> miteinander verglichen werden. </p><div class=\"exercise\"> <p><strong>Übung</strong><br>Was ist der Typ des Objekts, das von <code class=\"language-python\">1 == 2</code> zurückgegeben wird? <x-blank solution=\"bool\" goal=\"blank-0\"></x-blank></p></div> <pre python-executable=\"python-executable\">1 == 2</pre></x-step>","goals":["blank-0"],"keywords":[]},"step-37":{"id":"step-37","title":"Step  ","html":"<x-step id=\"step-37\" goals=\"blank-0 blank-1 blank-2 blank-3\"><div class=\"exercise\"> <p><strong>Übung</strong><br><code class=\"language-python\">x == 1</code> ist <x-blank-mc goal=\"blank-0\"><button class=\"choice\">ein Ausdruck, der</button><button class=\"choice\">eine Anweisung, die</button></x-blank-mc> <code class=\"language-python\">True</code> (\"wahr\") oder <code class=\"language-python\">False</code> (\"falsch\") zurückgibt, je nachdem, ob <x-blank-mc goal=\"blank-1\"><button class=\"choice\">das x zugewiesene Objekt gleich 1</button><button class=\"choice\">der String \"x\" gleich 1</button></x-blank-mc> ist. Andererseits ist <code class=\"language-python\">x = 1</code> <x-blank-mc goal=\"blank-2\"><button class=\"choice\">eine Anweisung, die</button><button class=\"choice\">ein Ausdruck, der</button></x-blank-mc> <span class=\"nowrap\"><x-blank-mc goal=\"blank-3\"><button class=\"choice\">dem Objekt x den Wert 1 zuweist</button><button class=\"choice\">x mit 1 vergleicht</button></x-blank-mc>.</span></p></div> </x-step>","goals":["blank-0","blank-1","blank-2","blank-3"],"keywords":[]},"step-38":{"id":"step-38","title":"Step  ","html":"<x-step id=\"step-38\" goals=\"next-0\"><h2>Strings (Zeichenketten)</h2><p>Textdaten werden durch eine Folge von Zeichen dargestellt, die als <strong>String</strong> bezeichnet wird. Wir können ein Stringobjekt erstellen, indem wir die gewünschte Zeichenfolge in Anführungszeichen einschließen: <span class=\"nowrap\"><code class=\"language-python\">a = \"das ist ein String\"</code>.</span> Eine solche in Anführungszeichen eingeschlossene Zeichenkette in einem Python-Programm wird als <strong>string literal</strong> bezeichnet - wir bleiben aber auch hier bei unserer Bezeichnung <strong>String</strong>. Strings können auch durch dreifache Anführungszeichen begrenzt werden, was für mehrzeilige Zeichenketten und für Zeichenketten mit Anführungszeichen nützlich sein kann. </p><pre python-executable=\"python-executable\">\"\"\"\nDas ist eine mehrzeilige Zeichenkette. \nSie kann sogar \"Anführungszeichen\" enthalten, kein Problem.\n\"\"\"\n \n\"pre(python-executable)\nDas ist eine gewöhnliche Zeichenkette. \\\"Anführungszeichen\\\" erfordern hier einen Backslash.\"</pre><p><button class=\"next-step\">Weiter</button></p></x-step>","goals":["next-0"],"keywords":[]},"step-39":{"id":"step-39","title":"Step  ","html":"<x-step id=\"step-39\" goals=\"blank-0\"><p>Wir können die Anzahl der Zeichen in einem String mit der <code class=\"language-python\">len</code>-Funktion abfragen: <code class=\"language-python\">len(\"Hallo\")</code> gibt <x-blank solution=\"5\" goal=\"blank-0\"></x-blank> zurück. </p></x-step>","goals":["blank-0"],"keywords":[]},"step-40":{"id":"step-40","title":"Step  ","html":"<x-step id=\"step-40\" goals=\"next-0\"><p>Wir können zwei Strings mit dem Additionsoperator (<code class=\"language-python\">+</code>) verknüpfen: <span class=\"nowrap\"><code class=\"language-python\">\"Hallo \" + \"Welt\"</code>.</span> </p><p><button class=\"next-step\">Weiter</button></p></x-step>","goals":["next-0"],"keywords":[]},"step-41":{"id":"step-41","title":"Step  ","html":"<x-step id=\"step-41\" goals=\"next-0\"><p>Wir können das erste Zeichen in einem String <code class=\"language-python\">s</code> mit dem Ausdruck <code class=\"language-python\">s[0]</code>zurückgeben, das zweite Element mit <span class=\"nowrap\"><code class=\"language-python\">s[1]</code>,</span> und so weiter. Wir können den Teilstring vom vierten bis zum achten Zeichen mit <code class=\"language-python\">s[3:9]</code> erhalten. Beachte, dass die 9 um eins <strong>größer</strong> ist als der Index an dem wir stoppen (bzw. 3 um 1 vor der Stelle, an der wir starten) wollen. </p><p><button class=\"next-step\">Weiter</button></p></x-step>","goals":["next-0"],"keywords":[]},"step-42":{"id":"step-42","title":"Step  ","html":"<x-step id=\"step-42\" goals=\"blank-0 blank-1\"><div class=\"exercise\"> <p><strong>Übung</strong><br>Für welche Werte von <code class=\"language-python\">i</code> und <code class=\"language-python\">j</code> wird der Ausdruck <code class=\"language-python\">\"Hallo Welt\"[i:j] == \"o We\"</code> den Wert <code class=\"language-python\">True</code> zurückgeben? i = <x-blank solution=\"4\" goal=\"blank-0\"></x-blank> und j = <x-blank solution=\"8\" goal=\"blank-1\"></x-blank></p></div> <pre python-executable=\"python-executable\">\"Hallo Welt\"[i:j]</pre></x-step>","goals":["blank-0","blank-1"],"keywords":[]},"step-43":{"id":"step-43","title":"Step  ","html":"<x-step id=\"step-43\" goals=\"quill\"><div class=\"exercise\"> <p><strong>Übung</strong><br>Wenn entweder <code class=\"language-python\">i</code> oder <code class=\"language-python\">j</code> im Ausdruck <code class=\"language-python\">s[i:j]</code> weggelassen wird (wobei <code class=\"language-python\">s</code> ein String ist), was passiert dann? Experimentiere mit dem obigen Codeblock. </p></div> <x-quill goal=\"quill\"></x-quill></x-step>","goals":["quill"],"keywords":[]},"step-44":{"id":"step-44","title":"Step  ","html":"<x-step id=\"step-44\" goals=\"next-0\"><p><em>Lösung</em>. Das Weglassen von <code class=\"language-python\">i</code> oder <code class=\"language-python\">j</code> bewirkt dass <code class=\"language-python\">i = 0</code> oder <code class=\"language-python\">j = len(s)</code> gesetzt werden. </p><p><button class=\"next-step\">Weiter</button></p></x-step>","goals":["next-0"],"keywords":[]},"step-45":{"id":"step-45","title":"Step  ","html":"<x-step id=\"step-45\" goals=\"quill\"><h2>String-Interpolation (Zeichenketteneinfügung)</h2><p>Wir können den Wert einer Variablen mit Hilfe der sogenannten <em>String-Interpolation</em> in einen String einfügen. Es gibt mehrere Möglichkeiten, das in Python zu bewerkstelligen, aber die wahrscheinlich einfachste Methode ist, den Buchstaben <code class=\"language-python\">f</code> unmittelbar vor das öffnende Anführungszeichen zu setzen. Ein so veränderter String wird als <em>f-string</em> (\"formattierter String\") bezeichnet. Alle Teile eines f-Strings die zwischen geschweiften Klammern stehen werden ausgewertet, und ihre Stringdarstellungen werden an dieser Stelle in den String eingefügt. </p><pre python-executable=\"python-executable\">x = 19\nprint(f\"\"\"\nDer Wert des Quotienten x durch 3, \nist {x//3}, und der Rest beträgt {x % 3}.\n\"\"\")</pre><div class=\"exercise\"> <p><strong>Übung</strong><br>Verwende eine String-Interpolation um eine einzelne Codezeile zu schreiben, die <code class=\"language-python\">mit 6.2 multipliziert ergibt 12.4</code> ausgibt, wenn die Variable <code class=\"language-python\">A</code> auf <code class=\"language-python\">2</code> gesetzt, und <span class=\"nowrap\"><code class=\"language-python\">mit 6.2 multipliziert ergibt 18,6</code>,</span> wenn <code class=\"language-python\">A</code> auf <code class=\"language-python\">3</code> gesetzt wird. </p></div> <pre python-executable=\"python-executable\">A = 2\nprint()</pre><x-quill goal=\"quill\"></x-quill></x-step>","goals":["quill"],"keywords":[]},"step-46":{"id":"step-46","title":"Step  ","html":"<x-step id=\"step-46\" goals=\"next-0\"><p><em>Lösung</em>. Der Ausdruck <code class=\"language-python\">print(f\"mit 6.2 multipliziert ergibt {6.2*A}\")</code> funktioniert. </p><p><button class=\"next-step\">Weiter</button></p></x-step>","goals":["next-0"],"keywords":[]},"step-47":{"id":"step-47","title":"Step  ","html":"<x-step id=\"step-47\" goals=\"next-0\"><h2>Boolesche Variablen</h2><p>Ein <strong>bool</strong> ist ein spezieller Typ, dessen einzige Werte <code class=\"language-python\">True</code> (\"Wahr\") und <code class=\"language-python\">False</code> (\"Falsch\") sind. Die grundlegenden Operatoren, die verwendet werden können, um boolesche Werte zu kombinieren, sind <code class=\"language-python\">and</code> (\"und\"), <code class=\"language-python\">or</code> (\"oder\") und <code class=\"language-python\">not</code> (\"nicht\"). </p><p><button class=\"next-step\">Weiter</button></p></x-step>","goals":["next-0"],"keywords":[]},"step-48":{"id":"step-48","title":"Step  ","html":"<x-step id=\"step-48\" goals=\"blank-0\"><div class=\"exercise\"> <p><strong>Übung</strong><br>Wandelt Python Typen um wenn man sie miteinander vergleicht? Mit anderen Worten, gibt <code class=\"language-python\">1 == 1.0</code> (also der Vergleich von zwei eigentlich gleich großen Integer- und ein Float-Werten) <code class=\"language-python\">True</code> oder <code class=\"language-python\">False</code> zurück? <x-blank-mc goal=\"blank-0\"><button class=\"choice\">True</button><button class=\"choice\">False</button></x-blank-mc></p></div> <pre python-executable=\"python-executable\">1 == 1,0</pre></x-step>","goals":["blank-0"],"keywords":[]},"step-49":{"id":"step-49","title":"Step  ","html":"<x-step id=\"step-49\" goals=\"next-0\"><p><em>Lösung</em>. Ja, Python wandelt die Typen für den Gleichheitsvergleich um. Deshalb <code class=\"language-python\">gibt 1 == 1.0</code> den Wert <code class=\"language-python\">True</code> zurück. </p><p><button class=\"next-step\">Weiter</button></p></x-step>","goals":["next-0"],"keywords":[]},"step-50":{"id":"step-50","title":"Step  ","html":"<x-step id=\"step-50\" goals=\"quill\"><div class=\"exercise\"> <p><strong>Übung</strong><br>Schreibe eine einzeilige <x-gloss xid=\"function\">Funktion</x-gloss> , die 3 Boolwerte als Argumente nimmt und <code class=\"language-python\">True</code> zurückgibt, wenn und nur wenn folgendes zutrifft: </p><ol> <li>Die beiden ersten beiden Argumente sind <span class=\"nowrap\"><code class=\"language-python\">True</code>,</span> oder </li><li>Das dritte Argument ist <code class=\"language-python\">False</code></li></ol> </div> <pre python-executable=\"python-executable\">def f(a,b,c):\n    pass # hier Code einfügen\n\ndef test_f():\n    assert f(True, True, True, True)\n    assert f(False, True, False)\n    assert not f(False, True, True, True)\n    return \"Tests erfolgreich abgeschlossen!\"\n\ntest_f()</pre><x-quill goal=\"quill\"></x-quill></x-step>","goals":["quill"],"keywords":[]},"step-51":{"id":"step-51","title":"Step  ","html":"<x-step id=\"step-51\" goals=\"next-0\"><p><em>Lösung</em>. Hier ist ein Beispiel für eine einfache Möglichkeit, das umzusetzen: </p><pre class=\"language-python\"><code>def f(a,b,c):\n    return a and b or not c</code></pre><p>Sei vorsichtig mit Vergleichen der Form <code class=\"language-python\">a == True</code> oder <span class=\"nowrap\"><code class=\"language-python\">b == False</code>.</span> Sie sind <x-gloss xid=\"respectively\">jeweils</x-gloss> äquivalent zu einfach nur <code class=\"language-python\">a</code> bzw. <span class=\"nowrap\"><code class=\"language-python\">not b</code>,</span> vorausgesetzt, <code class=\"language-python\">a</code> und <code class=\"language-python\">b</code> sind beide vom Typ bool, da die gesuchte Antwort ja schon von den Variablen selbst geliefert wird. Die kürzeren Versionen werden bevorzugt. </p><p><button class=\"next-step\">Weiter</button></p></x-step>","goals":["next-0"],"keywords":[]},"step-52":{"id":"step-52","title":"Step  ","html":"<x-step id=\"step-52\" goals=\"quill\"><h2>Übungen</h2><div class=\"exercise\"> <p><strong>Übung</strong> </p><p>Schreibe einen Code zur Berechnung von <span class=\"nowrap\"><svg style=\"vertical-align: -1.599ex\" width=\"4.356ex\" height=\"3.555ex\" class=\"mathjax\" viewBox=\"0 -864.9 1925.3 1571.5\"><title>\\frac{1}{a+\\frac{2}{3}}</title><defs><path id=\"MJX-3367-TEX-N-31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path><path id=\"MJX-3367-TEX-I-1D44E\" d=\"M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z\"></path><path id=\"MJX-3367-TEX-N-2B\" d=\"M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z\"></path><path id=\"MJX-3367-TEX-N-32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"></path><path id=\"MJX-3367-TEX-N-33\" d=\"M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z\"></path></defs><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\"><g data-mml-node=\"math\"><g data-mml-node=\"mfrac\"><g data-mml-node=\"mn\" transform=\"translate(785.9, 394) scale(0.707)\"><use xlink:href=\"#MJX-3367-TEX-N-31\"></use></g><g data-mml-node=\"mrow\" transform=\"translate(220, -451.6) scale(0.707)\"><g data-mml-node=\"mi\"><use xlink:href=\"#MJX-3367-TEX-I-1D44E\"></use></g><g data-mml-node=\"mo\" transform=\"translate(529, 0)\"><use xlink:href=\"#MJX-3367-TEX-N-2B\"></use></g><g data-mml-node=\"mfrac\" transform=\"translate(1307, 0)\"><g data-mml-node=\"mn\" transform=\"translate(220, 394) scale(0.707)\"><use xlink:href=\"#MJX-3367-TEX-N-32\"></use></g><g data-mml-node=\"mn\" transform=\"translate(220, -345) scale(0.707)\"><use xlink:href=\"#MJX-3367-TEX-N-33\"></use></g><rect width=\"553.6\" height=\"60\" x=\"120\" y=\"220\"></rect></g></g><rect width=\"1685.3\" height=\"60\" x=\"120\" y=\"220\"></rect></g></g></g></svg>.</span> <svg style=\"vertical-align: -0.023ex\" width=\"1.197ex\" height=\"1.02ex\" class=\"mathjax\" viewBox=\"0 -441 529 451\"><title>a</title><defs><path id=\"MJX-32-TEX-I-1D44E\" d=\"M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z\"></path></defs><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><use xlink:href=\"#MJX-32-TEX-I-1D44E\"></use></g></g></g></svg> ist dabei gleich der Anzahl der Zeichen im String <code class=\"language-python\">\"Semriacher Sennenhunde sind sehr selten selber senil\"</code></p></div> <pre python-executable=\"python-executable\"> </pre><x-quill goal=\"quill\"></x-quill></x-step>","goals":["quill"],"keywords":[]},"step-53":{"id":"step-53","title":"Step  ","html":"<x-step id=\"step-53\" goals=\"next-0\"><p><em>Lösung</em>. Wir speichern die Länge des angegebenen Strings in einer Variablen <code class=\"language-python\">a</code> und werten den gegebenen Ausdruck wie folgt aus: </p><pre class=\"language-python\"><code>a = len(\"Semriacher Sennenhunde sind sehr selten selber senil\")\n1/(a+2/3)</code></pre><p><button class=\"next-step\">Weiter</button></p></x-step>","goals":["next-0"],"keywords":[]},"step-54":{"id":"step-54","title":"Step  ","html":"<x-step id=\"step-54\" goals=\"blank-0 blank-1\"><div class=\"exercise\"> <p><strong>Übung</strong><br>Der Ausdruck <code class=\"language-python\">1 &lt; 3</code> gibt <x-blank solution=\"True\" goal=\"blank-0\"></x-blank> zurück, also ein Objekt vom Typ <span class=\"nowrap\"><x-blank solution=\"bool\" goal=\"blank-1\"></x-blank>.</span> </p></div> </x-step>","goals":["blank-0","blank-1"],"keywords":[]},"step-55":{"id":"step-55","title":"Step  ","html":"<x-step id=\"step-55\" goals=\"blank-0\"><div class=\"exercise\"> <p><strong>Übung</strong><br>Wenn wir s = \"Bruno\"<span class=\"math\" data-voice=\"setzen\"><mi>setzen</mi></span>{py}, dann ist <code class=\"language-python\">s[:j] == \"Bru\"</code> für <code class=\"language-python\">j =</code> <span class=\"nowrap\"><x-blank solution=\"3\" goal=\"blank-0\"></x-blank>.</span> </p></div> </x-step>","goals":["blank-0"],"keywords":[]},"conditionals":{"id":"conditionals","title":"Conditionals","html":"<x-step id=\"conditionals\" goals=\"blank-0\"><p>Betrachten wir eine einfache Aufgabe, die von irgendeiner Software am Computer ausgeführt wird, wie z.B. das Hervorheben aller Zeilen in einer Tabelle, die in der dritten Spalte einen Wert größer als 10 haben. Dazu benötigen wir eine neue Funktion die von Programmiersprachen zur Verfügung gestellt wird: wir wollen Code (nämlich den Code, der eine Zeile markiert) nur dann ausführen wenn eine bestimmte Bedingung erfüllt ist, also je nachdem welchen <x-blank-mc goal=\"blank-0\"><button class=\"choice\">bool</button><button class=\"choice\">int</button><button class=\"choice\">float</button></x-blank-mc>-Wert von einem Vergleichsoperator (==, &lt;, &lt;=, ...) zurückgegeben wird. Python stellt zu diesem Zweck <code class=\"language-python\">if</code>-Anweisungen zur Verfügung.</p></x-step>","goals":["blank-0"],"keywords":[]},"step-56":{"id":"step-56","title":"Step  ","html":"<x-step id=\"step-56\" goals=\"next-0\"><h2>Bedingungen</h2><p>Wir können eine <code class=\"language-python\">if</code>-Anweisung verwenden, um verschiedene Blöcke anzugeben, die abhängig vom Wert eines booleschen Ausdrucks ausgeführt werden sollen. <em>Wenn</em> der Wert True ist mache das, <em>sonst</em> (<code class=\"language-python\">else</code>) mache etwas anderes. Die folgende Funktion berechnet beispielsweise das Vorzeichen des eingegebenen Wertes <span class=\"nowrap\"><code class=\"language-python\">x</code>.</span></p><pre python-executable=\"python-executable\">def sgn(x):\n    if x &gt; 0:\n        return +1\n    elif x == 0:\n        return 0\n    else:\n        return -1\n\nsgn(-5)</pre><p><button class=\"next-step\">Weiter</button></p></x-step>","goals":["next-0"],"keywords":[]},"step-57":{"id":"step-57","title":"Step  ","html":"<x-step id=\"step-57\" goals=\"next-0\"><p>Bedingte Ausdrücke können auch als <em>ternäre (dreigeteilte) Bedingungen</em> geschrieben werden.<span class=\"nowrap\"><code class=\"language-python\">«Wahr-Wert» if «Bedingung» else «Falsch-Wert»</code>.</span> Die folgende Version der Funktion <code class=\"language-python\">sgn</code> gibt beispielsweise die gleichen Werte wie die obige zurück, außer für <span class=\"nowrap\"><code class=\"language-python\">x == 0</code>.</span> </p><pre python-executable=\"python-executable\">def sgn(x): \n    return +1 if x &gt; 0 else -1\n\nsgn(-5)</pre><p><button class=\"next-step\">Weiter</button></p></x-step>","goals":["next-0"],"keywords":[]},"step-58":{"id":"step-58","title":"Step  ","html":"<x-step id=\"step-58\" goals=\"blank-0 next-0\"><h2>Übungen</h2><div class=\"exercise\"> <p><strong>Übung</strong><br>Kann der <code class=\"language-python\">else</code> Teil einer <code class=\"language-python\">if</code>-Anweisung weggelassen werden? <x-blank-mc goal=\"blank-0\"><button class=\"choice\">Ja</button><button class=\"choice\">Nein</button></x-blank-mc> Versuche, das folgende Beispiel auszuführen. </p></div> <pre python-executable=\"python-executable\">x = 0.5\nif x &lt; 0: \n    print(\"x is negative\")\nelif x &lt; 1: \n    print(\"x is between 0 and 1\")</pre><p><button class=\"next-step\">Weiter</button></p></x-step>","goals":["blank-0","next-0"],"keywords":[]},"step-59":{"id":"step-59","title":"Step  ","html":"<x-step id=\"step-59\" goals=\"quill\"><div class=\"exercise\"> <p><strong>Übung</strong><br>Schreibe eine Funktion namens <code class=\"language-python\">my_abs</code> , die den Absolutbetrag der eingegebenen Zahl berechnet. Ersetze das Schlüsselwort <code class=\"language-python\">pass</code> durch einen entsprechenden Codeblock.</p></div> <pre python-executable=\"python-executable\">def my_abs(x):\n    pass # hier Code einfügen\n\ndef test_abs():\n    assert my_abs(-3) == 3\n    assert my_abs(5.0) == 5.0\n    assert my_abs(0.0) == 0.0\n    return \"Test erfolgreich ausgeführt!\"\n\ntest_abs()</pre><x-quill goal=\"quill\"></x-quill></x-step>","goals":["quill"],"keywords":[]},"step-60":{"id":"step-60","title":"Step  ","html":"<x-step id=\"step-60\" goals=\"quill\"><div class=\"exercise\"> <p><strong>Übung</strong><br>Schreibe eine Funktion, die den Quadranten (1, 2, 3 oder 4) zurückgibt, in dem sich der Punkt <code class=\"language-python\">(x,y)</code> befindet. Beachte, dass die Quadranten gegen den Uhrzeigersinn nummeriert sind: Der nordöstliche Quadrant ist Quadrant 1, der nordwestliche Quadrant ist 2, und so weiter. Der Einfachheit halber kannst du davon ausgehen, dass sowohl <code class=\"language-python\">x</code> als auch <code class=\"language-python\">y</code> ungleich Null sind.</p><p>Tipp: Dabei solltest du vielleicht verschachtelte <code class=\"language-python\">if...else</code> Blöcke innerhalb eines anderen <code class=\"language-python\">if...else</code> Blocks verwenden. Beachte dabei die unterschiedlichen Einzüge der Blöcke! </p></div> <pre python-executable=\"python-executable\">def quadrant(x,y):\n    pass # hier Code einfügen\n\ndef test_quadrant():\n    assert quadrant(1.0, 2.0) == 1\n    assert quadrant(-13.0, -2) == 3\n    assert quadrant(4, -3) == 4\n    assert quadrant(-2, 6) == 2\n    return \"Tests bestanden!\"\n\ntest_quadrant()</pre><x-quill goal=\"quill\"></x-quill></x-step>","goals":["quill"],"keywords":[]},"step-61":{"id":"step-61","title":"Step  ","html":"<x-step id=\"step-61\" goals=\"\"><p><em>Lösung</em>. Eine mögliche Lösung: </p><pre python-executable=\"python-executable\"> \ndef quadrant(x,y):\n    if x &gt; 0:\n        if y &gt; 0:\n            return 1\n        else:\n            return 4\n    else:\n        if y &gt; 0:\n            return 2\n        else:\n            return 3\n </pre></x-step>","goals":[],"keywords":[]},"functions":{"id":"functions","title":"Functions","html":"<x-step id=\"functions\" goals=\"next-0\"><p><x-gloss xid=\"function\">Funktionen</x-gloss> können verwendet werden, um Code zu organisieren und <em>Aufgaben auszulagern</em>: Sobald eine Funktion geschrieben ist, kann man sich darauf verlassen, dass sie ihre vorgesehene Aufgabe erfüllt, ohne dass der Programmierer darüber nachdenken muss, <em>wie</em> sie das macht. Diese konzeptionelle Hilfe ist entscheidend für das Schreiben von wartbarem Code zur Lösung großer, komplexer Probleme. </p><p><button class=\"next-step\">Weiter</button></p></x-step>","goals":["next-0"],"keywords":[]},"step-62":{"id":"step-62","title":"Step  ","html":"<x-step id=\"step-62\" goals=\"next-0\"><p>Eine gute Faustregel ist, dass eine Funktion ausreichend allgemein sein sollte, um wiederverwendbar zu sein, ohne schon vorhandene Logik zu duplizieren, aber auch so speziell, dass man sie wirklich einsetzen kann. </p><div class=\"exercise\"> <p><strong>Übung</strong><br>Wie könnte das Design des folgenden Codes verbessert werden?</p><pre class=\"language-python\"><code>def loesche_ein_anfangs_leerzeichen(S):\n    if S[0] == \" \":\n        return S[1:]\n    else:\n        return S\n\ndef loesche_zwei_anfangs_leerzeichen(S):\n    if S[0:2] == \"  \":\n        return S[2:]\n    else:\n        return S\n\ndef loesche_drei_anfangs_leerzeichen(S):\n    if S[0:3] == \"  \":\n        return S[3:]\n    else:\n        return S</code></pre></div> <p><button class=\"next-step\">Weiter</button></p></x-step>","goals":["next-0"],"keywords":[]},"step-63":{"id":"step-63","title":"Step  ","html":"<x-step id=\"step-63\" goals=\"next-0\"><p><em>Lösung</em>. Wir sollten eine einzige Funktion haben, um die Anzahl der überflüssigen Leerzeichen am Anfang eines Strings zu entfernen. Das obige Design hat das Problem, dass wir herausfinden müssen, wie viele führende Leerzeichen es gibt, bevor wir die entsprechende Funktion aufrufen können, was bedeutet, dass die meiste Arbeit, die eigentlich von der Funktion ausgeführt werden sollte, schon vor dem Aufruf der Funktion ausgeführt werden muss. Dadurch wird die Auslagerung der Arbeit nicht umgesetzt.</p><p><button class=\"next-step\">Weiter</button></p></x-step>","goals":["next-0"],"keywords":[]},"step-64":{"id":"step-64","title":"Step  ","html":"<x-step id=\"step-64\" goals=\"next-0\"><h2>Argumente</h2><p>Die Objekte, die einer Funktion beim Aufruf übergeben werden, werden als <strong>Argumente</strong> der Funktion bezeichnet. Die Variablen, die die Argumente in der Funktionsdefinition darstellen, werden <strong>Parameter</strong> genannt. Der eingerückte Codeblock, der beim Aufruf der Funktion ausgeführt wird, ist der <strong>Body</strong> der Funktion (Funktionsrumpf).</p><p><button class=\"next-step\">Weiter</button></p></x-step>","goals":["next-0"],"keywords":[]},"step-65":{"id":"step-65","title":"Step  ","html":"<x-step id=\"step-65\" goals=\"blank-0 blank-1\"><div class=\"exercise\"> <p><strong>Übung</strong><br>Im folgenden Codeblock ist <code class=\"language-python\">s</code> ein <span class=\"nowrap\"><x-blank-mc goal=\"blank-0\"><button class=\"choice\">Parameter</button><button class=\"choice\">Argument</button></x-blank-mc>,</span> während <code class=\"language-python\">\"hello\"</code> ein <x-blank-mc goal=\"blank-1\"><button class=\"choice\">Argument</button><button class=\"choice\">Parameter</button></x-blank-mc> ist.</p><pre class=\"language-python\"><code>def dupliziere(s):\n    return s + s\n\ndupliziere(\"hello\")</code></pre></div> </x-step>","goals":["blank-0","blank-1"],"keywords":[]},"step-66":{"id":"step-66","title":"Step  ","html":"<x-step id=\"step-66\" goals=\"next-0\"><p>Wir können Parametern <strong>Standardwerte</strong> zuweisen und für diese Parameter die Argumente dann optional (nicht zwingend) beim Aufruf der Funktion angeben.</p><pre python-executable=\"python-executable\"> \ndef gerade(k, x, d=0):\n    return k * x + d\n\ngerade(2,3) # ergibt 6\ngerade(5,4,d=2) # ergibt 22</pre><p><button class=\"next-step\">Weiter</button></p></x-step>","goals":["next-0"],"keywords":[]},"step-67":{"id":"step-67","title":"Step  ","html":"<x-step id=\"step-67\" goals=\"next-0\"><p>Die Argumente 2, 3, 4 und 5 in diesem Beispiel werden <strong>Positionsargumente</strong> genannt, und <code class=\"language-python\">b=2</code> ist ein <strong>Schlüsselwort-Argument</strong>. </p><p><button class=\"next-step\">Weiter</button></p></x-step>","goals":["next-0"],"keywords":[]},"step-68":{"id":"step-68","title":"Step  ","html":"<x-step id=\"step-68\" goals=\"next-0\"><p>Wenn der Funktionsteil mit einem String-Literal beginnt, wird dieser String als Dokumentation für die Funktion interpretiert. Dieser <strong>DocString</strong> hilft dir und anderen Benutzern deiner Funktionen, schnell festzustellen, wie sie verwendet werden sollen. Auf die Dokumentation einer Funktion kann in einer Python-Sitzung über die Funktion <code class=\"language-python\">help</code>zugegriffen werden. Beispielsweise gibt <code class=\"language-python\">help(print)</code> den DocString für die eingebaute <code class=\"language-python\">print</code>-Funktion aus.</p><p><button class=\"next-step\">Weiter</button></p></x-step>","goals":["next-0"],"keywords":[]},"step-69":{"id":"step-69","title":"Step  ","html":"<x-step id=\"step-69\" goals=\"next-0\"><h2>Anonyme Funktionen</h2><p>Eine Funktion kann definiert werden, ohne ihr einen Namen zu geben. Eine solche Funktion gilt als <em>anonym</em>. Die Python-<x-gloss xid=\"syntax\">Syntax</x-gloss> für anonyme Funktionen verwendet das Schlüsselwort <span class=\"nowrap\"><code class=\"language-python\">lambda</code>.</span> Eine häufige Situation, in der anonyme Funktionen nützlich sein können, ist die Bereitstellung einer Funktion an eine andere als Argument. Zum Beispiel:</p><pre python-executable=\"python-executable\">def mache_drei_mal(f, x):\n    return f(f(f(x)))\n\nmache_drei_mal(lambda x: x*x, 2)</pre><p>Eine Funktion mit mehreren Argumenten funktioniert ähnlich, wobei die Parameter durch Kommas getrennt sind: Der Additionsoperator + könnte folgendermaßen geschrieben werden <span class=\"nowrap\"><code class=\"language-python\">lambda x,y: x + y</code>.</span> </p><p><button class=\"next-step\">Weiter</button></p></x-step>","goals":["next-0"],"keywords":[]},"step-70":{"id":"step-70","title":"Step  ","html":"<x-step id=\"step-70\" goals=\"quill\"><div class=\"exercise\"> <p><strong>Übung</strong><br>Schreibe eine Funktion, die zwei Argumente <code class=\"language-python\">a</code> und <code class=\"language-python\">b</code> und eine Funktion <code class=\"language-python\">f</code> übernimmt und <code class=\"language-python\">a</code> zurückgibt, wenn <code class=\"language-python\">f(a) &lt; f(b)</code> und <code class=\"language-python\">b</code> ansonsten. Verwende dann die anonyme Funktionssyntax, um deine Funktion mit zwei Zahlen und der Negationsfunktion <svg style=\"vertical-align: -0.186ex\" width=\"7.868ex\" height=\"1.505ex\" class=\"mathjax\" viewBox=\"0 -583 3477.6 665\"><title>x\\mapsto -x</title><defs><path id=\"MJX-3369-TEX-I-1D465\" d=\"M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z\"></path><path id=\"MJX-3369-TEX-N-21A6\" d=\"M95 155V109Q95 83 92 73T75 63Q61 63 58 74T54 130Q54 140 54 180T55 250Q55 421 57 425Q61 437 75 437Q88 437 91 428T95 393V345V270H835Q719 357 692 493Q692 494 692 496T691 499Q691 511 708 511H711Q720 511 723 510T729 506T732 497T735 481T743 456Q765 389 816 336T935 261Q944 258 944 250Q944 244 939 241T915 231T877 212Q836 186 806 152T761 85T740 35T732 4Q730 -6 727 -8T711 -11Q691 -11 691 0Q691 7 696 25Q728 151 835 230H95V155Z\"></path><path id=\"MJX-3369-TEX-N-2212\" d=\"M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z\"></path></defs><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><use xlink:href=\"#MJX-3369-TEX-I-1D465\"></use></g><g data-mml-node=\"mo\" transform=\"translate(849.8, 0)\"><use xlink:href=\"#MJX-3369-TEX-N-21A6\"></use></g><g data-mml-node=\"mo\" transform=\"translate(2127.6, 0)\"><use xlink:href=\"#MJX-3369-TEX-N-2212\"></use></g><g data-mml-node=\"mi\" transform=\"translate(2905.6, 0)\"><use xlink:href=\"#MJX-3369-TEX-I-1D465\"></use></g></g></g></svg> aufzurufen. </p></div> <pre python-executable=\"python-executable\"> </pre><x-quill goal=\"quill\"></x-quill></x-step>","goals":["quill"],"keywords":[]},"step-71":{"id":"step-71","title":"Step  ","html":"<x-step id=\"step-71\" goals=\"next-0\"><p><em>Lösung</em>. Eine mögliche Lösung:</p><pre class=\"language-python\"><code>def which_smaller(a, b, f):\n    if f(a) &lt; f(b):\n        return a\n    else:\n        return b\n\nwhich_smaller(4, 6, lambda x: -x)</code></pre><p><button class=\"next-step\">Weiter</button></p></x-step>","goals":["next-0"],"keywords":[]},"step-72":{"id":"step-72","title":"Step  ","html":"<x-step id=\"step-72\" goals=\"quill\"><h2>Gültigkeitsbereich</h2><p>Der <strong>Gültigkeitsbereich</strong> einer Variablen ist der Bereich im Programm, in man sie aufrufen kann. Wenn du beispielsweise <code class=\"language-python\">x</code> in Zeile 413 deiner Datei so definierst, dass es auf <code class=\"language-python\">47</code> gesetzt wird und einen Fehler erhältst, weil du versucht hast, <code class=\"language-python\">x</code> in Zeile 35 zu verwenden, dann besteht das Problem darin, dass die Variable hier noch nicht <em>gültig</em> ist. </p><p>Eine Variable, die im Hauptteil (main body) einer Datei definiert ist, hat <strong>globalen Gültigkeitsbereich</strong>, was bedeutet, dass sie von ihrem Definitionspunkt aus im gesamten Programm sichtbar ist. </p><p>Eine im Funktionsrumpf definierte Variable befindet sich im <strong>lokalen Gültigkeitsbereich</strong> dieser Funktion. Zum Beispiel: </p><pre python-executable=\"python-executable\">def f(x):\n    y = 2\n    return x + y\n\ny</pre><div class=\"exercise\"> <p><strong>Übung</strong><br>Versuche, eine Funktionsdefinition in eine andere zu verschachteln. Sind Variablen im äußeren Funktionsrumpf in der inneren Funktion verfügbar? Wie ist das im umgekehrten Fall?</p></div> <pre python-executable=\"python-executable\">def f():\n    def g():\n        j = 2\n        return i\n    print(j)\n    i = 1\n    return g()\n\nf()</pre><x-quill goal=\"quill\"></x-quill></x-step>","goals":["quill"],"keywords":[]},"step-73":{"id":"step-73","title":"Step  ","html":"<x-step id=\"step-73\" goals=\"next-0\"><p><em>Lösung</em>. Die in der inneren Funktion definierte Variable ist nicht im Gültigkeitsbereich des Funktionsrumpfs der äußeren Funktion, aber die im Funktionsrumpf der äußeren Funktion definierte Variable ist im Gültigkeitsbereich der inneren Funktion.</p><p><button class=\"next-step\">Weiter</button></p></x-step>","goals":["next-0"],"keywords":[]},"step-74":{"id":"step-74","title":"Step  ","html":"<x-step id=\"step-74\" goals=\"blank-0 quill\"><h2>Testen</h2><p>Es wird dringend empfohlen, Tests zu deinen Funktionen zu schreiben und zur Verfügung zu stellen. Damit wird bestätigt, dass sich jede Funktion wie erwartet verhält. Dies ist besonders wichtig, wenn deine Codebasis immer größer wird, da Änderungen in einer Funktion zu Problemen in anderen Funktionen führen können, die sie verwenden. Eine Möglichkeit zum Testen der Funktionen in deiner gesamten Codebasis hilft dir dabei, diese Fehler schnell zu entdecken, bevor sie zu Schäden führen.</p><p>Eine gängige Methode dazu (die du in diesem Kurs bereits mehrfach gesehen hast) ist das Schreiben von Funktionen, deren Namen mit <em><code class=\"language-python\">test_</code></em> beginnen und die <code class=\"language-python\">assert</code>-Anweisungen enthalten. Eine <code class=\"language-python\">assert</code>-Anweisung löst einen Fehler aus, wenn der darauf folgende Ausdruck <code class=\"language-python\">False</code> zurück gibt. Man kann die Testfunktionen direkt ausführen, oder man kann ein Tool wie <a href=\"https://pytest.org\" target=\"_blank\">pytest</a> verwenden, um alle Testfunktionen in der Codebasis zu finden und auszuführen. </p><pre python-executable=\"python-executable\">def space_concat(s,t):\n    \"\"\"\n    Verkettung der Strings s und t, wobei ein Leerzeichen\n    zwischen ihnen eingefügt wird, wenn s mit einem Nicht-Leerzeichen endet\n    und t mit einem Nicht-Leerzeichen beginnt\n    \"\"\"\n    if s[-1] == \" \" or t[0] == \" \":\n        return s + t\n    else:\n        return s + \" \" + t\n\ndef test_space_concat():\n    assert space_concat(\"foo\", \"bar\") == \"foo bar\"\n    assert space_concat(\"foo \", \"bar\") == \"foo bar\"\n\ntest_space_concat()\nspace_concat(\"foo\", \"bar\")</pre><div class=\"exercise\"> <p><strong>Übung</strong><br>Die obigen Testfälle decken nicht die <em>ungünstige</em> Situation ab, dass einer der Strings leer ist. Liefert die Funktion korrekte Werte für diese ungünstigen Fälle? <x-blank-mc goal=\"blank-0\"><button class=\"choice\">Nein</button><button class=\"choice\">Ja</button></x-blank-mc> Füge dafür Testfälle hinzu und verbessere die Funktion so, dass diese bestanden werden.</p></div> <x-quill goal=\"quill\"></x-quill></x-step>","goals":["blank-0","quill"],"keywords":[]},"step-75":{"id":"step-75","title":"Step  ","html":"<x-step id=\"step-75\" goals=\"quill\"><p><em>Lösung</em>. Wir überprüfen ob die Strings leer sind bevor wir die letzten bzw. ersten Zeichen überprüfen. Mit <code class=\"language-python\">or</code> kann das Problem schnell gelöst werden, weil wenn der erste bool-Wert in einer <code class=\"language-python\">or</code> Operation <code class=\"language-python\">True</code> ist, wird der zweite erst gar nicht ausgewertet.</p><pre python-executable=\"python-executable\">def space_concat(s,t):\n    \"\"\"\n    Verkettung der Strings s und t, wobei ein Leerzeichen\n    zwischen ihnen eingefügt wird, wenn s mit einem Nicht-Leerzeichen endet\n    und t mit einem Nicht-Leerzeichen beginnt.\n    \"\"\"\n    if s == \"\" or t == \"\" or s[-1] == \" \" or t[0] == \" \":\n        return s + t\n    else:\n        return s + \" \" + t\n\ndef test_space_concat():\n    assert space_concat(\"foo\", \"bar\") == \"foo bar\"\n    assert space_concat(\"foo \", \"bar\") == \"foo bar\"\n    assert space_concat(\"foo\", \"\") == \"foo\"\n    assert space_concat(\"\", \"bar\") == \"bar\"</pre><h2>Übungen</h2><div class=\"exercise\"> <p><strong>Übung</strong><br>Schreibe eine Funktion, die zwei Strings als Eingabe akzeptiert und die Verkettung dieser beiden Strings in alphabetischer Reihenfolge zurückgibt.</p><p><em>Tipp</em>: Was meinst du, mit welchem Operator Strings alphabetisch verglichen werden können.</p></div> <pre python-executable=\"python-executable\">def alphabetical_concat(s,t):\n    pass # hier Code einfügen\n\ndef test_concat(): \n    assert alphabetical_concat(\"buchstaben\", \"suppe\") == \"buchstabensuppe\"\n    assert alphabetical_concat(\"socken\", \"rote\") == \"rotesocken\"\n    return \"Tests erfolgreich bestanden!\"\n\ntest_concat()</pre><x-quill goal=\"quill\"></x-quill></x-step>","goals":["quill"],"keywords":[]},"step-76":{"id":"step-76","title":"Step  ","html":"<x-step id=\"step-76\" goals=\"\"><p><em>Lösung</em>. </p><pre python-executable=\"python-executable\">def alphabetical_concat(s,t):\n    if s &lt; t:\n        return s + t\n    else:\n        return t + s\n\ndef test_concat(): \n    alphabetical_concat(\"buchstaben\", \"suppe\") == \"buchstabensuppe\"\n    alphabetical_concat(\"food\", \"brain\") == \"brainfood\"\n    return \"Tests passed!\"\n\ntest_concat()</pre></x-step>","goals":[],"keywords":[]},"packages":{"id":"packages","title":"Packages","html":"<x-step id=\"packages\" goals=\"next-0\"><p>Ein <x-gloss xid=\"package\"><strong>Paket</strong></x-gloss> ist eine Sammlung von Python-Dateien, die Funktionen zur Verfügung stellen, die über die Kernfunktionen hinausgehen, die in jedem Python-Programm verfügbar sind. Pakete bewirken eine Trennung der Anliegen auf Gemeindeebene: Jemand anderes löst ein Problem von allgemeinem Interesse, und dann können Sie seine Arbeit nutzen und sich darauf konzentrieren, es auf das anstehende Problem anzuwenden.</p><p>Many Python packages are available in every standard distribution of Python and can be used without having to worry about whether they're installed. These packages make up the <strong>standard library</strong>. To see a list of standard library packages, visit the standard library page of the <a href=\"https://docs.python.org/3/library/\" target=\"_blank\">Python documentation</a>. Here's an example showing how to import the <code class=\"language-python\">math</code> package and use the <code class=\"language-python\">sqrt</code> function it contains: </p><pre python-executable=\"python-executable\">import math\nmath.sqrt(3)</pre><p>Note that we access names like <code class=\"language-python\">sqrt</code> provided by the package using the dot <x-gloss xid=\"syntax\">syntax</x-gloss> <span class=\"nowrap\"><code class=\"language-python\">math.sqrt</code>.</span> This is common practice, and it's a good idea because if functions are called in a way that makes it clear what package they came from, then (1) you can use the same name in multiple packages, and (2) you can easily identify which package that is supplying each function. We can also import individual functions and skip the dot syntax:</p><pre python-executable=\"python-executable\">from math import sqrt\nsqrt(3)</pre><p>Sometimes a package contains a <strong>subpackage</strong> which must itself be accessed with dot syntax:</p><pre python-executable=\"python-executable\">from numpy.random import standard_normal\nstandard_normal()</pre><p><button class=\"next-step\">Continue</button></p></x-step>","goals":["next-0"],"keywords":[]},"step-77":{"id":"step-77","title":"Step  ","html":"<x-step id=\"step-77\" goals=\"quill\"><h2>Scientific computing packages in Python</h2><p>Here are some of the most important scientific computing packages (along with very brief code snippets to give you a sense of what calling the packages looks like in practice): </p><p><strong>NumPy</strong>. Provides multi-dimensional arrays (like vectors, matrices, and higher-order arrays). </p><pre python-executable=\"python-executable\">import numpy as np\nnp.random.standard_normal((5,5)) # randomly fill a 5 × 5 matrix\nnp.full((3,3),7) # make a 3 × 3 matrix full of 7's</pre><p>Note that we import <code class=\"language-python\">numpy</code> with the alias <code class=\"language-python\">np</code> for brevity. </p><p><strong>Pandas</strong>. Provides support for tabular data. </p><pre python-executable=\"python-executable\">import pandas as pd\niris = pd.read_csv(\"http://bit.ly/iris-dataset\")\niris</pre><p><strong>SciPy</strong>. Provides scientific computing tools for optimization, numerical integration, linear algebra, statistics, etc.</p><pre python-executable=\"python-executable\">from scipy.optimize import minimize\nminimize(lambda x: x*(x-1), 1.0) # start from 1 and minimize x(x-1)</pre><p><strong>Matplotlib</strong>. Standard plotting package in Python. (<em>Note</em>: run the cell below twice to get the graph to display.)</p><pre python-executable=\"python-executable\">import matplotlib.pyplot as plt\nimport numpy as np\nplt.plot(np.cumsum(np.random.standard_normal(1000)))</pre><p><strong>SymPy</strong>. Pure math tools like symbolic integration/differentiation, number theory, etc.</p><pre python-executable=\"python-executable\">from sympy import symbols, Eq, solve\nx = symbols(\"x\")\ny = symbols(\"y\")\nsolve([Eq(x + 5*y, 2), Eq(-3*x + 6*y, 15)], [x, y])</pre><p>The example above solves the system of equations:</p><p class=\"text-center\"><svg style=\"vertical-align: -3.507ex\" width=\"14.471ex\" height=\"8.145ex\" class=\"mathjax\" viewBox=\"0 -2050 6396 3600\"><title>\\begin{align*} x + 5y &amp;= 2 \\\\\\\\ -3x + 6y &amp;= 15\\end{align*}</title><defs><path id=\"MJX-3377-TEX-I-1D465\" d=\"M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z\"></path><path id=\"MJX-3377-TEX-N-2B\" d=\"M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z\"></path><path id=\"MJX-3377-TEX-N-35\" d=\"M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z\"></path><path id=\"MJX-3377-TEX-I-1D466\" d=\"M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z\"></path><path id=\"MJX-3377-TEX-N-3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"></path><path id=\"MJX-3377-TEX-N-32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"></path><path id=\"MJX-3377-TEX-N-2212\" d=\"M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z\"></path><path id=\"MJX-3377-TEX-N-33\" d=\"M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z\"></path><path id=\"MJX-3377-TEX-N-36\" d=\"M42 313Q42 476 123 571T303 666Q372 666 402 630T432 550Q432 525 418 510T379 495Q356 495 341 509T326 548Q326 592 373 601Q351 623 311 626Q240 626 194 566Q147 500 147 364L148 360Q153 366 156 373Q197 433 263 433H267Q313 433 348 414Q372 400 396 374T435 317Q456 268 456 210V192Q456 169 451 149Q440 90 387 34T253 -22Q225 -22 199 -14T143 16T92 75T56 172T42 313ZM257 397Q227 397 205 380T171 335T154 278T148 216Q148 133 160 97T198 39Q222 21 251 21Q302 21 329 59Q342 77 347 104T352 209Q352 289 347 316T329 361Q302 397 257 397Z\"></path><path id=\"MJX-3377-TEX-N-31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path></defs><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\"><g data-mml-node=\"math\"><g data-mml-node=\"mtable\"><g data-mml-node=\"mtr\" transform=\"translate(0, 1300)\"><g data-mml-node=\"mtd\" transform=\"translate(1278, 0)\"><g data-mml-node=\"mi\"><use xlink:href=\"#MJX-3377-TEX-I-1D465\"></use></g><g data-mml-node=\"mo\" transform=\"translate(794.2, 0)\"><use xlink:href=\"#MJX-3377-TEX-N-2B\"></use></g><g data-mml-node=\"mn\" transform=\"translate(1794.4, 0)\"><use xlink:href=\"#MJX-3377-TEX-N-35\"></use></g><g data-mml-node=\"mi\" transform=\"translate(2294.4, 0)\"><use xlink:href=\"#MJX-3377-TEX-I-1D466\"></use></g></g><g data-mml-node=\"mtd\" transform=\"translate(4062.4, 0)\"><g data-mml-node=\"mi\"></g><g data-mml-node=\"mo\" transform=\"translate(277.8, 0)\"><use xlink:href=\"#MJX-3377-TEX-N-3D\"></use></g><g data-mml-node=\"mn\" transform=\"translate(1333.6, 0)\"><use xlink:href=\"#MJX-3377-TEX-N-32\"></use></g></g></g><g data-mml-node=\"mtr\" transform=\"translate(0, 0)\"><g data-mml-node=\"mtd\" transform=\"translate(4062.4, 0)\"></g></g><g data-mml-node=\"mtr\" transform=\"translate(0, -1300)\"><g data-mml-node=\"mtd\"><g data-mml-node=\"mo\"><use xlink:href=\"#MJX-3377-TEX-N-2212\"></use></g><g data-mml-node=\"mn\" transform=\"translate(778, 0)\"><use xlink:href=\"#MJX-3377-TEX-N-33\"></use></g><g data-mml-node=\"mi\" transform=\"translate(1278, 0)\"><use xlink:href=\"#MJX-3377-TEX-I-1D465\"></use></g><g data-mml-node=\"mo\" transform=\"translate(2072.2, 0)\"><use xlink:href=\"#MJX-3377-TEX-N-2B\"></use></g><g data-mml-node=\"mn\" transform=\"translate(3072.4, 0)\"><use xlink:href=\"#MJX-3377-TEX-N-36\"></use></g><g data-mml-node=\"mi\" transform=\"translate(3572.4, 0)\"><use xlink:href=\"#MJX-3377-TEX-I-1D466\"></use></g></g><g data-mml-node=\"mtd\" transform=\"translate(4062.4, 0)\"><g data-mml-node=\"mi\"></g><g data-mml-node=\"mo\" transform=\"translate(277.8, 0)\"><use xlink:href=\"#MJX-3377-TEX-N-3D\"></use></g><g data-mml-node=\"mn\" transform=\"translate(1333.6, 0)\"><use xlink:href=\"#MJX-3377-TEX-N-31\"></use><use xlink:href=\"#MJX-3377-TEX-N-35\" transform=\"translate(500, 0)\"></use></g></g></g></g></g></g></svg></p><p>for <svg style=\"vertical-align: -0.025ex\" width=\"1.294ex\" height=\"1.025ex\" class=\"mathjax\" viewBox=\"0 -442 572 453\"><title>x</title><defs><path id=\"MJX-28-TEX-I-1D465\" d=\"M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z\"></path></defs><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><use xlink:href=\"#MJX-28-TEX-I-1D465\"></use></g></g></g></svg> and <span class=\"nowrap\"><svg style=\"vertical-align: -0.464ex\" width=\"1.109ex\" height=\"1.464ex\" class=\"mathjax\" viewBox=\"0 -442 490 647\"><title>y</title><defs><path id=\"MJX-29-TEX-I-1D466\" d=\"M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z\"></path></defs><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><use xlink:href=\"#MJX-29-TEX-I-1D466\"></use></g></g></g></svg>.</span></p><h2>Übungen</h2><div class=\"exercise\"> <p><strong>Exercise</strong><br> To import just the <code class=\"language-python\">arcsin</code> function from <span class=\"nowrap\"><code class=\"language-python\">numpy</code>,</span> we would use what statement? </p></div> <x-quill goal=\"quill\"></x-quill></x-step>","goals":["quill"],"keywords":[]},"step-78":{"id":"step-78","title":"Step  ","html":"<x-step id=\"step-78\" goals=\"next-0\"><p><em>Solution.</em> <code class=\"language-python\">from numpy import arcsin</code></p><p><button class=\"next-step\">Weiter</button></p></x-step>","goals":["next-0"],"keywords":[]},"step-79":{"id":"step-79","title":"Step  ","html":"<x-step id=\"step-79\" goals=\"quill\"><div class=\"exercise\"> <p><strong>Exercise</strong><br> To import <code class=\"language-python\">sympy</code> with alias <span class=\"nowrap\"><code class=\"language-python\">sp</code>,</span> we would use what statement?</p></div> <x-quill goal=\"quill\"></x-quill></x-step>","goals":["quill"],"keywords":[]},"step-80":{"id":"step-80","title":"Step  ","html":"<x-step id=\"step-80\" goals=\"next-0\"><p><em>Solution</em> <code class=\"language-python\">import sympy as sp</code></p><p><button class=\"next-step\">Weiter</button></p></x-step>","goals":["next-0"],"keywords":[]},"step-81":{"id":"step-81","title":"Step  ","html":"<x-step id=\"step-81\" goals=\"quill\"><div class=\"exercise\"> <p><strong>Exercise</strong><br>To import the standard library package <code class=\"language-python\">itertools</code> (with no alias), we would use what statement?</p></div> <x-quill goal=\"quill\"></x-quill></x-step>","goals":["quill"],"keywords":[]},"step-82":{"id":"step-82","title":"Step  ","html":"<x-step id=\"step-82\" goals=\"next-0\"><p><em>Solution</em> <code class=\"language-python\">import itertools</code></p><p><button class=\"next-step\">Weiter</button></p></x-step>","goals":["next-0"],"keywords":[]},"classes":{"id":"classes","title":"Classes","html":"<x-step id=\"classes\" goals=\"next-0\"><p>Viele Python-Funktionen verwenden die übliche Funktions<span class=\"nowrap\"><x-gloss xid=\"syntax\">syntax</x-gloss>,</span> wie <span class=\"nowrap\"><code class=\"language-python\">len(\"hello\")</code>.</span> Viele andere Funktionen werden jedoch mit einer anderen Syntax aufgerufen, wobei zuerst ein <em>Objekt</em> kommt: </p><pre python-executable=\"python-executable\">\"hello\".capitalize()</pre><p>These functions are called <strong>methods</strong>. For example, <code class=\"language-python\">capitalize</code> is a string method. To understand how methods work in the language, it's helpful to see what they look like at the point of definition. </p><p><button class=\"next-step\">Weiter</button></p></x-step>","goals":["next-0"],"keywords":[]},"step-84":{"id":"step-84","title":"Step  ","html":"<x-step id=\"step-84\" goals=\"next-0\"><p>Suppose you want to write a program which keeps track of the albums you own. Each album is associated with several data, like the name of the album, the year it came out, the number of tracks, etc. You could store all these data by assigning them to different variables, but that becomes untidy very quickly. For example, you will frequently want to pass an album to a function, and you don't want that function to require a long list of parameters just because the album has a lot of data associated with it. </p><p><button class=\"next-step\">Weiter</button></p></x-step>","goals":["next-0"],"keywords":[]},"step-85":{"id":"step-85","title":"Step  ","html":"<x-step id=\"step-85\" goals=\"next-0\"><p>What you want is to be able to treat each album as its own Python object, with all its associated data stored inside. In other words, you want an <code class=\"language-python\">Album</code> type. You can do that with the <code class=\"language-python\">class</code> keyword (this block won't return anything): </p><pre python-executable=\"python-executable\">class Album(object):\n    def __init__(self, name, artist, year, length): \n        self.name = name\n        self.artist = artist\n        self.year = year\n        self.length = length\n \n    def numYearsAgo(self, currentYear):\n        \"Return the number of years since album was released\"\n        return currentYear - self.year</pre><p><button class=\"next-step\">Continue</button></p></x-step>","goals":["next-0"],"keywords":[]},"step-86":{"id":"step-86","title":"Step  ","html":"<x-step id=\"step-86\" goals=\"next-0\"><p>A function defined in the block indented below <code class=\"language-python\">class Album(object):</code> is called a <strong>method</strong> of the class <span class=\"nowrap\"><code class=\"language-python\">Album</code>.</span> The <em><code class=\"language-python\">\\_\\_init\\_\\_</code></em> method has a special role: Python calls it whenever <code class=\"language-python\">Album</code> is called as a function to create an <strong>instance</strong> of the class <span class=\"nowrap\"><code class=\"language-python\">Album</code>.</span> </p><pre python-executable=\"python-executable\">A = Album(\"Abbey Road\", \"The Beatles\", 1969, \"47:23\")\nA</pre><p>The first parameter, customarily called <span class=\"nowrap\"><code class=\"language-python\">self</code>,</span> refers to the object being created. The four lines in the init method above assign values to <strong>attributes</strong> which may be accessed later using the dot <span class=\"nowrap\"><x-gloss xid=\"syntax\">syntax</x-gloss>,</span> like <code class=\"language-python\">A.name</code> or <span class=\"nowrap\"><code class=\"language-python\">A.artist</code>.</span> </p><p>Dot syntax is also used to access other methods like <span class=\"nowrap\"><code class=\"language-python\">numYearsAgo</code>.</span></p><pre class=\"language-python\"><code>A.numYearsAgo(2019)</code></pre><p>The object appearing before the dot is implicitly supplied as the first argument to the method. Therefore, <code class=\"language-python\">A.numYearsAgo(2019)</code> at call time corresponds to <code class=\"language-python\">numYearsAgo(A, 2019)</code> at the point of definition. In fact, you can use the latter syntax if you want, because methods are also accessible using dot syntax on the class name: <span class=\"nowrap\"><code class=\"language-python\">Album.numYearsAgo(A, 2019)</code>.</span> </p><div class=\"exercise\"> <p><strong>Exercise</strong><br>Confirm that <code class=\"language-python\">\"hello\".capitalize()</code> does give the same value as <span class=\"nowrap\"><code class=\"language-python\">str.capitalize(\"hello\")</code>.</span> </p></div> <pre python-executable=\"python-executable\"> </pre><p><button class=\"next-step\">Weiter</button></p></x-step>","goals":["next-0"],"keywords":[]},"step-87":{"id":"step-87","title":"Step  ","html":"<x-step id=\"step-87\" goals=\"blank-0\"><div class=\"exercise\"> <p><strong>Exercise</strong><br>In the expression <span class=\"nowrap\"><code class=\"language-python\">\"\".join(\"hello\")</code>,</span> the method <code class=\"language-python\">join</code> has <x-blank-mc goal=\"blank-0\"><button class=\"choice\">2</button><button class=\"choice\">1</button><button class=\"choice\">0</button><button class=\"choice\">3</button></x-blank-mc> arguments. </p></div> </x-step>","goals":["blank-0"],"keywords":[]},"step-88":{"id":"step-88","title":"Step  ","html":"<x-step id=\"step-88\" goals=\"next-0\"><p><em>Lösung</em>. There are two arguments: the first is the empty string, and the second is <span class=\"nowrap\"><code class=\"language-python\">\"hello\"</code>.</span> </p><p><button class=\"next-step\">Weiter</button></p></x-step>","goals":["next-0"],"keywords":[]},"step-89":{"id":"step-89","title":"Step  ","html":"<x-step id=\"step-89\" goals=\"quill\"><div class=\"exercise\"> <p><strong>Exercise</strong><br>Implement a class called <code class=\"language-python\">Fraction</code> which represents a ratio of two positive integers. You should reduce the fraction in your <em><code class=\"language-python\">\\_\\_init\\_\\_</code></em> method. Your <code class=\"language-python\">Fraction</code> type should include a method called <code class=\"language-python\">\\_\\_add\\_\\_</code> which adds two fractions and an <code class=\"language-python\">\\_\\_eq\\_\\_</code> which checks whether two fractions are equal. (These methods will be automatically used by the addition and equality operators.)</p></div> <pre python-executable=\"python-executable\">from  math import gcd\n# add code here\n \ndef test_Fraction():\n    assert Fraction(1,2) + Fraction(1,3) == Fraction(5,6)\n    assert Fraction(2,4) + Fraction(4,8) == Fraction(3,3)\n    return \"Test passed!\"\n\ntest_Fraction()</pre><x-quill goal=\"quill\"></x-quill></x-step>","goals":["quill"],"keywords":[]},"step-90":{"id":"step-90","title":"Step  ","html":"<x-step id=\"step-90\" goals=\"\"><p><em>Lösung</em>. We divide by the gcd in the init method, and we define the other two methods according to the rules of arithmetic:</p><pre python-executable=\"python-executable\">from math import gcd\n\nclass Fraction(object):\n    def __init__(self, num, denom):\n        d = gcd(num, denom)\n        self.num = num//d\n        self.denom = denom//d\n  \n    def __add__(self, other):\n        return Fraction(self.num * other.denom + self.denom * other.num, \n                       self.denom * other.denom)\n     \n    def __eq__(self, other):\n        return self.num == other.num and self.denom == other.denom\n\ndef test_Fraction():\n    assert Fraction(1,2) + Fraction(1,3) == Fraction(5,6)\n    assert Fraction(2,4) + Fraction(4,8) == Fraction(3,3)\n    return \"Test passed!\"\n\ntest_Fraction()</pre></x-step>","goals":[],"keywords":[]},"lists-and-tuples":{"id":"lists-and-tuples","title":"Lists And Tuples","html":"<x-step id=\"lists-and-tuples\" goals=\"next-0\"><p>Let's revisit the spreadsheet example we discussed earlier: suppose you're writing a spreadsheet application and you want to introduce some functionality for highlighting every row whose third-column value is greater than 10: </p><table><tbody><tr><td><div class=\"pill grey\">20</div></td><td><div class=\"pill grey\">16</div></td><td><div class=\"pill grey\">2</div></td><td><div class=\"pill grey\">1</div></td><td><div class=\"pill grey\">19</div></td></tr><tr><td><div class=\"pill blue\">9</div></td><td><div class=\"pill blue\">12</div></td><td><div class=\"pill blue\">15</div></td><td><div class=\"pill blue\">1</div></td><td><div class=\"pill blue\">19</div></td></tr><tr><td><div class=\"pill grey\">7</div></td><td><div class=\"pill grey\">2</div></td><td><div class=\"pill grey\">1</div></td><td><div class=\"pill grey\">15</div></td><td><div class=\"pill grey\">4</div></td></tr><tr><td><div class=\"pill blue\">19</div></td><td><div class=\"pill blue\">6</div></td><td><div class=\"pill blue\">16</div></td><td><div class=\"pill blue\">4</div></td><td><div class=\"pill blue\">7</div></td></tr><tr><td><div class=\"pill grey\">3</div></td><td><div class=\"pill grey\">14</div></td><td><div class=\"pill grey\">3</div></td><td><div class=\"pill grey\">1</div></td><td><div class=\"pill grey\">1</div></td></tr><tr><td><div class=\"pill blue\">16</div></td><td><div class=\"pill blue\">5</div></td><td><div class=\"pill blue\">15</div></td><td><div class=\"pill blue\">6</div></td><td><div class=\"pill blue\">6</div></td></tr><tr><td><div class=\"pill grey\">14</div></td><td><div class=\"pill grey\">9</div></td><td><div class=\"pill grey\">7</div></td><td><div class=\"pill grey\">18</div></td><td><div class=\"pill grey\">15</div></td></tr><tr><td><div class=\"pill grey\">15</div></td><td><div class=\"pill grey\">9</div></td><td><div class=\"pill grey\">3</div></td><td><div class=\"pill grey\">9</div></td><td><div class=\"pill grey\">16</div></td></tr><tr><td><div class=\"pill blue\">13</div></td><td><div class=\"pill blue\">6</div></td><td><div class=\"pill blue\">13</div></td><td><div class=\"pill blue\">10</div></td><td><div class=\"pill blue\">20</div></td></tr><tr><td><div class=\"pill grey\">10</div></td><td><div class=\"pill grey\">14</div></td><td><div class=\"pill grey\">5</div></td><td><div class=\"pill grey\">8</div></td><td><div class=\"pill grey\">8</div></td></tr><tr><td><div class=\"pill blue\">4</div></td><td><div class=\"pill blue\">13</div></td><td><div class=\"pill blue\">16</div></td><td><div class=\"pill blue\">15</div></td><td><div class=\"pill blue\">9</div></td></tr><tr><td><div class=\"pill grey\">16</div></td><td><div class=\"pill grey\">9</div></td><td><div class=\"pill grey\">4</div></td><td><div class=\"pill grey\">14</div></td><td><div class=\"pill grey\">1</div></td></tr><tr><td><div class=\"pill grey\">17</div></td><td><div class=\"pill grey\">9</div></td><td><div class=\"pill grey\">4</div></td><td><div class=\"pill grey\">3</div></td><td><div class=\"pill grey\">8</div></td></tr><tr><td><div class=\"pill grey\">2</div></td><td><div class=\"pill grey\">6</div></td><td><div class=\"pill grey\">4</div></td><td><div class=\"pill grey\">6</div></td><td><div class=\"pill grey\">14</div></td></tr><tr><td><div class=\"pill blue\">15</div></td><td><div class=\"pill blue\">8</div></td><td><div class=\"pill blue\">14</div></td><td><div class=\"pill blue\">3</div></td><td><div class=\"pill blue\">14</div></td></tr><tr><td><div class=\"pill grey\">14</div></td><td><div class=\"pill grey\">19</div></td><td><div class=\"pill grey\">8</div></td><td><div class=\"pill grey\">17</div></td><td><div class=\"pill grey\">10</div></td></tr><tr><td><div class=\"pill grey\">18</div></td><td><div class=\"pill grey\">8</div></td><td><div class=\"pill grey\">9</div></td><td><div class=\"pill grey\">5</div></td><td><div class=\"pill grey\">9</div></td></tr><tr><td><div class=\"pill grey\">4</div></td><td><div class=\"pill grey\">4</div></td><td><div class=\"pill grey\">5</div></td><td><div class=\"pill grey\">5</div></td><td><div class=\"pill grey\">8</div></td></tr><tr><td><div class=\"pill grey\">11</div></td><td><div class=\"pill grey\">8</div></td><td><div class=\"pill grey\">1</div></td><td><div class=\"pill grey\">14</div></td><td><div class=\"pill grey\">2</div></td></tr><tr><td><div class=\"pill blue\">12</div></td><td><div class=\"pill blue\">11</div></td><td><div class=\"pill blue\">13</div></td><td><div class=\"pill blue\">19</div></td><td><div class=\"pill blue\">7</div></td></tr></tbody></table><p>We definitely don't want to think of 100 variable names for the 100 values in the table, and we don't want to write a line of code for each row. What we need is a way to store all of the rows (or columns) in an object designed to contain many objects. Python provides several such <strong>compound data structures</strong>, and in this section we will learn about two: <strong>Listen</strong> und <strong>Tupel</strong>. </p><p><button class=\"next-step\">Weiter</button></p></x-step>","goals":["next-0"],"keywords":[]},"step-91":{"id":"step-91","title":"Step  ","html":"<x-step id=\"step-91\" goals=\"blank-0\"><h2>Listen</h2><p>A <code class=\"language-python\">list</code> in Python is a compound data type for storing a finite ordered sequence of Python objects. Lists are <strong>mutable</strong>, meaning that they can be changed.</p><p>The simplest way to produce a list in a Python program is with a <strong>list literal</strong>, which requires listing the objects separated by commas and delimited by square brackets: </p><pre python-executable=\"python-executable\">myList = [1, \"flower\", True, 7]\nx = 5\nmyOtherList = [1, x, x, 2]\nmyOtherList</pre><div class=\"exercise\"> <p><strong>Exercise</strong><br>What happens to <code class=\"language-python\">myOtherList</code> in the example above if a different value is assigned to <code class=\"language-python\">x</code> <em>after</em> <code class=\"language-python\">myOtherList</code> is created? <x-blank-mc goal=\"blank-0\"><button class=\"choice\">the list doesn't change</button><button class=\"choice\">the list changes</button></x-blank-mc></p></div> </x-step>","goals":["blank-0"],"keywords":[]},"step-92":{"id":"step-92","title":"Step  ","html":"<x-step id=\"step-92\" goals=\"next-0\"><p><em>Lösung</em>. The list doesn't change. The object associated with the variable <code class=\"language-python\">x</code> is retrieved when the list is created, and after that point the list is no longer connected to the name <span class=\"nowrap\"><code class=\"language-python\">x</code>.</span> </p><p><button class=\"next-step\">Weiter</button></p></x-step>","goals":["next-0"],"keywords":[]},"step-93":{"id":"step-93","title":"Step  ","html":"<x-step id=\"step-93\" goals=\"next-0\"><p>Like strings, lists can be <strong>indexed</strong> to obtain their elements. Indexes in Python begin at 0: </p><pre python-executable=\"python-executable\">myList = [1, \"flower\", True, 7]\nmyList[0] # returns 1\nmyList[3] # returns 7</pre><p><button class=\"next-step\">Continue</button></p></x-step>","goals":["next-0"],"keywords":[]},"step-94":{"id":"step-94","title":"Step  ","html":"<x-step id=\"step-94\" goals=\"blank-0\"><p>Negative indices can be used to count from the end:</p><pre python-executable=\"python-executable\">myList = [1, \"flower\", True, 7]\ni = -2\nmyList[i]</pre><p>If we set <code class=\"language-python\">i</code> to the negative number <span class=\"nowrap\"><x-blank solution=\"-3\" goal=\"blank-0\"></x-blank>,</span> then <code class=\"language-python\">myList[i]</code> would return <span class=\"nowrap\"><code class=\"language-python\">\"flower\"</code>.</span> </p></x-step>","goals":["blank-0"],"keywords":[]},"step-95":{"id":"step-95","title":"Step  ","html":"<x-step id=\"step-95\" goals=\"blank-0 blank-1\"><p>Sublists can be extracted by <strong>slicing</strong>. Indexing a list with <code class=\"language-python\">[i:j]</code> returns the portion of the list from the <span class=\"math\" data-voice=\"_i_\"><mi>i</mi></span>th element to the <span class=\"math\" data-voice=\"_j_ minus 1\"><mfenced open=\"(\" close=\")\"><mi>j</mi><mo value=\"−\">−</mo><mn>1</mn></mfenced></span>st element. </p><pre python-executable=\"python-executable\">myList = [1, \"flower\", True, 7]\nmyList[0:2]</pre><div class=\"exercise\"> <p><strong>Exercise</strong><br>If <code class=\"language-python\">i</code> = <x-blank solution=\"1\" goal=\"blank-0\"></x-blank> and <code class=\"language-python\">j</code> = <span class=\"nowrap\"><x-blank solution=\"3\" goal=\"blank-1\"></x-blank>,</span> then <code class=\"language-python\">myList[i:j]</code> is equal to <span class=\"nowrap\"><code class=\"language-python\">[\"flower\", True]</code>.</span> </p></div></x-step>","goals":["blank-0","blank-1"],"keywords":[]},"step-96":{"id":"step-96","title":"Step  ","html":"<x-step id=\"step-96\" goals=\"next-0\"><p>The start or stop value of a slice can be omitted, in which case it defaults to the beginning or end of the list, respectively. </p><pre python-executable=\"python-executable\">L = list(range(10,20)) # returns [10,11,12,...,19]\nL[2:] # returns [12,13,...,20]\nL[:4] # returns [10,11,12,13]</pre><p><button class=\"next-step\">Continue</button></p></x-step>","goals":["next-0"],"keywords":[]},"step-97":{"id":"step-97","title":"Step  ","html":"<x-step id=\"step-97\" goals=\"next-0\"><p>Slices can include a <em>step</em> value after a second colon. For example, <em><code class=\"language-python\">L[1:<img class=\"emoji\" width=\"20\" height=\"20\" src=\"https://static.mathigon.org/emoji/10.png\" alt=\"10\">:2]</code></em> returns the elements of <code class=\"language-python\">L</code> at positions 1, 3, 5, 7, and 9. The step value is often used with omitted start and stop values: </p><pre python-executable=\"python-executable\">list(range(100, 200))[::2]</pre><p><button class=\"next-step\">Continue</button></p></x-step>","goals":["next-0"],"keywords":[]},"step-98":{"id":"step-98","title":"Step  ","html":"<x-step id=\"step-98\" goals=\"blank-0 next-0\"><div class=\"exercise\"> <p><strong>Exercise</strong><br>What step value can be used to <em>reverse</em> a list? <x-blank solution=\"-1\" goal=\"blank-0\"></x-blank> (Hint: you can reason it out!)</p></div> <pre python-executable=\"python-executable\">[2,4,6,8][::k]</pre><p><button class=\"next-step\">Weiter</button></p></x-step>","goals":["blank-0","next-0"],"keywords":[]},"step-99":{"id":"step-99","title":"Step  ","html":"<x-step id=\"step-99\" goals=\"next-0\"><p><em>Lösung</em>. Going in reverse order through a list corresponds to stepping by <svg style=\"vertical-align: -0.186ex\" width=\"2.891ex\" height=\"1.692ex\" class=\"mathjax\" viewBox=\"0 -666 1278 748\"><title>-1</title><defs><path id=\"MJX-224-TEX-N-2212\" d=\"M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z\"></path><path id=\"MJX-224-TEX-N-31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path></defs><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\"><g data-mml-node=\"math\"><g data-mml-node=\"mo\"><use xlink:href=\"#MJX-224-TEX-N-2212\"></use></g><g data-mml-node=\"mn\" transform=\"translate(778, 0)\"><use xlink:href=\"#MJX-224-TEX-N-31\"></use></g></g></g></svg> each time. Setting <code class=\"language-python\">k = -1</code> in the code block above, we see that <code class=\"language-python\">[::-1]</code> does indeed reverse the list. Apparently the start and stop values for a list <code class=\"language-python\">L</code> implicitly are implicitly set to <code class=\"language-python\">-1</code> and <code class=\"language-python\">-len(L)</code> when a negative step value is used. </p><p><button class=\"next-step\">Weiter</button></p></x-step>","goals":["next-0"],"keywords":[]},"step-100":{"id":"step-100","title":"Step  ","html":"<x-step id=\"step-100\" goals=\"quill\"><p>Like strings, lists can be concatenated with the <code class=\"language-python\">+</code> operator. </p><pre python-executable=\"python-executable\">[1,2,3] + [4,5,6,7]</pre><div class=\"exercise\"> <p><strong>Exercise</strong><br>Write a <x-gloss xid=\"function\">function</x-gloss> which takes as arguments a list <code class=\"language-python\">L</code> and a positive integer <code class=\"language-python\">n</code> and rotates <code class=\"language-python\">L</code> by <code class=\"language-python\">n</code> positions. In other words, every element of the list should move forward <code class=\"language-python\">n</code> positions, wrapping around to the beginning if it goes off the end of the list. </p></div> <pre python-executable=\"python-executable\">def rotate(L, n):\n    \"Cyclically shift the elements of L by n positions\"\n    # add code here\n\ndef test_rotate():\n    assert rotate([1,2,3],1) == [3,1,2]\n    assert rotate([1,2,3],2) == [2,3,1]      \n    assert rotate([1,2,3,4,5],8) == [3,4,5,1,2]\n    return \"Tests passed!\"\n\ntest_rotate()</pre><x-quill goal=\"quill\"></x-quill></x-step>","goals":["quill"],"keywords":[]},"step-101":{"id":"step-101","title":"Step  ","html":"<x-step id=\"step-101\" goals=\"next-0\"><p><em>Lösung</em>. We figure out where the list needs to be split and concatenate the two resulting sublists in the opposite order:</p><pre python-executable=\"python-executable\">def rotate(L, n):\n    \"Cyclically shift the elements of L by n positions\"\n    k = len(L) - n % len(L)\n    return L[k:] + L[:k]</pre><p><button class=\"next-step\">Weiter</button></p></x-step>","goals":["next-0"],"keywords":[]},"step-102":{"id":"step-102","title":"Step  ","html":"<x-step id=\"step-102\" goals=\"quill\"><p>Lists may be modified by combining indexing with assignment:</p><pre python-executable=\"python-executable\">L = [4,-3,2]\nL[0] = 1\nL[1:3] = [6,3]\nL</pre><div class=\"exercise\"> <p><strong>Exercise</strong><br>Write a line of code which sets every even-indexed entry of a list <code class=\"language-python\">L</code> to zero. Note that you can get a list of <code class=\"language-python\">n</code> zeros with <span class=\"nowrap\"><code class=\"language-python\">[0] * n</code>.</span></p></div> <pre python-executable=\"python-executable\">L = list(range(100))</pre><x-quill goal=\"quill\"></x-quill></x-step>","goals":["quill"],"keywords":[]},"step-103":{"id":"step-103","title":"Step  ","html":"<x-step id=\"step-103\" goals=\"next-0\"><p><em>Lösung</em>. <code class=\"language-python\">L[::2] = [0] * (len(L)//2)</code></p><p><button class=\"next-step\">Weiter</button></p></x-step>","goals":["next-0"],"keywords":[]},"step-104":{"id":"step-104","title":"Step  ","html":"<x-step id=\"step-104\" goals=\"quill\"><p>The <code class=\"language-python\">list</code> class has 11 ordinary <x-gloss xid=\"method\">methods</x-gloss> (that is, methods that don't have the double underscores in the name):</p><pre python-executable=\"python-executable\">L = [1,2,3]\nL.append(4) # add an element to the end\nL.clear() # remove all items from list\nL.copy() # return a copy of the list\nL.extend([5,6,7]) # add elements to the end\nL.index(6) # find index of list entry\nL.insert(3,\"hey\") # insert object before index\nL.pop(index=1) # remove object at given index\nL.remove(\"hey\") # remove first occurrence of \"hey\"\nL.reverse()\nL.sort()</pre><p>If you forget these methods, you can access them in an interactive session by running <span class=\"nowrap\"><code class=\"language-python\">dir(list)</code>.</span> </p><p>Note that each of these methods changes the list <span class=\"nowrap\"><code class=\"language-python\">L</code>.</span> They do not return a new list: </p><pre python-executable=\"python-executable\">L = [1,2,3]\nreturn_val = L.reverse()\nprint(type(return_val))\nprint(L)</pre><div class=\"exercise\"> <p><strong>Exercise</strong><br>Explain the errors in the code below (there are two). </p><pre class=\"language-python\"><code>def remove_fives(L):\n    \"Removes instances of 5 from a list\"\n    return L.remove(\"5\")\n\nprint(remove_fives([\"1\", \"5\", \"5\", \"10\"]))    </code></pre></div> <x-quill goal=\"quill\"></x-quill></x-step>","goals":["quill"],"keywords":[]},"step-105":{"id":"step-105","title":"Step  ","html":"<x-step id=\"step-105\" goals=\"next-0\"><p><em>Lösung</em>. The <code class=\"language-python\">remove</code> method only removes one instances of <code class=\"language-python\">\"5\"</code> (the first one). Also, this method modifies the argument supplied to the function; it does not return new list with the <code class=\"language-python\">\"5\"</code> removed.</p><p><button class=\"next-step\">Weiter</button></p></x-step>","goals":["next-0"],"keywords":[]},"step-106":{"id":"step-106","title":"Step  ","html":"<x-step id=\"step-106\" goals=\"next-0\"><h2>List comprehensions</h2><p>Two of the most common ways of generating one list from another are (1) applying a given function to every element of the original list, and (2) retaining only those elements of the original list which satisfy a given criterion. These two operations are called <strong>map</strong> and <strong>filter</strong>, respectively. </p><pre class=\"language-python\"><code>def square(x):\n    return x*x\n\nlist(map(square, range(5))) # returns [0, 1, 4, 9, 16]\n\ndef iseven(x):\n    return x % 2 == 0      \n\nlist(filter(iseven, range(5))) # returns [0,2,4]</code></pre><p>The extra calls to <code class=\"language-python\">list</code> in the examples above are required to see the result because <code class=\"language-python\">map</code> and <code class=\"language-python\">filter</code> are <em>lazy</em>: they return objects which <em>promise</em> to perform the specified calculation when it's needed. </p><p>Python provides a convenient <x-gloss xid=\"syntax\">syntax</x-gloss> for both mapping <em>and</em> filtering: the <strong>list comprehension</strong>. It's essentially a programming version of set builder notation. For example, to square the even numbers from 0 to 4, we can use the following expression: </p><pre python-executable=\"python-executable\">[x**2 for x in range(5) if x % 2 == 0]</pre><p><button class=\"next-step\">Weiter</button></p></x-step>","goals":["next-0"],"keywords":[]},"step-107":{"id":"step-107","title":"Step  ","html":"<x-step id=\"step-107\" goals=\"quill\"><p>Let's break this example down step-by-step: the first value of <code class=\"language-python\">range(5)</code> is assigned to the variable <span class=\"nowrap\"><code class=\"language-python\">x</code>,</span> and then the <code class=\"language-python\">if</code> expression is evaluated. If it's true, the expression <code class=\"language-python\">x**2</code> is evaluated and stored as the first value of the list that is to be returned. Then the second value of <code class=\"language-python\">range(5)</code> is assigned to <span class=\"nowrap\"><code class=\"language-python\">x</code>,</span> the condition is evaluated, and so on. </p><div class=\"exercise\"> <p><strong>Exercise</strong><br>Write a list comprehension which returns a list whose kth entry is the last digit of the kth three-digit prime number.</p></div> <pre python-executable=\"python-executable\">from sympy import isprime</pre><x-quill goal=\"quill\"></x-quill></x-step>","goals":["quill"],"keywords":[]},"step-108":{"id":"step-108","title":"Step  ","html":"<x-step id=\"step-108\" goals=\"next-0\"><p><em>Lösung</em>. Eine mögliche Lösung:</p><pre python-executable=\"python-executable\">from sympy import isprime\n[str(k)[-1] for k in range(100,1000) if isprime(k)]</pre><p><button class=\"next-step\">Weiter</button></p></x-step>","goals":["next-0"],"keywords":[]},"step-109":{"id":"step-109","title":"Step  ","html":"<x-step id=\"step-109\" goals=\"quill\"><div class=\"exercise\"> <p><strong>Exercise</strong><br>Write a list comprehension which takes a list of lists and returns only those lists whose second element has a least five elements. </p></div> <pre python-executable=\"python-executable\">records = [[3, \"flower\", -1], [2, \"rise\", 3], [0, \"basket\", 0]]</pre><x-quill goal=\"quill\"></x-quill></x-step>","goals":["quill"],"keywords":[]},"step-110":{"id":"step-110","title":"Step  ","html":"<x-step id=\"step-110\" goals=\"next-0\"><p><em>Lösung</em>. Here's one solution:</p><pre python-executable=\"python-executable\">[record for record in records if len(record[1]) &gt;= 5]</pre><p><button class=\"next-step\">Weiter</button></p></x-step>","goals":["next-0"],"keywords":[]},"step-111":{"id":"step-111","title":"Step  ","html":"<x-step id=\"step-111\" goals=\"next-0\"><h2>Tupel</h2><p>Tuples are very similar to lists, except that tuples are <span class=\"nowrap\"><x-gloss xid=\"immutable\">immutable</x-gloss>.</span></p><pre python-executable=\"python-executable\"> \nrow = (22,2.0,\"tomato\")\nrow[2] # returns \"tomato\"\nrow[2] = \"squash\" # throws TypeError</pre><p>Programmers tend to use tuples instead of lists in situations where <strong>position</strong> in the tuple carries more meaning than <strong>order</strong>. For example, perhaps the tuple assigned to <code class=\"language-python\">row</code> above describes a row of plants in a garden, with the three numbers indicating the number of plants, the number of weeks since they were planted, and the type of plant. We could have chosen some other order for those three values, as long as we're consistent about which position corresponds to which value. By contrast, the 22 heights of the plants on that row would typically be stored in a <em>list</em>, since the list order corresponds to something meaningful in that case (namely, the order of the plants in the row).</p><p><button class=\"next-step\">Weiter</button></p></x-step>","goals":["next-0"],"keywords":[]},"step-112":{"id":"step-112","title":"Step  ","html":"<x-step id=\"step-112\" goals=\"next-0\"><p>Functions often return multiple values by returning a tuple containing those values. You can access individual elements of a tuple without having to index the tuple using <em>tuple unpacking</em>: </p><pre python-executable=\"python-executable\"> \nmycolor = (1.0,1.0,0.44)\nr, g, b = mycolor\nb </pre><p>The convention in Python for values you don't want to store is to assign them to the variable whose name is just an underscore. That way you don't have to think of names for those variables, and you signal to anyone reading your code that you are not using those values.</p><p><button class=\"next-step\">Weiter</button></p></x-step>","goals":["next-0"],"keywords":[]},"step-113":{"id":"step-113","title":"Step  ","html":"<x-step id=\"step-113\" goals=\"quill\"><p>Tuple unpacking can be combined with list comprehension syntax. If we want to extract the first element from each tuple in a list of triples, for example, we can do that as follows:</p><pre python-executable=\"python-executable\">L = [(1,2,3),(4,5,6),(7,8,9)]\n[a for (a,_,_) in L]</pre><p>The value 1 is assigned to <span class=\"nowrap\"><code class=\"language-python\">a</code>,</span> the value 2 is assigned to the underscore variable, and then the value 3 is also assigned to the underscore variable (this overwrite is no problem since we aren't using that value anyway). Then <code class=\"language-python\">a</code> is evaluated as the first element in the new list, and the process repeats for the remaining triples in the list.</p><div class=\"exercise\"> <p><strong>Exercise</strong><br>Write a list comprehension which adds the first two elements of each tuple in <span class=\"nowrap\"><code class=\"language-python\">L</code>.</span> (So for the example above, the resulting list should be <span class=\"nowrap\"><code class=\"language-python\">[3, 9, 15]</code>.</span>)</p></div> <pre python-executable=\"python-executable\"> </pre><x-quill goal=\"quill\"></x-quill></x-step>","goals":["quill"],"keywords":[]},"step-114":{"id":"step-114","title":"Step  ","html":"<x-step id=\"step-114\" goals=\"next-0\"><p><em>Lösung</em>. Same idea: </p><pre python-executable=\"python-executable\">L = [(1,2,3),(4,5,6),(7,8,9)]\n[a+b for (a,b,_) in L]</pre><p><button class=\"next-step\">Weiter</button></p></x-step>","goals":["next-0"],"keywords":[]},"step-115":{"id":"step-115","title":"Step  ","html":"<x-step id=\"step-115\" goals=\"quill\"><div class=\"exercise\"> <p><strong>Exercise</strong><br>The fractional part of a positive real number <svg style=\"vertical-align: -0.025ex\" width=\"1.294ex\" height=\"1.025ex\" class=\"mathjax\" viewBox=\"0 -442 572 453\"><title>x</title><defs><path id=\"MJX-28-TEX-I-1D465\" d=\"M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z\"></path></defs><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><use xlink:href=\"#MJX-28-TEX-I-1D465\"></use></g></g></g></svg> is the part after the decimal point: it's defined to be the positive difference between <svg style=\"vertical-align: -0.025ex\" width=\"1.294ex\" height=\"1.025ex\" class=\"mathjax\" viewBox=\"0 -442 572 453\"><title>x</title><defs><path id=\"MJX-28-TEX-I-1D465\" d=\"M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z\"></path></defs><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><use xlink:href=\"#MJX-28-TEX-I-1D465\"></use></g></g></g></svg> and the greatest integer which is less than or equal to <span class=\"nowrap\"><svg style=\"vertical-align: -0.025ex\" width=\"1.294ex\" height=\"1.025ex\" class=\"mathjax\" viewBox=\"0 -442 572 453\"><title>x</title><defs><path id=\"MJX-28-TEX-I-1D465\" d=\"M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z\"></path></defs><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><use xlink:href=\"#MJX-28-TEX-I-1D465\"></use></g></g></g></svg>.</span> You can find the fractional part of <code class=\"language-python\">x</code> in Python with the expression <span class=\"nowrap\"><code class=\"language-python\">x - int(x)</code>.</span> </p><p>Find the fractional parts of the first 100 positive integer multiples of <span class=\"nowrap\"><svg style=\"vertical-align: -0.025ex\" width=\"1.29ex\" height=\"1ex\" class=\"mathjax\" viewBox=\"0 -431 570 442\"><title>\\pi</title><defs><path id=\"MJX-139-TEX-I-1D70B\" d=\"M132 -11Q98 -11 98 22V33L111 61Q186 219 220 334L228 358H196Q158 358 142 355T103 336Q92 329 81 318T62 297T53 285Q51 284 38 284Q19 284 19 294Q19 300 38 329T93 391T164 429Q171 431 389 431Q549 431 553 430Q573 423 573 402Q573 371 541 360Q535 358 472 358H408L405 341Q393 269 393 222Q393 170 402 129T421 65T431 37Q431 20 417 5T381 -10Q370 -10 363 -7T347 17T331 77Q330 86 330 121Q330 170 339 226T357 318T367 358H269L268 354Q268 351 249 275T206 114T175 17Q164 -11 132 -11Z\"></path></defs><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><use xlink:href=\"#MJX-139-TEX-I-1D70B\"></use></g></g></g></svg>.</span> Use the function <code class=\"language-python\">extrema</code> (defined below) on the resulting array to find its least and greatest values. Find the ratio of the greatest value to the least. </p></div> <pre python-executable=\"python-executable\">from numpy import pi\n \ndef extrema(L):\n    \"Return (min,max) of L\"\n    m = L[0]\n    M = L[0]\n    for element in L:\n        if element &gt; M:\n            M = element\n        elif element &lt; m:\n            m = element\n    return (m,M)</pre><x-quill goal=\"quill\"></x-quill></x-step>","goals":["quill"],"keywords":[]},"step-116":{"id":"step-116","title":"Step  ","html":"<x-step id=\"step-116\" goals=\"next-0\"><p><em>Lösung</em>. We use tuple unpacking to extract the min and max values from the tuple returned by the <code class=\"language-python\">extrema</code> function.</p><pre python-executable=\"python-executable\">m,M = extrema([pi*k-int(pi*k) for k in range(1,101)])\nM/m</pre><p>The result is about 56.08. </p><p><button class=\"next-step\">Weiter</button></p></x-step>","goals":["next-0"],"keywords":[]},"step-117":{"id":"step-117","title":"Step  ","html":"<x-step id=\"step-117\" goals=\"quill\"><p>A common pattern for generating new arrays combines list comprehension, tuple unpacking, and the function <span class=\"nowrap\"><code class=\"language-python\">zip</code>.</span> The <code class=\"language-python\">zip</code> function takes two arrays and returns a single array of pairs of corresponding entries (or three arrays, in which case it returns an array of triples, etc.). Zum Beispiel, </p><pre class=\"language-python\"><code>zip([\"a\", \"b\", \"c\"], [1, 2, 3])</code></pre><p>returns an object which is equivalent to <span class=\"nowrap\"><code class=\"language-python\">[(\"a\", 1), (\"b\", 2), (\"c\", 3)]</code>.</span> </p><p>If we have three vectors <span class=\"nowrap\"><svg style=\"vertical-align: 0\" width=\"1.697ex\" height=\"1.62ex\" class=\"mathjax\" viewBox=\"0 -716 750 716\"><title>A</title><defs><path id=\"MJX-97-TEX-I-1D434\" d=\"M208 74Q208 50 254 46Q272 46 272 35Q272 34 270 22Q267 8 264 4T251 0Q249 0 239 0T205 1T141 2Q70 2 50 0H42Q35 7 35 11Q37 38 48 46H62Q132 49 164 96Q170 102 345 401T523 704Q530 716 547 716H555H572Q578 707 578 706L606 383Q634 60 636 57Q641 46 701 46Q726 46 726 36Q726 34 723 22Q720 7 718 4T704 0Q701 0 690 0T651 1T578 2Q484 2 455 0H443Q437 6 437 9T439 27Q443 40 445 43L449 46H469Q523 49 533 63L521 213H283L249 155Q208 86 208 74ZM516 260Q516 271 504 416T490 562L463 519Q447 492 400 412L310 260L413 259Q516 259 516 260Z\"></path></defs><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><use xlink:href=\"#MJX-97-TEX-I-1D434\"></use></g></g></g></svg>,</span> <span class=\"nowrap\"><svg style=\"vertical-align: 0\" width=\"1.717ex\" height=\"1.545ex\" class=\"mathjax\" viewBox=\"0 -683 759 683\"><title>B</title><defs><path id=\"MJX-75-TEX-I-1D435\" d=\"M231 637Q204 637 199 638T194 649Q194 676 205 682Q206 683 335 683Q594 683 608 681Q671 671 713 636T756 544Q756 480 698 429T565 360L555 357Q619 348 660 311T702 219Q702 146 630 78T453 1Q446 0 242 0Q42 0 39 2Q35 5 35 10Q35 17 37 24Q42 43 47 45Q51 46 62 46H68Q95 46 128 49Q142 52 147 61Q150 65 219 339T288 628Q288 635 231 637ZM649 544Q649 574 634 600T585 634Q578 636 493 637Q473 637 451 637T416 636H403Q388 635 384 626Q382 622 352 506Q352 503 351 500L320 374H401Q482 374 494 376Q554 386 601 434T649 544ZM595 229Q595 273 572 302T512 336Q506 337 429 337Q311 337 310 336Q310 334 293 263T258 122L240 52Q240 48 252 48T333 46Q422 46 429 47Q491 54 543 105T595 229Z\"></path></defs><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><use xlink:href=\"#MJX-75-TEX-I-1D435\"></use></g></g></g></svg>,</span> and <svg style=\"vertical-align: -0.05ex\" width=\"1.719ex\" height=\"1.645ex\" class=\"mathjax\" viewBox=\"0 -705 760 727\"><title>C</title><defs><path id=\"MJX-612-TEX-I-1D436\" d=\"M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q484 659 454 652T382 628T299 572T226 479Q194 422 175 346T156 222Q156 108 232 58Q280 24 350 24Q441 24 512 92T606 240Q610 253 612 255T628 257Q648 257 648 248Q648 243 647 239Q618 132 523 55T319 -22Q206 -22 128 53T50 252Z\"></path></defs><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><use xlink:href=\"#MJX-612-TEX-I-1D436\"></use></g></g></g></svg> of equal length, then the vector sum <svg style=\"vertical-align: -0.186ex\" width=\"10.665ex\" height=\"1.805ex\" class=\"mathjax\" viewBox=\"0 -716 4713.9 798\"><title>A + B + C</title><defs><path id=\"MJX-3376-TEX-I-1D434\" d=\"M208 74Q208 50 254 46Q272 46 272 35Q272 34 270 22Q267 8 264 4T251 0Q249 0 239 0T205 1T141 2Q70 2 50 0H42Q35 7 35 11Q37 38 48 46H62Q132 49 164 96Q170 102 345 401T523 704Q530 716 547 716H555H572Q578 707 578 706L606 383Q634 60 636 57Q641 46 701 46Q726 46 726 36Q726 34 723 22Q720 7 718 4T704 0Q701 0 690 0T651 1T578 2Q484 2 455 0H443Q437 6 437 9T439 27Q443 40 445 43L449 46H469Q523 49 533 63L521 213H283L249 155Q208 86 208 74ZM516 260Q516 271 504 416T490 562L463 519Q447 492 400 412L310 260L413 259Q516 259 516 260Z\"></path><path id=\"MJX-3376-TEX-N-2B\" d=\"M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z\"></path><path id=\"MJX-3376-TEX-I-1D435\" d=\"M231 637Q204 637 199 638T194 649Q194 676 205 682Q206 683 335 683Q594 683 608 681Q671 671 713 636T756 544Q756 480 698 429T565 360L555 357Q619 348 660 311T702 219Q702 146 630 78T453 1Q446 0 242 0Q42 0 39 2Q35 5 35 10Q35 17 37 24Q42 43 47 45Q51 46 62 46H68Q95 46 128 49Q142 52 147 61Q150 65 219 339T288 628Q288 635 231 637ZM649 544Q649 574 634 600T585 634Q578 636 493 637Q473 637 451 637T416 636H403Q388 635 384 626Q382 622 352 506Q352 503 351 500L320 374H401Q482 374 494 376Q554 386 601 434T649 544ZM595 229Q595 273 572 302T512 336Q506 337 429 337Q311 337 310 336Q310 334 293 263T258 122L240 52Q240 48 252 48T333 46Q422 46 429 47Q491 54 543 105T595 229Z\"></path><path id=\"MJX-3376-TEX-I-1D436\" d=\"M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q484 659 454 652T382 628T299 572T226 479Q194 422 175 346T156 222Q156 108 232 58Q280 24 350 24Q441 24 512 92T606 240Q610 253 612 255T628 257Q648 257 648 248Q648 243 647 239Q618 132 523 55T319 -22Q206 -22 128 53T50 252Z\"></path></defs><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><use xlink:href=\"#MJX-3376-TEX-I-1D434\"></use></g><g data-mml-node=\"mo\" transform=\"translate(972.2, 0)\"><use xlink:href=\"#MJX-3376-TEX-N-2B\"></use></g><g data-mml-node=\"mi\" transform=\"translate(1972.4, 0)\"><use xlink:href=\"#MJX-3376-TEX-I-1D435\"></use></g><g data-mml-node=\"mo\" transform=\"translate(2953.7, 0)\"><use xlink:href=\"#MJX-3376-TEX-N-2B\"></use></g><g data-mml-node=\"mi\" transform=\"translate(3953.9, 0)\"><use xlink:href=\"#MJX-3376-TEX-I-1D436\"></use></g></g></g></svg> can be computed using the expression <span class=\"nowrap\"><code class=\"language-python\">[a + b + c for (a,b,c) in zip(A,B,C)]</code>.</span> </p><div class=\"exercise\"> <p><strong>Exercise</strong><br>Suppose that <svg style=\"vertical-align: 0\" width=\"2.009ex\" height=\"1.545ex\" class=\"mathjax\" viewBox=\"0 -683 888 683\"><title>H</title><defs><path id=\"MJX-186-TEX-I-1D43B\" d=\"M228 637Q194 637 192 641Q191 643 191 649Q191 673 202 682Q204 683 219 683Q260 681 355 681Q389 681 418 681T463 682T483 682Q499 682 499 672Q499 670 497 658Q492 641 487 638H485Q483 638 480 638T473 638T464 637T455 637Q416 636 405 634T387 623Q384 619 355 500Q348 474 340 442T328 395L324 380Q324 378 469 378H614L615 381Q615 384 646 504Q674 619 674 627T617 637Q594 637 587 639T580 648Q580 650 582 660Q586 677 588 679T604 682Q609 682 646 681T740 680Q802 680 835 681T871 682Q888 682 888 672Q888 645 876 638H874Q872 638 869 638T862 638T853 637T844 637Q805 636 794 634T776 623Q773 618 704 340T634 58Q634 51 638 51Q646 48 692 46H723Q729 38 729 37T726 19Q722 6 716 0H701Q664 2 567 2Q533 2 504 2T458 2T437 1Q420 1 420 10Q420 15 423 24Q428 43 433 45Q437 46 448 46H454Q481 46 514 49Q520 50 522 50T528 55T534 64T540 82T547 110T558 153Q565 181 569 198Q602 330 602 331T457 332H312L279 197Q245 63 245 58Q245 51 253 49T303 46H334Q340 38 340 37T337 19Q333 6 327 0H312Q275 2 178 2Q144 2 115 2T69 2T48 1Q31 1 31 10Q31 12 34 24Q39 43 44 45Q48 46 59 46H65Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Q285 635 228 637Z\"></path></defs><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><use xlink:href=\"#MJX-186-TEX-I-1D43B\"></use></g></g></g></svg> is a list which stores the heights of 100 cylinders and <svg style=\"vertical-align: -0.048ex\" width=\"1.717ex\" height=\"1.593ex\" class=\"mathjax\" viewBox=\"0 -683 759 704\"><title>R</title><defs><path id=\"MJX-1997-TEX-I-1D445\" d=\"M230 637Q203 637 198 638T193 649Q193 676 204 682Q206 683 378 683Q550 682 564 680Q620 672 658 652T712 606T733 563T739 529Q739 484 710 445T643 385T576 351T538 338L545 333Q612 295 612 223Q612 212 607 162T602 80V71Q602 53 603 43T614 25T640 16Q668 16 686 38T712 85Q717 99 720 102T735 105Q755 105 755 93Q755 75 731 36Q693 -21 641 -21H632Q571 -21 531 4T487 82Q487 109 502 166T517 239Q517 290 474 313Q459 320 449 321T378 323H309L277 193Q244 61 244 59Q244 55 245 54T252 50T269 48T302 46H333Q339 38 339 37T336 19Q332 6 326 0H311Q275 2 180 2Q146 2 117 2T71 2T50 1Q33 1 33 10Q33 12 36 24Q41 43 46 45Q50 46 61 46H67Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628Q287 635 230 637ZM630 554Q630 586 609 608T523 636Q521 636 500 636T462 637H440Q393 637 386 627Q385 624 352 494T319 361Q319 360 388 360Q466 361 492 367Q556 377 592 426Q608 449 619 486T630 554Z\"></path></defs><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><use xlink:href=\"#MJX-1997-TEX-I-1D445\"></use></g></g></g></svg> is a list which stores their radii (in the same order). Write a <x-gloss xid=\"listcomp\">list comprehension</x-gloss> which returns a list containing the volumes of these cylinders. </p></div> <pre python-executable=\"python-executable\">H = [1, 2, 3]\nR = [0.8, 1.0, 1.2]</pre><x-quill goal=\"quill\"></x-quill></x-step>","goals":["quill"],"keywords":[]},"step-118":{"id":"step-118","title":"Step  ","html":"<x-step id=\"step-118\" goals=\"next-0\"><p><em>Lösung</em>. We zip <code class=\"language-python\">H</code> and <code class=\"language-python\">R</code> and use the volume formula <span class=\"nowrap\"><svg style=\"vertical-align: -0.025ex\" width=\"4.526ex\" height=\"1.912ex\" class=\"mathjax\" viewBox=\"0 -833.9 2000.6 844.9\"><title>\\pi r^2 h</title><defs><path id=\"MJX-3370-TEX-I-1D70B\" d=\"M132 -11Q98 -11 98 22V33L111 61Q186 219 220 334L228 358H196Q158 358 142 355T103 336Q92 329 81 318T62 297T53 285Q51 284 38 284Q19 284 19 294Q19 300 38 329T93 391T164 429Q171 431 389 431Q549 431 553 430Q573 423 573 402Q573 371 541 360Q535 358 472 358H408L405 341Q393 269 393 222Q393 170 402 129T421 65T431 37Q431 20 417 5T381 -10Q370 -10 363 -7T347 17T331 77Q330 86 330 121Q330 170 339 226T357 318T367 358H269L268 354Q268 351 249 275T206 114T175 17Q164 -11 132 -11Z\"></path><path id=\"MJX-3370-TEX-I-1D45F\" d=\"M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z\"></path><path id=\"MJX-3370-TEX-N-32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"></path><path id=\"MJX-3370-TEX-I-210E\" d=\"M137 683Q138 683 209 688T282 694Q294 694 294 685Q294 674 258 534Q220 386 220 383Q220 381 227 388Q288 442 357 442Q411 442 444 415T478 336Q478 285 440 178T402 50Q403 36 407 31T422 26Q450 26 474 56T513 138Q516 149 519 151T535 153Q555 153 555 145Q555 144 551 130Q535 71 500 33Q466 -10 419 -10H414Q367 -10 346 17T325 74Q325 90 361 192T398 345Q398 404 354 404H349Q266 404 205 306L198 293L164 158Q132 28 127 16Q114 -11 83 -11Q69 -11 59 -2T48 16Q48 30 121 320L195 616Q195 629 188 632T149 637H128Q122 643 122 645T124 664Q129 683 137 683Z\"></path></defs><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><use xlink:href=\"#MJX-3370-TEX-I-1D70B\"></use></g><g data-mml-node=\"msup\" transform=\"translate(570, 0)\"><g data-mml-node=\"mi\"><use xlink:href=\"#MJX-3370-TEX-I-1D45F\"></use></g><g data-mml-node=\"mn\" transform=\"translate(451, 363) scale(0.707)\"><use xlink:href=\"#MJX-3370-TEX-N-32\"></use></g></g><g data-mml-node=\"mi\" transform=\"translate(1424.6, 0)\"><use xlink:href=\"#MJX-3370-TEX-I-210E\"></use></g></g></g></svg>:</span> </p><pre python-executable=\"python-executable\">from numpy import pi\nH = [1, 2, 3]\nR = [0.8, 1.0, 1.2]\n[pi*r*r*h for (h,r) in zip(H,R)]</pre><p><button class=\"next-step\">Weiter</button></p></x-step>","goals":["next-0"],"keywords":[]},"step-119":{"id":"step-119","title":"Step  ","html":"<x-step id=\"step-119\" goals=\"blank-0 next-0\"><h2>Übungen</h2><div class=\"exercise\"> <p><strong>Exercise</strong><br>(Try doing this one without executing any code.) What will the value of <code class=\"language-python\">L</code> be after the following block is executed? <x-blank-mc goal=\"blank-0\"><button class=\"choice\">(4,1,2,7,3,-1,8) </button><button class=\"choice\"> (4,1,2,7,3,-1) </button><button class=\"choice\"> (4,2,1,7,3,-1,8)</button></x-blank-mc></p><pre class=\"language-python\"><code>L = [4, 8, 2]\nL.append(7)\nL.extend([3,-1,8])\nL.insert(2, 1)\nL.remove(8)\nL = tuple(L)</code></pre></div> <p><button class=\"next-step\">Weiter</button></p></x-step>","goals":["blank-0","next-0"],"keywords":[]},"step-120":{"id":"step-120","title":"Step  ","html":"<x-step id=\"step-120\" goals=\"quill\"><div class=\"exercise\"> <p><strong>Exercise</strong><br>Write a function which takes a matrix <code class=\"language-python\">M</code> and an index <code class=\"language-python\">i</code> and returns the $i$th column of <span class=\"nowrap\"><code class=\"language-python\">M</code>.</span> Assume that <code class=\"language-python\">M</code> is represented as a list of lists, where each list represents a row. </p></div> <pre python-executable=\"python-executable\">def select_col(M, i):\n    pass # add code here\n\ndef test_select_col():\n    assert select_col([[1,2],[3,4]],1) == [2,4]\n    assert select_col([[7,8],[8,-2],[3,4]],1) == [8,-2,4]\n    return \"Tests passed!\"\n\ntest_select_col()</pre><x-quill goal=\"quill\"></x-quill></x-step>","goals":["quill"],"keywords":[]},"step-121":{"id":"step-121","title":"Step  ","html":"<x-step id=\"step-121\" goals=\"next-0\"><p><em>Lösung</em>. We use a list comprehension to select the appropriate entry from each row. </p><pre python-executable=\"python-executable\">def select_col(M, i):\n    return [row[i] for row in M]\n\ndef test_select_col():\n    assert select_col([[1,2],[3,4]],1) == [2,4]\n    assert select_col([[7,8],[8,-2],[3,4]],1) == [8,-2,4]\n    return \"Test passed!\"\n\ntest_select_col()</pre><p><button class=\"next-step\">Weiter</button></p></x-step>","goals":["next-0"],"keywords":[]},"step-122":{"id":"step-122","title":"Step  ","html":"<x-step id=\"step-122\" goals=\"quill\"><div class=\"exercise\"> <p><strong>Exercise</strong><br>Write a function which reverses the words in a sentence. For simplicity, you may assume that the sentence does not contain punctuation.</p><p>_TIPP: The string methods <code class=\"language-python\">join</code> and <code class=\"language-python\">split</code> might be helpful. You can see the documentation for these methods with <code class=\"language-python\">help(str.join)</code> and <span class=\"nowrap\"><code class=\"language-python\">help(str.split)</code>.</span> </p></div> <pre python-executable=\"python-executable\">def reverse_words(sentence):\n    pass # add code here\n\ndef test_reverse_words():\n    assert reverse_words(\"The quick brown fox\") == \"fox brown quick The\"\n    assert reverse_words(\"\") == \"\"\n    return \"Tests passed!\"\n\ntest_reverse_words()</pre><x-quill goal=\"quill\"></x-quill></x-step>","goals":["quill"],"keywords":[]},"step-123":{"id":"step-123","title":"Step  ","html":"<x-step id=\"step-123\" goals=\"\"><p><em>Lösung</em>. We use the string method <span class=\"nowrap\"><code class=\"language-python\">split</code>,</span> which splits a string on a given character. This gives us a list of the words in the sentence, which we can reverse by indexing with a negative step and rejoin with the <code class=\"language-python\">join</code> method.</p><pre python-executable=\"python-executable\">def reverse_words(sentence):\n    return \" \".join(sentence.split(\" \")[::-1])</pre></x-step>","goals":[],"keywords":[]},"sets-and-dictionaries":{"id":"sets-and-dictionaries","title":"Sets And Dictionaries","html":"<x-step id=\"sets-and-dictionaries\" goals=\"blank-0 quill\"><h2>Sets</h2><p><strong>Sets</strong> are unordered collections of unique values. The main advantage of having a special type for sets is that the design of the data structure can be optimized for membership checking. Figuring out whether a given value is in a list requires going through each element in the list, so the amount of time it takes increases with the length of the list. By contrast, checking membership in a set can be done very quickly even if the set is large. </p><pre python-executable=\"python-executable\">A = [1,2,3]\nS = set(A)\n2 in S # evaluates to true\nS.remove(2) # removes 2\nS.add(11) # puts 11 in the set\n2 in S # evaluates to False now</pre><div class=\"exercise\"> <p><strong>Exercise</strong><br>Make a set which contains the first 10,000 prime numbers.</p><p>_TIPP: It suffices to look for primes among the first 110,000 integers. Compare how long it takes to check whether a given number is in that set to the time it takes to compute whether the number is prime using <span class=\"nowrap\"><code class=\"language-python\">sympy.isprime</code>.</span> </p><p><em>Note 1</em>: The most reliable and efficient way to figure out how the <code class=\"language-python\">timeit</code> function works is to <span class=\"nowrap\"><x-blank-mc goal=\"blank-0\"><button class=\"choice\">run help(timeit)</button><button class=\"choice\">try it on different examples and guess</button><button class=\"choice\">ask on StackOverflow</button></x-blank-mc>.</span> </p><p><em>Note 2</em>: The computation below takes some time to run (20 seconds, say). It returns a tuple when it's done. </p><pre python-executable=\"python-executable\">import timeit\nSETUP = \"\"\"\nfrom sympy import isprime\nprimes = [] # add your code\nprimesSet = set(primes)\n\"\"\"\na = timeit.timeit(\"98779 in primes\", setup = SETUP)\nb = timeit.timeit(\"98779 in primesSet\", setup = SETUP)\nc = timeit.timeit(\"isprime(98779)\", setup = SETUP)\na,b,c</pre><x-quill goal=\"quill\"></x-quill></div></x-step>","goals":["blank-0","quill"],"keywords":[]},"step-124":{"id":"step-124","title":"Step  ","html":"<x-step id=\"step-124\" goals=\"sortable-0\"><p><em>Lösung</em>. To get exactly 10,000 primes, we index the list obtained by filtering out the composite numbers:</p><pre python-executable=\"python-executable\">import timeit\nSETUP = \"\"\"\nfrom sympy import isprime\nprimes = [k for k in range(2,110_000) if isprime(k)][:10000]\nprimesSet = set(primes)\n\"\"\"\na = timeit.timeit(\"98779 in primes\", setup = SETUP)\nb = timeit.timeit(\"98779 in primesSet\", setup = SETUP)\nc = timeit.timeit(\"isprime(98779)\", setup = SETUP)\na,b,c</pre><p>Put the three methods in order from fastest to slowest: </p><x-sortable goal=\"sortable-0\"><div class=\"item\" data-index=\"2\">List membership checking</div><div class=\"item\" data-index=\"0\">Set membership checking</div><div class=\"item\" data-index=\"1\">Computing from scratch</div></x-sortable></x-step>","goals":["sortable-0"],"keywords":[]},"step-125":{"id":"step-125","title":"Step  ","html":"<x-step id=\"step-125\" goals=\"blank-0 blank-1\"><h2>Wörterbücher</h2><p>The internal mechanism that sets use to check membership extremely fast is also useful when the information you want to retrieve is more complex than just <code class=\"language-python\">True</code> or <span class=\"nowrap\"><code class=\"language-python\">False</code>.</span> </p><p>For example, suppose you want to store a collection of color names together with the <a href=\"https://en.wikipedia.org/wiki/RGB_color_model\" target=\"_blank\">RGB values</a> for each one. We'll store the names as <x-blank-mc goal=\"blank-0\"><button class=\"choice\">strings</button><button class=\"choice\">floats</button><button class=\"choice\">ints</button></x-blank-mc> and the RGB triples as <span class=\"nowrap\"><x-blank-mc goal=\"blank-1\"><button class=\"choice\">tuples</button><button class=\"choice\">strings</button><button class=\"choice\">floats</button></x-blank-mc>.</span> </p></x-step>","goals":["blank-0","blank-1"],"keywords":[]},"step-126":{"id":"step-126","title":"Step  ","html":"<x-step id=\"step-126\" goals=\"blank-0\"><p>It's possible to do this by putting the names in a list and the values in a list of the same length: </p><pre class=\"language-python\"><code>names = [\"fuchsia\", \"firebrick\", \"goldenrod\"]\nrgbs = [(256, 0, 256), (178, 34, 34), (218, 165, 32)]</code></pre><p>However, this solution gets very tedious quickly. For example, modifying this structure requires <span class=\"nowrap\"><x-blank-mc goal=\"blank-0\"><button class=\"choice\">modifying both lists</button><button class=\"choice\">modifying at least one of the lists</button></x-blank-mc>.</span> </p></x-step>","goals":["blank-0"],"keywords":[]},"step-127":{"id":"step-127","title":"Step  ","html":"<x-step id=\"step-127\" goals=\"next-0\"><p>The Python data structure tailored to the problem of encoding a map from one finite set to another is called a <strong>dictionary</strong>. Dictionary literals consist of a comma separated list of the desired input-output pairs (with each input and output separated by a colon) delimited by curly braces. For example, the dictionary encoding the map described above looks like this:</p><pre python-executable=\"python-executable\">rgb = {\n  \"fuchsia\": (256, 0, 256),\n  \"firebrick\": (178, 34, 34),\n  \"goldenrod\": (218, 165, 32)\n}</pre><p>The domain elements <span class=\"nowrap\"><code class=\"language-python\">\"fuchsia\"</code>,</span> <code class=\"language-python\">\"firebrick\"</code> and <code class=\"language-python\">\"goldenrod\"</code> are called the <strong>keys</strong> of the dictionary, and the codomain elements <span class=\"nowrap\"><code class=\"language-python\">(256,0,256)</code>,</span> <span class=\"nowrap\"><code class=\"language-python\">(178,34,34)</code>,</span> and <code class=\"language-python\">(218,165,32)</code> are called the <strong>values</strong>. </p><p>We can also form new dictionaries from lists of pairs using the <code class=\"language-python\">dict</code> function:</p><pre class=\"language-python\"><code>dict([\n  (\"fuchsia\", (256, 0, 256)),\n  (\"firebrick\", (178, 34, 34)),\n  (\"goldenrod\", (218, 165, 32))\n])</code></pre><p><button class=\"next-step\">Weiter</button></p></x-step>","goals":["next-0"],"keywords":[]},"step-128":{"id":"step-128","title":"Step  ","html":"<x-step id=\"step-128\" goals=\"next-0\"><p>We can perform a dictionary lookup using indexing <span class=\"nowrap\"><x-gloss xid=\"syntax\">syntax</x-gloss>:</span> <code class=\"language-python\">rgb[\"fuchsia\"]</code> returns <span class=\"nowrap\"><code class=\"language-python\">(256,0,256)</code>.</span> We can also change the value associated with a given key or introduce a new key-value pair using indexing and assignment: </p><pre python-executable=\"python-executable\">rgb = {\n  \"fuchsia\": (256, 0, 256),\n  \"firebrick\": (178, 34, 34),\n  \"goldenrod\": (218, 165, 32)\n}\nrgb[\"crimson\"] = (220, 20, 60)\nlen(rgb)</pre><p>The <code class=\"language-python\">dict</code> <span class=\"nowrap\"><x-gloss xid=\"method\">methods</x-gloss>,</span> <code class=\"language-python\">keys</code> and <span class=\"nowrap\"><code class=\"language-python\">values</code>,</span> may be used to access the keys and values of a dictionary. </p><pre python-executable=\"python-executable\">rgb = {\n  \"fuchsia\": (256, 0, 256),\n  \"firebrick\": (178, 34, 34),\n  \"goldenrod\": (218, 165, 32)\n}\nrgb.keys()</pre><p><button class=\"next-step\">Weiter</button></p></x-step>","goals":["next-0"],"keywords":[]},"step-129":{"id":"step-129","title":"Step  ","html":"<x-step id=\"step-129\" goals=\"blank-0 blank-1 next-0 quill\"><div class=\"exercise\"> <p><strong>Exercise</strong><br>Consider a dictionary which encodes flight arrival times: </p><pre class=\"language-python\"><code>import datetime\narrival_times = {\n  \"JetBlue 924\": datetime.time(7,9),\n  \"United 1282\": datetime.time(7,42),\n  \"Southwest 196\": datetime.time(7,3)\n}</code></pre><p>You can most easily use this dictionary to <span class=\"nowrap\"><x-blank-mc goal=\"blank-0\"><button class=\"choice\">look up the arrival time of a flight</button><button class=\"choice\">look up which flights arrive at a given time</button></x-blank-mc>.</span> </p><p>Suppose you want to reverse the lookup direction: for any given time, you want to see which flight arrives at that time. One problem is that <span class=\"nowrap\"><x-blank-mc goal=\"blank-1\"><button class=\"choice\">multiple flights may arrive at the same time</button><button class=\"choice\">the airlines aren't the same</button></x-blank-mc>.</span> </p><p>Assuming that the codomain values are distinct, however, you can form a new dictionary that allows you to look up keys for values by mapping the <code class=\"language-python\">reversed</code> function over the key-value pairs of the dictionary (obtainable through <code class=\"language-python\">items</code> method). </p><p>Implement this idea in the block below. Check that your dictionary works by indexing it with <span class=\"nowrap\"><code class=\"language-python\">datetime.time(7,9)</code>.</span> </p></div> <pre python-executable=\"python-executable\">import datetime\narrival_times = {\n  \"JetBlue 924\": datetime.time(7,9),\n  \"United 1282\": datetime.time(7,42),\n  \"Southwest 196\": datetime.time(7,3)\n}</pre><x-quill goal=\"quill\"></x-quill><p><button class=\"next-step\"> Absenden</button></p></x-step>","goals":["blank-0","blank-1","next-0","quill"],"keywords":[]},"step-130":{"id":"step-130","title":"Step  ","html":"<x-step id=\"step-130\" goals=\"next-0\"><p><em>Lösung</em>. We use the <code class=\"language-python\">dict</code> function to convert the list of pairs back into a dictionary: <span class=\"nowrap\"><code class=\"language-python\">dict(map(reversed, arrival_times.items()))</code>.</span> </p><p><button class=\"next-step\">Weiter</button></p></x-step>","goals":["next-0"],"keywords":[]},"step-131":{"id":"step-131","title":"Step  ","html":"<x-step id=\"step-131\" goals=\"quill\"><h2>Übungen</h2><div class=\"exercise\"> <p><strong>Exercise</strong><br>Python supports a <code class=\"language-python\">dict</code> comprehension construct which is very similar to a list comprehension. Here's a dictionary that maps each one-digit positive integer to its square: </p><pre class=\"language-python\"><code>square_dict = {k: k*k for k in range(1, 10)}</code></pre><p>Use a dict comprehension to make a dictionary which maps each of the first 100 powers of 2 to its units digit.</p></div> <pre python-executable=\"python-executable\"> </pre><x-quill goal=\"quill\"></x-quill></x-step>","goals":["quill"],"keywords":[]},"step-132":{"id":"step-132","title":"Step  ","html":"<x-step id=\"step-132\" goals=\"next-0\"><p><em>Lösung</em>. We convert to a string, get the last character, and convert back to an integer: </p><pre python-executable=\"python-executable\">  {2**k: int(str(2**k)[-1]) for k in range(100)}</pre><p><button class=\"next-step\">Weiter</button></p></x-step>","goals":["next-0"],"keywords":[]},"step-133":{"id":"step-133","title":"Step  ","html":"<x-step id=\"step-133\" goals=\"blank-0 next-0\"><div class=\"exercise\"> <p><strong>Exercise</strong><br>Suppose you want to store student IDs in a part of a web application where the main thing you need to do is check whether an ID input by a student is a valid student ID (so you can flag it if it has been mistyped). Among the given options, the best data structure for this purpose would be a <span class=\"nowrap\"><x-blank-mc goal=\"blank-0\"><button class=\"choice\">set</button><button class=\"choice\">list</button><button class=\"choice\">tuple</button><button class=\"choice\">dictionary</button></x-blank-mc>.</span> </p></div> <p><button class=\"next-step\">Weiter</button></p></x-step>","goals":["blank-0","next-0"],"keywords":[]},"step-134":{"id":"step-134","title":"Step  ","html":"<x-step id=\"step-134\" goals=\"\"><p><em>Lösung</em>. This is an ideal use case for sets. Lists and tuples will be slower for checking membership, and dictionaries aren't quite appropriate because it isn't clear what the values would be.</p></x-step>","goals":[],"keywords":[]},"iteration":{"id":"iteration","title":"Iteration","html":"<x-step id=\"iteration\" goals=\"next-0\"><p>We have already seen one way of doing something to each element in a collection: the <span class=\"nowrap\"><x-gloss xid=\"listcomp\"><em>list comprehension</em></x-gloss>.</span></p><pre python-executable=\"python-executable\">smallest_factor = {2: 2, 3: 3, 4: 2, 5: 5, \n                 6: 2, 7: 7, 8: 2, 9: 3}\n[v for (k,v) in smallest_factor.items()]</pre><p>In this list comprehension, we <strong>iterate</strong> over the pairs of the <x-gloss xid=\"dictionary\">dictionary</x-gloss> to produce a new list. Although list comprehensions are very useful, they are not flexible enough to cover all our iteration needs. A much more flexible tool is the <strong>for loop</strong>.</p><p><button class=\"next-step\">Weiter</button></p></x-step>","goals":["next-0"],"keywords":[]},"step-135":{"id":"step-135","title":"Step  ","html":"<x-step id=\"step-135\" goals=\"next-0\"><h2><em>For</em> statements</h2><p>The code above could also be rewritten as follows:</p><pre python-executable=\"python-executable\">smallest_factor = {2: 2, 3: 3, 4: 2, 5: 5, \n                 6: 2, 7: 7, 8: 2, 9: 3}\nvals = []\nfor (k,v) in smallest_factor.items():\n    vals.append(v)\nvals</pre><p>The statement <code class=\"language-python\">for item in collection:</code> works as follows: the first element of <code class=\"language-python\">collection</code> is assigned to <span class=\"nowrap\"><code class=\"language-python\">item</code>,</span> and the block indented below the <code class=\"language-python\">for</code> statement is executed. Then, the second element of <code class=\"language-python\">collection</code> is assigned to <span class=\"nowrap\"><code class=\"language-python\">item</code>,</span> the indented block is executed again, etc., until the end of the collection is reached. </p><p><button class=\"next-step\">Weiter</button></p></x-step>","goals":["next-0"],"keywords":[]},"step-136":{"id":"step-136","title":"Step  ","html":"<x-step id=\"step-136\" goals=\"next-0\"><p>We can nest <code class=\"language-python\">for</code> statements. For example, suppose we have a matrix represented as a <x-gloss xid=\"list\">list</x-gloss> of lists, and we want to sum all of the matrix entries. We can do that by iterating over the rows and then iterating over each row: </p><pre python-executable=\"python-executable\"> \ndef sum_matrix_entries(M):\n    \"\"\"\n    Return the sum of the entries of M\n    \"\"\"\n    s = 0\n    for row in M:\n        for entry in row:\n            s = s + entry\n    return s\n\ndef test_sum():\n    M = [[1,2,3],[4,5,6],[7,8,9]]\n    assert sum_matrix_entries(M) == 45\n    return \"Test passed!\"\n\ntest_sum()</pre><p><button class=\"next-step\">Weiter</button></p></x-step>","goals":["next-0"],"keywords":[]},"step-137":{"id":"step-137","title":"Step  ","html":"<x-step id=\"step-137\" goals=\"quill\"><div class=\"exercise\"> <p><strong>Exercise</strong><br>Suppose you have imported a function <code class=\"language-python\">file_bug_report</code> with two parameters: <code class=\"language-python\">id</code> and <span class=\"nowrap\"><code class=\"language-python\">description</code>.</span> Suppose also that you have a <code class=\"language-python\">dict</code> called <code class=\"language-python\">bugs</code> whose keys are ids and whose values are strings representing descriptions. Write a loop which performs the action of filing each bug report in the dictionary. </p></div> <pre python-executable=\"python-executable\">def file_bug_report(id, description):\n    \"A dummy function which represents filing a bug report\"\n    print(f\"bug {id} ({description}) successfully filed\")\n \n \nbugs = {\"07cc242a\": \n          \"`trackShipment` hangs if `trackingNumber` is missing\", \n        \"100b359a\": \n          \"customers not receiving text alerts\"}</pre><x-quill goal=\"quill\"></x-quill></x-step>","goals":["quill"],"keywords":[]},"step-137a":{"id":"step-137a","title":"Step 137a","html":"<x-step id=\"step-137a\" goals=\"next-0\"><p><em>Lösung</em>. We loop over the items: </p><pre python-executable=\"python-executable\">for id, desc in bugs.items():\n    file_bug_report(id, desc)</pre><p><button class=\"next-step\">Weiter</button></p></x-step>","goals":["next-0"],"keywords":[]},"step-138":{"id":"step-138","title":"Step  ","html":"<x-step id=\"step-138\" goals=\"quill\"><div class=\"exercise\"> <p><strong>Exercise</strong><br>Write a <x-gloss xid=\"function\">function</x-gloss> called <code class=\"language-python\">factorial</code> which takes a positive integer <code class=\"language-python\">n</code> as an argument and returns its factorial. </p></div> <pre python-executable=\"python-executable\">def factorial(n):\n    \"Return n!\"\n    # add code here\n\ndef test_factorial():\n    assert factorial(3) == 6\n    assert factorial(0) == 1\n    assert factorial(20) == 2432902008176640000\n    return \"Tests passed!\"\n\ntest_factorial()</pre><x-quill goal=\"quill\"></x-quill></x-step>","goals":["quill"],"keywords":[]},"step-139":{"id":"step-139","title":"Step  ","html":"<x-step id=\"step-139\" goals=\"next-0\"><p><em>Lösung</em>. We loop through <code class=\"language-python\">range(1, n+1)</code> and multiply as we go. </p><pre python-executable=\"python-executable\">def factorial(n):\n    \"Return n!\"\n    product = 1\n    for k in range(1, n+1):\n        product = k * product \n    return product\n \n \ndef test_factorial():\n    assert factorial(3) == 6\n    assert factorial(0) == 1\n    assert factorial(20) == 2432902008176640000\n    return \"Tests passed!\"\n\ntest_factorial()</pre><p><button class=\"next-step\">Weiter</button></p></x-step>","goals":["next-0"],"keywords":[]},"step-140":{"id":"step-140","title":"Step  ","html":"<x-step id=\"step-140\" goals=\"quill\"><h2><em>While</em> statements</h2><p>The <strong>Collatz conjecture</strong> is one of the easiest-to-state unsolved problems in mathematics. Starting from any given positive integer, we halve it if it's even and triple it and add one if it's odd. The Collatz conjecture states that repeatedly applying this rule always gets us to the number 1 eventually. For example, the <em>Collatz sequence</em> starting from 17 is</p><center><p>17, 52, 26, 13, 40, 20, 10, 5, 16, 8, 4, 2, 1</p></center><p>If we want to write a Python function which returns the Collatz sequence for any given starting number, we face a problem: we don't know from the start how many steps it will take to reach 1, so it isn't clear how we could use a <em>for loop</em>. What we want to do is execute a block of code until a given condition is met. Python provides the <code class=\"language-python\">while</code> loop for this purpose.</p><pre python-executable=\"python-executable\">def collatz_sequence(n):\n    \"Return the Collatz sequence starting from n\"\n    sequence = [n]\n    while n &gt; 1:\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3*n + 1\n        sequence.append(n)\n    return sequence\n\ndef test_collatz():\n    assert collatz_sequence(17) == [17, 52, 26, 13, \n                                40, 20, 10, 5, \n                                16, 8, 4, 2, 1]\n    return \"Test passed!\"\n\ntest_collatz()</pre><p>The expression which appears immediately following the <code class=\"language-python\">while</code> keyword is called the <strong>condition</strong>, and the block indented below the <code class=\"language-python\">while</code> statement is the <strong>body</strong> of the loop. The rules of the language stipulate the following execution sequence for a <code class=\"language-python\">while</code> statement: the condition is evaluated, and if it's true, then the body is executed, then condition is evaluated again, and so on. When the condition returns <span class=\"nowrap\"><code class=\"language-python\">False</code>,</span> the loop is exited. An exit can also be forced from within the body of the while loop with the keyword <span class=\"nowrap\"><code class=\"language-python\">break</code>.</span> </p><div class=\"exercise\"> <p><strong>Exercise</strong><br>Newton's algorithm for finding the square root of a number <code class=\"language-python\">n</code> starts from 1 and repeatedly applies the function <span class=\"nowrap\"><svg style=\"vertical-align: -0.781ex\" width=\"16.212ex\" height=\"2.737ex\" class=\"mathjax\" viewBox=\"0 -864.9 7165.6 1209.9\"><title>x\\mapsto \\frac{1}{2}(x + n/x)</title><defs><path id=\"MJX-3371-TEX-I-1D465\" d=\"M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z\"></path><path id=\"MJX-3371-TEX-N-21A6\" d=\"M95 155V109Q95 83 92 73T75 63Q61 63 58 74T54 130Q54 140 54 180T55 250Q55 421 57 425Q61 437 75 437Q88 437 91 428T95 393V345V270H835Q719 357 692 493Q692 494 692 496T691 499Q691 511 708 511H711Q720 511 723 510T729 506T732 497T735 481T743 456Q765 389 816 336T935 261Q944 258 944 250Q944 244 939 241T915 231T877 212Q836 186 806 152T761 85T740 35T732 4Q730 -6 727 -8T711 -11Q691 -11 691 0Q691 7 696 25Q728 151 835 230H95V155Z\"></path><path id=\"MJX-3371-TEX-N-31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path><path id=\"MJX-3371-TEX-N-32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"></path><path id=\"MJX-3371-TEX-N-28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"></path><path id=\"MJX-3371-TEX-N-2B\" d=\"M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z\"></path><path id=\"MJX-3371-TEX-I-1D45B\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"></path><path id=\"MJX-3371-TEX-N-2F\" d=\"M423 750Q432 750 438 744T444 730Q444 725 271 248T92 -240Q85 -250 75 -250Q68 -250 62 -245T56 -231Q56 -221 230 257T407 740Q411 750 423 750Z\"></path><path id=\"MJX-3371-TEX-N-29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"></path></defs><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><use xlink:href=\"#MJX-3371-TEX-I-1D465\"></use></g><g data-mml-node=\"mo\" transform=\"translate(849.8, 0)\"><use xlink:href=\"#MJX-3371-TEX-N-21A6\"></use></g><g data-mml-node=\"mfrac\" transform=\"translate(2127.6, 0)\"><g data-mml-node=\"mn\" transform=\"translate(220, 394) scale(0.707)\"><use xlink:href=\"#MJX-3371-TEX-N-31\"></use></g><g data-mml-node=\"mn\" transform=\"translate(220, -345) scale(0.707)\"><use xlink:href=\"#MJX-3371-TEX-N-32\"></use></g><rect width=\"553.6\" height=\"60\" x=\"120\" y=\"220\"></rect></g><g data-mml-node=\"mo\" transform=\"translate(2921.1, 0)\"><use xlink:href=\"#MJX-3371-TEX-N-28\"></use></g><g data-mml-node=\"mi\" transform=\"translate(3310.1, 0)\"><use xlink:href=\"#MJX-3371-TEX-I-1D465\"></use></g><g data-mml-node=\"mo\" transform=\"translate(4104.3, 0)\"><use xlink:href=\"#MJX-3371-TEX-N-2B\"></use></g><g data-mml-node=\"mi\" transform=\"translate(5104.6, 0)\"><use xlink:href=\"#MJX-3371-TEX-I-1D45B\"></use></g><g data-mml-node=\"TeXAtom\" data-mjx-texclass=\"ORD\" transform=\"translate(5704.6, 0)\"><g data-mml-node=\"mo\"><use xlink:href=\"#MJX-3371-TEX-N-2F\"></use></g></g><g data-mml-node=\"mi\" transform=\"translate(6204.6, 0)\"><use xlink:href=\"#MJX-3371-TEX-I-1D465\"></use></g><g data-mml-node=\"mo\" transform=\"translate(6776.6, 0)\"><use xlink:href=\"#MJX-3371-TEX-N-29\"></use></g></g></g></svg>.</span> For example, applying this algorithm to approximate <span class=\"nowrap\"><svg style=\"vertical-align: -0.225ex\" width=\"3.061ex\" height=\"2.398ex\" class=\"mathjax\" viewBox=\"0 -960.5 1353 1060\"><title>\\sqrt{2}</title><defs><path id=\"MJX-200-TEX-N-221A\" d=\"M95 178Q89 178 81 186T72 200T103 230T169 280T207 309Q209 311 212 311H213Q219 311 227 294T281 177Q300 134 312 108L397 -77Q398 -77 501 136T707 565T814 786Q820 800 834 800Q841 800 846 794T853 782V776L620 293L385 -193Q381 -200 366 -200Q357 -200 354 -197Q352 -195 256 15L160 225L144 214Q129 202 113 190T95 178Z\"></path><path id=\"MJX-200-TEX-N-32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"></path></defs><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\"><g data-mml-node=\"math\"><g data-mml-node=\"msqrt\"><g transform=\"translate(853, 0)\"><g data-mml-node=\"mn\"><use xlink:href=\"#MJX-200-TEX-N-32\"></use></g></g><g data-mml-node=\"mo\" transform=\"translate(0, 100.5)\"><use xlink:href=\"#MJX-200-TEX-N-221A\"></use></g><rect width=\"500\" height=\"60\" x=\"853\" y=\"840.5\"></rect></g></g></g></svg>,</span> we get </p><center><p>1, 3/2, 17/12, 577/408, ...</p></center><p>This algorithm converges very fast: 577/408 approximates <svg style=\"vertical-align: -0.225ex\" width=\"3.061ex\" height=\"2.398ex\" class=\"mathjax\" viewBox=\"0 -960.5 1353 1060\"><title>\\sqrt{2}</title><defs><path id=\"MJX-200-TEX-N-221A\" d=\"M95 178Q89 178 81 186T72 200T103 230T169 280T207 309Q209 311 212 311H213Q219 311 227 294T281 177Q300 134 312 108L397 -77Q398 -77 501 136T707 565T814 786Q820 800 834 800Q841 800 846 794T853 782V776L620 293L385 -193Q381 -200 366 -200Q357 -200 354 -197Q352 -195 256 15L160 225L144 214Q129 202 113 190T95 178Z\"></path><path id=\"MJX-200-TEX-N-32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"></path></defs><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\"><g data-mml-node=\"math\"><g data-mml-node=\"msqrt\"><g transform=\"translate(853, 0)\"><g data-mml-node=\"mn\"><use xlink:href=\"#MJX-200-TEX-N-32\"></use></g></g><g data-mml-node=\"mo\" transform=\"translate(0, 100.5)\"><use xlink:href=\"#MJX-200-TEX-N-221A\"></use></g><rect width=\"500\" height=\"60\" x=\"853\" y=\"840.5\"></rect></g></g></g></svg> with a relative error of about 0.00015%. </p><p>Write a function <code class=\"language-python\">newtonsqrt</code> which takes as an argument the value <code class=\"language-python\">n</code> to square root and applies Newton's algorithm until the relative difference between consecutive iterates drops below <span class=\"nowrap\"><svg style=\"vertical-align: -0.05ex\" width=\"4.42ex\" height=\"2.005ex\" class=\"mathjax\" viewBox=\"0 -864 1953.7 886\"><title>10^{-8}</title><defs><path id=\"MJX-3373-TEX-N-31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path><path id=\"MJX-3373-TEX-N-30\" d=\"M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z\"></path><path id=\"MJX-3373-TEX-N-2212\" d=\"M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z\"></path><path id=\"MJX-3373-TEX-N-38\" d=\"M70 417T70 494T124 618T248 666Q319 666 374 624T429 515Q429 485 418 459T392 417T361 389T335 371T324 363L338 354Q352 344 366 334T382 323Q457 264 457 174Q457 95 399 37T249 -22Q159 -22 101 29T43 155Q43 263 172 335L154 348Q133 361 127 368Q70 417 70 494ZM286 386L292 390Q298 394 301 396T311 403T323 413T334 425T345 438T355 454T364 471T369 491T371 513Q371 556 342 586T275 624Q268 625 242 625Q201 625 165 599T128 534Q128 511 141 492T167 463T217 431Q224 426 228 424L286 386ZM250 21Q308 21 350 55T392 137Q392 154 387 169T375 194T353 216T330 234T301 253T274 270Q260 279 244 289T218 306L210 311Q204 311 181 294T133 239T107 157Q107 98 150 60T250 21Z\"></path></defs><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\"><g data-mml-node=\"math\"><g data-mml-node=\"msup\"><g data-mml-node=\"mn\"><use xlink:href=\"#MJX-3373-TEX-N-31\"></use><use xlink:href=\"#MJX-3373-TEX-N-30\" transform=\"translate(500, 0)\"></use></g><g data-mml-node=\"TeXAtom\" transform=\"translate(1000, 393.1) scale(0.707)\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"mo\"><use xlink:href=\"#MJX-3373-TEX-N-2212\"></use></g><g data-mml-node=\"mn\" transform=\"translate(778, 0)\"><use xlink:href=\"#MJX-3373-TEX-N-38\"></use></g></g></g></g></g></svg>.</span> </p><p>Note that <svg style=\"vertical-align: -0.05ex\" width=\"4.42ex\" height=\"2.005ex\" class=\"mathjax\" viewBox=\"0 -864 1953.7 886\"><title>10^{-8}</title><defs><path id=\"MJX-3373-TEX-N-31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path><path id=\"MJX-3373-TEX-N-30\" d=\"M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z\"></path><path id=\"MJX-3373-TEX-N-2212\" d=\"M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z\"></path><path id=\"MJX-3373-TEX-N-38\" d=\"M70 417T70 494T124 618T248 666Q319 666 374 624T429 515Q429 485 418 459T392 417T361 389T335 371T324 363L338 354Q352 344 366 334T382 323Q457 264 457 174Q457 95 399 37T249 -22Q159 -22 101 29T43 155Q43 263 172 335L154 348Q133 361 127 368Q70 417 70 494ZM286 386L292 390Q298 394 301 396T311 403T323 413T334 425T345 438T355 454T364 471T369 491T371 513Q371 556 342 586T275 624Q268 625 242 625Q201 625 165 599T128 534Q128 511 141 492T167 463T217 431Q224 426 228 424L286 386ZM250 21Q308 21 350 55T392 137Q392 154 387 169T375 194T353 216T330 234T301 253T274 270Q260 279 244 289T218 306L210 311Q204 311 181 294T133 239T107 157Q107 98 150 60T250 21Z\"></path></defs><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\"><g data-mml-node=\"math\"><g data-mml-node=\"msup\"><g data-mml-node=\"mn\"><use xlink:href=\"#MJX-3373-TEX-N-31\"></use><use xlink:href=\"#MJX-3373-TEX-N-30\" transform=\"translate(500, 0)\"></use></g><g data-mml-node=\"TeXAtom\" transform=\"translate(1000, 393.1) scale(0.707)\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"mo\"><use xlink:href=\"#MJX-3373-TEX-N-2212\"></use></g><g data-mml-node=\"mn\" transform=\"translate(778, 0)\"><use xlink:href=\"#MJX-3373-TEX-N-38\"></use></g></g></g></g></g></svg> can be represented in Python using scientific notation <span class=\"nowrap\"><code class=\"language-python\">1e-8</code>.</span> </p></div> <pre python-executable=\"python-executable\">def newtonsqrt(n):\n    \"\"\"Use Newton's algorithm to approximate √n\"\"\"\n    # add code here\n\ndef test_newton():\n    assert abs(newtonsqrt(2) - 1.4142135623730951) &lt; 1e-6\n    assert abs(newtonsqrt(9) - 3) &lt; 1e-6\n    return \"Tests passed!\"\n\ntest_newton()</pre><x-quill goal=\"quill\"></x-quill></x-step>","goals":["quill"],"keywords":[]},"step-141":{"id":"step-141","title":"Step  ","html":"<x-step id=\"step-141\" goals=\"next-0\"><p><em>Lösung</em>. We keep up with two separate variables, which we call <code class=\"language-python\">x</code> and <em><code class=\"language-python\">old_x</code></em>, to compare the most recent two iterates: </p><pre python-executable=\"python-executable\">def newtonsqrt(n):\n    \"\"\"Use Newton's algorithm to approximate √n\"\"\"\n    x = 1\n    while True:\n        old_x = x\n        x = 1/2 * (x + n/x)\n        if abs(x - old_x)/old_x &lt; 1e-8:\n            return x</pre><p><button class=\"next-step\">Weiter</button></p></x-step>","goals":["next-0"],"keywords":[]},"step-142":{"id":"step-142","title":"Step  ","html":"<x-step id=\"step-142\" goals=\"quill\"><h2>Übungen</h2><div class=\"exercise\"> <p><strong>Exercise</strong><br>Write a function which prints an <svg style=\"vertical-align: -0.025ex\" width=\"5.481ex\" height=\"1.136ex\" class=\"mathjax\" viewBox=\"0 -491 2422.4 502\"><title>n \\times n</title><defs><path id=\"MJX-1834-TEX-I-1D45B\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"></path><path id=\"MJX-1834-TEX-N-D7\" d=\"M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z\"></path></defs><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><use xlink:href=\"#MJX-1834-TEX-I-1D45B\"></use></g><g data-mml-node=\"mo\" transform=\"translate(822.2, 0)\"><use xlink:href=\"#MJX-1834-TEX-N-D7\"></use></g><g data-mml-node=\"mi\" transform=\"translate(1822.4, 0)\"><use xlink:href=\"#MJX-1834-TEX-I-1D45B\"></use></g></g></g></svg> checkerboard pattern of <code class=\"language-python\">x</code>'s and <code class=\"language-python\">o</code>'s. </p><p><em>Note</em>: <code class=\"language-python\">\\\\n</code> in a string literal represents the \"newline\" character. You'll need to print this character after each row you've printed.</p></div> <pre python-executable=\"python-executable\">def checkerboard(n):\n    \"\"\"\n    Prints an n × n checkerboard, like:\n      \n    xoxo\n    oxox\n    xoxo\n    oxox\n    \"\"\"</pre><x-quill goal=\"quill\"></x-quill></x-step>","goals":["quill"],"keywords":[]},"step-143":{"id":"step-143","title":"Step  ","html":"<x-step id=\"step-143\" goals=\"quill\"><p><em>Lösung</em>. We loop through the rows and use an <code class=\"language-python\">if</code> statement to print a different output depending on whether the row is even-numbered or odd-numbered.</p><pre python-executable=\"python-executable\">def checkerboard(n):\n    \"Prints an n × n checkerboard\"\n    for i in range(n):\n        if i % 2 == 0:\n            print(\"xo\" * (n//2))\n        else:\n            print(\"ox\" * (n//2))\n        print(\"\\n\")</pre><div class=\"exercise\"> <p><strong>Exercise</strong><br>Write a function which prints <a href=\"https://en.wikipedia.org/wiki/Pascal%27s_triangle\" target=\"_blank\">Pascal's triangle</a> up to the $n$th row, where the top row counts as row zero. You might want to use a helper function <code class=\"language-python\">print_row(n,row)</code> to manage the responsibility of printing each row, as well as a helper function <code class=\"language-python\">next_row(row)</code> to calculate each row from the previous one. </p><p>Example output, for <span class=\"nowrap\"><code class=\"language-python\">n = 4</code>:</span> </p><pre class=\"language-md\"><code>        1\n      1   1\n    1   2   1\n  1   3   3   1\n1   4   6   4   1</code></pre><p><em>Note</em>: there's no solution to this one, but you can do it on your own!</p></div> <pre python-executable=\"python-executable\">def print_row(n,row):\n    \"\"\"\n    Prints the nth row (`row`) of Pascal's triangle\n    with appropriate spacing.\n    \"\"\"\n\ndef next_row(row):\n    \"\"\"\n    Returns the next row in Pascal's triangle.\n    Example: next_row([1,3,3,1]) == [1,4,6,4,1]\n    \"\"\"\n\ndef pascals_triangle(n):\n    \"\"\"\n    Print the first n rows of Pascal's triangle\n    \"\"\"</pre><x-quill goal=\"quill\"></x-quill></x-step>","goals":["quill"],"keywords":[]},"project-1":{"id":"project-1","title":"Project  ","html":"<x-step id=\"project-1\" goals=\"next-0\"><p>One of the most challenging aspects of learning to program is the difficulty of synthesizing individual skills in the service of a larger project. This section provides a stepping stone on that path by progressively solving a real-world problem. </p><p>You'll want to follow along either on your own computer or in <a href=\"https://mybinder.org/v2/gh/data-gymnasia/python-binder/master\" target=\"_blank\">Binder</a>. You can't use code blocks in this page, because there's an authentication step which requires a feature which isn't supported here.</p><p><button class=\"next-step\">Weiter</button></p></x-step>","goals":["next-0"],"keywords":[]},"step-144":{"id":"step-144","title":"Step  ","html":"<x-step id=\"step-144\" goals=\"next-0\"><h2>Spotify</h2><p>As an avid Spotify listener, you find that you'd prefer more flexibility in the way your playlists are built. For example, you find it tedious when two particularly long songs play back-to-back, and you want to eliminate those instances without having to read through and do it manually. Also, you want to have at least three separate genres represented in every block of eight consecutive songs. You want the flexibility to modify these requirements or add new ones at any time. </p><p>This is not the sort of capability that Spotify is ever going to provide through its app, but Spotify <em>does</em> support interaction through a programming language. Such an interface is called an <strong>API</strong> (application programming interface). </p><p><button class=\"next-step\">Weiter</button></p></x-step>","goals":["next-0"],"keywords":[]},"step-145":{"id":"step-145","title":"Step  ","html":"<x-step id=\"step-145\" goals=\"next-0\"><p>You decide to google <em>Spotify API</em> to see what the deal is. That takes you to the <a href=\"https://developer.spotify.com/documentation/web-api/\" target=\"_blank\">main Spotify API page</a>, where you read about how the API uses standard HTTPS requests (these are the requests that your browser is using in the background load webpages, enter information into forms on the internet, etc.). Rather than proceeding along this route, you think to yourself \"surely someone in the vast Python world has made a Python package to handle these HTTPS requests\". So you google \"Spotify Python API\". </p><p><button class=\"next-step\">Weiter</button></p></x-step>","goals":["next-0"],"keywords":[]},"step-146":{"id":"step-146","title":"Step  ","html":"<x-step id=\"step-146\" goals=\"next-0\"><p>Turns out, you were right. The first few hits pertain to a package called <span class=\"nowrap\"><code class=\"language-python\">spotipy</code>.</span> You check out <a href=\"https://spotipy.readthedocs.io/en/latest/\" target=\"_blank\">the docs</a> and find that you can install the package by running <em>pip install spotipy</em>. Since <code>pip</code> is a <x-gloss xid=\"command-line\">command line</x-gloss> tool, this is something you should run from the terminal.</p><p><em>Note</em>: if you're working in a Jupyter notebook, you can send code from a cell to the command line by prepending an exclamation point:</p><pre class=\"language-python\"><code>!pip install spotipy</code></pre><p><button class=\"next-step\">Weiter</button></p></x-step>","goals":["next-0"],"keywords":[]},"step-147":{"id":"step-147","title":"Step  ","html":"<x-step id=\"step-147\" goals=\"blank-0\"><p>Looking around in the documentation a bit more, we discover the functions <em><code class=\"language-python\">user_playlist_tracks</code></em> and <em><code class=\"language-python\">user_playlist_add_tracks</code></em>, which retrieve the tracks on a playlist and add new ones to it, respectively. So you decide to get the tracks from one of your playlists, manipulate them however you want inside the Python program, and put the new list in place of the old one. All we need from Spotify to make this work, in addition to the previous two functions, is a function to <span class=\"nowrap\"><x-blank-mc goal=\"blank-0\"><button class=\"choice\">remove the existing tracks</button><button class=\"choice\">swap tracks one at a time</button><button class=\"choice\">get a list of the playlist tracks</button></x-blank-mc>.</span> </p></x-step>","goals":["blank-0"],"keywords":[]},"step-148":{"id":"step-148","title":"Step  ","html":"<x-step id=\"step-148\" goals=\"blank-0\"><p>Looking around a bit more, you find <em><code class=\"language-python\">user_playlist_remove_all_occurrences_of_tracks</code></em>, which isn't exactly what you were looking for, but it will work since we can <span class=\"nowrap\"><x-blank-mc goal=\"blank-0\"><button class=\"choice\">remove every track originally on the playlist</button><button class=\"choice\">instruct it to remove every track on Spotify</button></x-blank-mc>.</span> </p></x-step>","goals":["blank-0"],"keywords":[]},"step-149":{"id":"step-149","title":"Step  ","html":"<x-step id=\"step-149\" goals=\"next-0\"><p>Your plan is beginning to take shape. You decide to make sure everything works before getting into the details of how you're going to modify the playlist. You follow the instructions in the documentation for getting the appropriate authorization credentials for your Python program to access your Spotify account. That step is a bit tedious, but it's going to be worth it. Working from the example in the documentation, you eventually arrive at some code that looks like the following (note that the values of the <code class=\"language-python\">CLIENT</code> variables and the <em><code class=\"language-python\">playlist_id</code></em> below are fake, so yours will necessarily be different). </p><pre class=\"language-python\"><code>import spotipy\nimport spotipy.util as util\n\nusername = 'sswatson'\nscope = 'user-library-read'\nscope = 'playlist-modify-public'\n\nCLIENT_ID = 'bcc57908a2e54cee94f9e2307db67c2e'\nCLIENT_SECRET = '6831b3ceaf0a40a6a1fdeb67105ef19b'\n\nplaylist_id = '57hQnYeBC4u0IUhaaHmM0k'\n  \ntoken = util.prompt_for_user_token(username, \n                                   scope,\n                                   client_id=CLIENT_ID,\n                                   client_secret=CLIENT_SECRET,\n                                   redirect_uri='http://localhost/')\n\nsp = spotipy.Spotify(auth=token)</code></pre><p><button class=\"next-step\">Weiter</button></p></x-step>","goals":["next-0"],"keywords":[]},"step-150":{"id":"step-150","title":"Step  ","html":"<x-step id=\"step-150\" goals=\"next-0\"><p>Next, you implement your plan sans-track-modification, to make sure the functions work as expected. </p><pre class=\"language-python\"><code>original_tracks = sp.user_playlist_tracks(username, playlist_id)\n# shorten the name of the remove tracks function\nremove_tracks = sp.user_playlist_remove_all_occurrences_of_tracks\nremove_tracks(username, playlist_id, original_tracks)\nsp.user_playlist_add_tracks(username, playlist_id, original_tracks)</code></pre><p>That second line is there because you decided that function's name was so long it was getting unwieldy. </p><p><button class=\"next-step\">Weiter</button></p></x-step>","goals":["next-0"],"keywords":[]},"step-151":{"id":"step-151","title":"Step  ","html":"<x-step id=\"step-151\" goals=\"next-0\"><p>Hmm. Fehler. Specifically, a <span class=\"nowrap\"><code class=\"language-python\">SpotifyException</code>,</span> which suggests that you didn't use the API in the intended way. You'll have to dig into this to figure out what went wrong. But first, it's a bit untidy to have those four lines of code loose in our program. Let's wrap them in a function. The playlist id should be an argument, and we should also take as an argument a track-modifying function that we'll start using once we get to that part. </p><pre class=\"language-python\"><code>def modify_playlist_tracks(playlist_id, track_modifier):\n    original_tracks = sp.user_playlist_tracks(username, playlist_id)\n    new_tracks = track_modifier(original_tracks)\n    remove_tracks = sp.user_playlist_remove_all_occurrences_of_tracks\n    remove_tracks(username, playlist_id, original_tracks)\n    sp.user_playlist_add_tracks(username, playlist_id, new_tracks)</code></pre><p>Now let's figure out the error. If we examine the traceback supplied as a part of the error message, we can see that the error is being thrown from the line where we call <em><code class=\"language-python\">remove_tracks</code></em>. So we look at the documentation for that function. </p><pre class=\"language-python\"><code>help(remove_tracks)</code></pre><p>We see that the <code class=\"language-python\">tracks</code> argument is supposed to be a list of playlist ids. Is that what <em><code class=\"language-python\">user_playlist_tracks</code></em> returns? You investigate. </p><pre class=\"language-python\"><code>original_tracks = sp.user_playlist_tracks(username, playlist_id)\noriginal_tracks</code></pre><p>The output from that expression prints all over the screen, and it looks like it has a lot more data than just a list of id's. That's actually pretty helpful, because we'll need that data to modify the list appropriately. But in the meantime, we need to extract the actual playlist ids. </p><p><button class=\"next-step\">Weiter</button></p></x-step>","goals":["next-0"],"keywords":[]},"step-152":{"id":"step-152","title":"Step  ","html":"<x-step id=\"step-152\" goals=\"blank-0\"><p>You begin by checking <em><code class=\"language-python\">type(original_tracks)</code></em>. It's a <span class=\"nowrap\"><x-blank-mc goal=\"blank-0\"><button class=\"choice\">dict</button><button class=\"choice\">list</button><button class=\"choice\">tuple</button></x-blank-mc>.</span> So you have a look at its keys: </p><pre class=\"language-python\"><code>original_tracks.keys()</code></pre></x-step>","goals":["blank-0"],"keywords":[]},"step-153":{"id":"step-153","title":"Step  ","html":"<x-step id=\"step-153\" goals=\"blank-0\"><p>This returns</p><pre class=\"language-python\"><code>dict_keys(['href', 'items', 'limit', 'next', 'offset', 'previous', 'total'])</code></pre><p>Without looking to carefully at the other items, it's a good guess that <code class=\"language-python\">'items'</code> is the one you want. You check <em><code class=\"language-python\">type(original_tracks['items'])</code></em> and find that it's a <span class=\"nowrap\"><x-blank-mc goal=\"blank-0\"><button class=\"choice\">list</button><button class=\"choice\">dict</button><button class=\"choice\">tuple</button></x-blank-mc>.</span> To have a look at the first one, you do <em><code class=\"language-python\">original_tracks['items'][0]</code></em>. Repeating this step-by-step inspection, you find finally that <em><code class=\"language-python\">original_tracks['items'][0]['track']['id']</code></em> is an actual playlist id. </p></x-step>","goals":["blank-0"],"keywords":[]},"step-154":{"id":"step-154","title":"Step  ","html":"<x-step id=\"step-154\" goals=\"quill\"><div class=\"exercise\"> <p><strong>Exercise</strong><br>Write a <x-gloss xid=\"listcomp\">list comprehension</x-gloss> to calculate the list of all of the tracks' playlist ids. </p></div> <pre python-executable=\"python-executable\"> </pre><x-quill goal=\"quill\"></x-quill></x-step>","goals":["quill"],"keywords":[]},"step-155":{"id":"step-155","title":"Step  ","html":"<x-step id=\"step-155\" goals=\"next-0\"><p><em>Lösung</em>. <em><code class=\"language-python\">[item for item in original_tracks['items']]</code></em> would return the <code class=\"language-python\">'items'</code> list. To map each item to its playlist id, we index it with <code class=\"language-python\">'track'</code> and then with <code class=\"language-python\">'id'</code> as above. So we get <em><code class=\"language-python\">[item['track']['id'] for item in original_tracks['items']]</code></em> </p><p><button class=\"next-step\">Weiter</button></p></x-step>","goals":["next-0"],"keywords":[]},"step-156":{"id":"step-156","title":"Step  ","html":"<x-step id=\"step-156\" goals=\"quill\"><p>You insert this list comprehension into our function to fix it. You decide to reverse the list of tracks just to confirm that running the code has an effect on the Spotify side. </p><pre class=\"language-python\"><code>def modify_playlist_tracks(playlist_id, track_modifier):\n    original_tracks = sp.user_playlist_tracks(username, playlist_id)\n    new_tracks = track_modifier(original_tracks)\n    remove_tracks = sp.user_playlist_remove_all_occurrences_of_tracks\n    original_ids = [item['track']['id'] for item in\n                                        original_tracks['items']]\n    remove_tracks(username, playlist_id, original_ids)\n    sp.user_playlist_add_tracks(username, playlist_id, new_tracks)\n\n\ndef track_modifier(tracks):\n    return reversed([item['track']['id'] for item in tracks['items']])\n\n\nmodify_playlist_tracks(playlist_id, track_modifier)</code></pre><p>Das funktioniert! You can check that the order of the playlist was reversed. </p><div class=\"exercise\"> <p><strong>Exercise</strong><br>Add more features to the function <em><code class=\"language-python\">track_modifier</code></em> to modify playlists in ways that you find interesting or desirable. In the answer box below, describe what you did and add code snippets as you see fit.</p></div> <x-quill goal=\"quill\"></x-quill></x-step>","goals":["quill"],"keywords":[]},"project-2":{"id":"project-2","title":"Project  ","html":"<x-step id=\"project-2\" goals=\"next-0\"><p>Suppose you want to send an email to dozens of people, with some elements of the message varying by recipient. For example, you'd like to insert the recipient's first name in the salutation, and you might also need to insert a personal URL or passcode, information on the recipient's status, etc.</p><p>This problem is called <em>mail merge</em>, and there are many commercial software solutions available. However, in this section you'll implement a simple and flexible mail merge in Python. You will want to do this on your computer, because the authorization step involves using your operating system keychain. </p><p><button class=\"next-step\">Weiter</button></p></x-step>","goals":["next-0"],"keywords":[]},"step-157":{"id":"step-157","title":"Step  ","html":"<x-step id=\"step-157\" goals=\"next-0\"><h2>yagmail</h2><p>The first hurdle is to securely authorize your Python program to access your email account. You're a Gmail user, so you search for a Gmail package for Python and find <a href=\"https://github.com/kootenpv/yagmail\" target=\"_blank\">yagmail</a>. </p><p>Following the installation instructions on the project GitHub page, you run <code class=\"language-python\">pip3 install yagmail[all]</code> from the <x-gloss xid=\"command-line\">command line</x-gloss> to install <span class=\"nowrap\"><code class=\"language-python\">yagmail</code>.</span> </p><p><button class=\"next-step\">Weiter</button></p></x-step>","goals":["next-0"],"keywords":[]},"step-158":{"id":"step-158","title":"Step  ","html":"<x-step id=\"step-158\" goals=\"next-0\"><p>Continuing to follow the instructions, you run</p><pre class=\"language-python\"><code>import yagmail\nyagmail.register('mygmailusername')</code></pre><p>and enter the password for the Gmail account in the resulting password prompt. This stores the password in the operating system keychain so you don't have to keep entering it. (Note: if you're using dual authentication on your Google account, you'll need to generate and enter a special app password instead of your regular password; see <a href=\"https://support.google.com/accounts/answer/185833?p=InvalidSecondFactor\" target=\"_blank\">this info page</a> for instructions.)</p><p><button class=\"next-step\">Weiter</button></p></x-step>","goals":["next-0"],"keywords":[]},"step-159":{"id":"step-159","title":"Step  ","html":"<x-step id=\"step-159\" goals=\"blank-0\"><p>Now you can set up an <code class=\"language-python\">SMTP</code> object for sending messages. </p><pre class=\"language-python\"><code>yag = yagmail.SMTP(\"mygmailusername@gmail.com\")</code></pre><p>In the documentation, you read that this object has a <code class=\"language-python\">send</code> method whose parameter list includes <span class=\"nowrap\"><code class=\"language-python\">to</code>,</span> <span class=\"nowrap\"><code class=\"language-python\">subject</code>,</span> and <span class=\"nowrap\"><code class=\"language-python\">contents</code>.</span> you want to call this method once for each recipient, and for that you use a <span class=\"nowrap\"><x-blank-mc goal=\"blank-0\"><button class=\"choice\">for loop</button><button class=\"choice\">while loop</button><button class=\"choice\">if statement</button></x-blank-mc>.</span> </p></x-step>","goals":["blank-0"],"keywords":[]},"step-160":{"id":"step-160","title":"Step  ","html":"<x-step id=\"step-160\" goals=\"next-0\"><h2>CSV</h2><p>Before sending the message, you have to figure out to store the data for each recipient and how to insert that data into the message. One easy solution to the former problem is to store the data in a spreadsheet. You decide to skip the spreadsheet software since the situation is so simple. Instead, you make a file called <span class=\"nowrap\"><code class=\"language-md\">mail-merge-data.csv</code>,</span> open it in a text editor, and insert the contents</p><pre>Name,Email,Status\nViorica,virica@example.com,pending\nSidra,sidra_tiwana@example.com,completed\nAlfonso,alfonso.serrano@example.com,pending</pre><p>You save the file and proceed to figuring out how to load it into Python. </p><p><button class=\"next-step\">Weiter</button></p></x-step>","goals":["next-0"],"keywords":[]},"step-161":{"id":"step-161","title":"Step  ","html":"<x-step id=\"step-161\" goals=\"next-0\"><h2>Panda</h2><p>You google \"enter CSV in Python\" and scan the first several search results. The first couple show examples with a dozen or so lines of code, which seems more complicated than necessary. Going back to the search results, you see a function called <em><code class=\"language-python\">pandas.read_csv</code></em>, and you remember that Pandas is the recommended package for handling spreadsheet data in Python. So you do </p><pre class=\"language-python\"><code>import pandas as pd\nmailData = pd.read_csv(\"mail-merge-data.csv\")</code></pre><p>You check <code class=\"language-python\">type(mailData)</code> and see that <code class=\"language-python\">mailData</code> is a <span class=\"nowrap\"><code class=\"language-python\">DataFrame</code>,</span> which is the general Pandas type for tabular data. </p><p><button class=\"next-step\">Weiter</button></p></x-step>","goals":["next-0"],"keywords":[]},"step-162":{"id":"step-162","title":"Step  ","html":"<x-step id=\"step-162\" goals=\"blank-0\"><p>Now you have to figure out how to loop over the rows of a <span class=\"nowrap\"><code class=\"language-python\">DataFrame</code>.</span> You search the web for \"how to loop over rows of pandas dataframe\" and discover the method <x-blank-mc goal=\"blank-0\"><button class=\"choice\"><strong>itertuples</strong> </button><button class=\"choice\"> <strong>iteritems</strong> </button><button class=\"choice\"> <strong>items</strong></button></x-blank-mc> (look it up!). </p></x-step>","goals":["blank-0"],"keywords":[]},"step-163":{"id":"step-163","title":"Step  ","html":"<x-step id=\"step-163\" goals=\"next-0\"><p>You do <code class=\"language-python\">list(mailData.itertuples())[0]</code> to get an example row from the <span class=\"nowrap\"><code class=\"language-python\">DataFrame</code>,</span> and you call <code class=\"language-python\">dir</code> on it to look for the right method for extracting each column value. You see that <span class=\"nowrap\"><code class=\"language-python\">Name</code>,</span> <span class=\"nowrap\"><code class=\"language-python\">Email</code>,</span> and <code class=\"language-python\">Status</code> are attributes of the row, so you can access them using dot syntax (like <code class=\"language-python\">row.Email</code>). </p><p><button class=\"next-step\">Weiter</button></p></x-step>","goals":["next-0"],"keywords":[]},"step-164":{"id":"step-164","title":"Step  ","html":"<x-step id=\"step-164\" goals=\"blank-0\"><p>Finally, you need to insert information from each <code class=\"language-python\">DataFrame</code> row into the message. Fortunately, you alreday know a great way to do this: <span class=\"nowrap\"><x-blank-mc goal=\"blank-0\"><button class=\"choice\">f-strings</button><button class=\"choice\">dictionaries</button><button class=\"choice\">lists</button></x-blank-mc>!</span> </p></x-step>","goals":["blank-0"],"keywords":[]},"step-165":{"id":"step-165","title":"Step  ","html":"<x-step id=\"step-165\" goals=\"quill\"><p>It will be a bit awkward to type the whole message into the line where you call <span class=\"nowrap\"><code class=\"language-python\">yag.send</code>,</span> so instead you write a function that takes <code class=\"language-python\">row</code> as a parameter and returns the message. </p><pre class=\"language-python\"><code>def message(row):\n    return f\"\"\"\n    Dear {row.Name},\n    \n    Thanks for participating! Your status is {row.Status}. \n    \n    Yours,\n    Roza\n    \"\"\"</code></pre><div class=\"exercise\"> <p><strong>Exercise</strong><br>Tie all of the above together to write a couple more lines of code that will actually send the messages. </p></div> <pre python-executable=\"python-executable\"> </pre><x-quill goal=\"quill\"></x-quill></x-step>","goals":["quill"],"keywords":[]},"step-166":{"id":"step-166","title":"Step  ","html":"<x-step id=\"step-166\" goals=\"next-0\"><p><em>Lösung</em>. We supply the <code class=\"language-python\">Email</code> attribute of <code class=\"language-python\">row</code> to the <code class=\"language-python\">to</code> argument, and <code class=\"language-python\">message(row)</code> to <span class=\"nowrap\"><code class=\"language-python\">contents</code>:</span></p><pre class=\"language-python\"><code>for row in mailData.itertuples():\n    yag.send(to=row.Email, \n             subject=\"Your status\",\n             contents = message(row))</code></pre><p><button class=\"next-step\">Weiter</button></p></x-step>","goals":["next-0"],"keywords":[]},"step-167":{"id":"step-167","title":"Step  ","html":"<x-step id=\"step-167\" goals=\"\"></x-step>","goals":[],"keywords":[]}},"availableLocales":["en","de"],"biosJSON":"{}","glossJSON":"{\"package\":{\"title\":\"Package\",\"text\":\"<p>A package is a collection of code that is distributed by the authors and may be loaded by a user to extend the functionality of the language.</p>\"},\"command-line\":{\"title\":\"Command line\",\"text\":\"<p>A <strong>command-line interface</strong> (CLI) is a way of interacting with a computer using a sequence of commands entered as lines of text. Each typed command is submitted to the command line application by pressing \\\"enter\\\" and is run by the computer.</p><p>On macOS, the command-line application is called <em>Terminal</em> and may be opened by spotlighting \\\"Terminal\\\" (do ⌘-spacebar and start typing \\\"Terminal\\\").</p><p>The language for the Windows CLI is quite different from the standard one for macOS/Linux. We recommend ins talling the <a href=\\\"https://gitforwindows.org\\\" target=\\\"_blank\\\">Git Bash</a> emulator so that you can learn to operate the command line in a cross-platform way.</p>\"},\"rounding\":{\"title\":\"Floating point representation\",\"text\":\"<p>A real number typically has to be rounded by about <svg style=\\\"vertical-align: -0.05ex\\\" width=\\\"5.22ex\\\" height=\\\"2.005ex\\\" class=\\\"mathjax\\\" viewBox=\\\"0 -864 2307.2 886\\\"><title>10^{-16}</title><defs><path id=\\\"MJX-199-TEX-N-31\\\" d=\\\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\\\"></path><path id=\\\"MJX-199-TEX-N-30\\\" d=\\\"M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z\\\"></path><path id=\\\"MJX-199-TEX-N-2212\\\" d=\\\"M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z\\\"></path><path id=\\\"MJX-199-TEX-N-36\\\" d=\\\"M42 313Q42 476 123 571T303 666Q372 666 402 630T432 550Q432 525 418 510T379 495Q356 495 341 509T326 548Q326 592 373 601Q351 623 311 626Q240 626 194 566Q147 500 147 364L148 360Q153 366 156 373Q197 433 263 433H267Q313 433 348 414Q372 400 396 374T435 317Q456 268 456 210V192Q456 169 451 149Q440 90 387 34T253 -22Q225 -22 199 -14T143 16T92 75T56 172T42 313ZM257 397Q227 397 205 380T171 335T154 278T148 216Q148 133 160 97T198 39Q222 21 251 21Q302 21 329 59Q342 77 347 104T352 209Q352 289 347 316T329 361Q302 397 257 397Z\\\"></path></defs><g stroke=\\\"currentColor\\\" fill=\\\"currentColor\\\" stroke-width=\\\"0\\\" transform=\\\"matrix(1 0 0 -1 0 0)\\\"><g data-mml-node=\\\"math\\\"><g data-mml-node=\\\"msup\\\"><g data-mml-node=\\\"mn\\\"><use xlink:href=\\\"#MJX-199-TEX-N-31\\\"></use><use xlink:href=\\\"#MJX-199-TEX-N-30\\\" transform=\\\"translate(500, 0)\\\"></use></g><g data-mml-node=\\\"TeXAtom\\\" transform=\\\"translate(1000, 393.1) scale(0.707)\\\" data-mjx-texclass=\\\"ORD\\\"><g data-mml-node=\\\"mo\\\"><use xlink:href=\\\"#MJX-199-TEX-N-2212\\\"></use></g><g data-mml-node=\\\"mn\\\" transform=\\\"translate(778, 0)\\\"><use xlink:href=\\\"#MJX-199-TEX-N-31\\\"></use><use xlink:href=\\\"#MJX-199-TEX-N-36\\\" transform=\\\"translate(500, 0)\\\"></use></g></g></g></g></g></svg> times its absolute value to be represented as a float. For example, the difference between <svg style=\\\"vertical-align: -0.225ex\\\" width=\\\"3.061ex\\\" height=\\\"2.398ex\\\" class=\\\"mathjax\\\" viewBox=\\\"0 -960.5 1353 1060\\\"><title>\\\\sqrt{2}</title><defs><path id=\\\"MJX-200-TEX-N-221A\\\" d=\\\"M95 178Q89 178 81 186T72 200T103 230T169 280T207 309Q209 311 212 311H213Q219 311 227 294T281 177Q300 134 312 108L397 -77Q398 -77 501 136T707 565T814 786Q820 800 834 800Q841 800 846 794T853 782V776L620 293L385 -193Q381 -200 366 -200Q357 -200 354 -197Q352 -195 256 15L160 225L144 214Q129 202 113 190T95 178Z\\\"></path><path id=\\\"MJX-200-TEX-N-32\\\" d=\\\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\\\"></path></defs><g stroke=\\\"currentColor\\\" fill=\\\"currentColor\\\" stroke-width=\\\"0\\\" transform=\\\"matrix(1 0 0 -1 0 0)\\\"><g data-mml-node=\\\"math\\\"><g data-mml-node=\\\"msqrt\\\"><g transform=\\\"translate(853, 0)\\\"><g data-mml-node=\\\"mn\\\"><use xlink:href=\\\"#MJX-200-TEX-N-32\\\"></use></g></g><g data-mml-node=\\\"mo\\\" transform=\\\"translate(0, 100.5)\\\"><use xlink:href=\\\"#MJX-200-TEX-N-221A\\\"></use></g><rect width=\\\"500\\\" height=\\\"60\\\" x=\\\"853\\\" y=\\\"840.5\\\"></rect></g></g></g></svg> and the float which is closest to <svg style=\\\"vertical-align: -0.225ex\\\" width=\\\"3.061ex\\\" height=\\\"2.398ex\\\" class=\\\"mathjax\\\" viewBox=\\\"0 -960.5 1353 1060\\\"><title>\\\\sqrt{2}</title><defs><path id=\\\"MJX-200-TEX-N-221A\\\" d=\\\"M95 178Q89 178 81 186T72 200T103 230T169 280T207 309Q209 311 212 311H213Q219 311 227 294T281 177Q300 134 312 108L397 -77Q398 -77 501 136T707 565T814 786Q820 800 834 800Q841 800 846 794T853 782V776L620 293L385 -193Q381 -200 366 -200Q357 -200 354 -197Q352 -195 256 15L160 225L144 214Q129 202 113 190T95 178Z\\\"></path><path id=\\\"MJX-200-TEX-N-32\\\" d=\\\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\\\"></path></defs><g stroke=\\\"currentColor\\\" fill=\\\"currentColor\\\" stroke-width=\\\"0\\\" transform=\\\"matrix(1 0 0 -1 0 0)\\\"><g data-mml-node=\\\"math\\\"><g data-mml-node=\\\"msqrt\\\"><g transform=\\\"translate(853, 0)\\\"><g data-mml-node=\\\"mn\\\"><use xlink:href=\\\"#MJX-200-TEX-N-32\\\"></use></g></g><g data-mml-node=\\\"mo\\\" transform=\\\"translate(0, 100.5)\\\"><use xlink:href=\\\"#MJX-200-TEX-N-221A\\\"></use></g><rect width=\\\"500\\\" height=\\\"60\\\" x=\\\"853\\\" y=\\\"840.5\\\"></rect></g></g></g></svg> is about <svg style=\\\"vertical-align: -0.05ex\\\" width=\\\"12.008ex\\\" height=\\\"2.02ex\\\" class=\\\"mathjax\\\" viewBox=\\\"0 -871.1 5307.7 893.1\\\"><title>9.66 \\\\times 10^{-17}</title><defs><path id=\\\"MJX-201-TEX-N-39\\\" d=\\\"M352 287Q304 211 232 211Q154 211 104 270T44 396Q42 412 42 436V444Q42 537 111 606Q171 666 243 666Q245 666 249 666T257 665H261Q273 665 286 663T323 651T370 619T413 560Q456 472 456 334Q456 194 396 97Q361 41 312 10T208 -22Q147 -22 108 7T68 93T121 149Q143 149 158 135T173 96Q173 78 164 65T148 49T135 44L131 43Q131 41 138 37T164 27T206 22H212Q272 22 313 86Q352 142 352 280V287ZM244 248Q292 248 321 297T351 430Q351 508 343 542Q341 552 337 562T323 588T293 615T246 625Q208 625 181 598Q160 576 154 546T147 441Q147 358 152 329T172 282Q197 248 244 248Z\\\"></path><path id=\\\"MJX-201-TEX-N-2E\\\" d=\\\"M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z\\\"></path><path id=\\\"MJX-201-TEX-N-36\\\" d=\\\"M42 313Q42 476 123 571T303 666Q372 666 402 630T432 550Q432 525 418 510T379 495Q356 495 341 509T326 548Q326 592 373 601Q351 623 311 626Q240 626 194 566Q147 500 147 364L148 360Q153 366 156 373Q197 433 263 433H267Q313 433 348 414Q372 400 396 374T435 317Q456 268 456 210V192Q456 169 451 149Q440 90 387 34T253 -22Q225 -22 199 -14T143 16T92 75T56 172T42 313ZM257 397Q227 397 205 380T171 335T154 278T148 216Q148 133 160 97T198 39Q222 21 251 21Q302 21 329 59Q342 77 347 104T352 209Q352 289 347 316T329 361Q302 397 257 397Z\\\"></path><path id=\\\"MJX-201-TEX-N-D7\\\" d=\\\"M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z\\\"></path><path id=\\\"MJX-201-TEX-N-31\\\" d=\\\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\\\"></path><path id=\\\"MJX-201-TEX-N-30\\\" d=\\\"M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z\\\"></path><path id=\\\"MJX-201-TEX-N-2212\\\" d=\\\"M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z\\\"></path><path id=\\\"MJX-201-TEX-N-37\\\" d=\\\"M55 458Q56 460 72 567L88 674Q88 676 108 676H128V672Q128 662 143 655T195 646T364 644H485V605L417 512Q408 500 387 472T360 435T339 403T319 367T305 330T292 284T284 230T278 162T275 80Q275 66 275 52T274 28V19Q270 2 255 -10T221 -22Q210 -22 200 -19T179 0T168 40Q168 198 265 368Q285 400 349 489L395 552H302Q128 552 119 546Q113 543 108 522T98 479L95 458V455H55V458Z\\\"></path></defs><g stroke=\\\"currentColor\\\" fill=\\\"currentColor\\\" stroke-width=\\\"0\\\" transform=\\\"matrix(1 0 0 -1 0 0)\\\"><g data-mml-node=\\\"math\\\"><g data-mml-node=\\\"mn\\\"><use xlink:href=\\\"#MJX-201-TEX-N-39\\\"></use><use xlink:href=\\\"#MJX-201-TEX-N-2E\\\" transform=\\\"translate(500, 0)\\\"></use><use xlink:href=\\\"#MJX-201-TEX-N-36\\\" transform=\\\"translate(778, 0)\\\"></use><use xlink:href=\\\"#MJX-201-TEX-N-36\\\" transform=\\\"translate(1278, 0)\\\"></use></g><g data-mml-node=\\\"mo\\\" transform=\\\"translate(2000.2, 0)\\\"><use xlink:href=\\\"#MJX-201-TEX-N-D7\\\"></use></g><g data-mml-node=\\\"msup\\\" transform=\\\"translate(3000.4, 0)\\\"><g data-mml-node=\\\"mn\\\"><use xlink:href=\\\"#MJX-201-TEX-N-31\\\"></use><use xlink:href=\\\"#MJX-201-TEX-N-30\\\" transform=\\\"translate(500, 0)\\\"></use></g><g data-mml-node=\\\"TeXAtom\\\" transform=\\\"translate(1000, 393.1) scale(0.707)\\\" data-mjx-texclass=\\\"ORD\\\"><g data-mml-node=\\\"mo\\\"><use xlink:href=\\\"#MJX-201-TEX-N-2212\\\"></use></g><g data-mml-node=\\\"mn\\\" transform=\\\"translate(778, 0)\\\"><use xlink:href=\\\"#MJX-201-TEX-N-31\\\"></use><use xlink:href=\\\"#MJX-201-TEX-N-37\\\" transform=\\\"translate(500, 0)\\\"></use></g></g></g></g></g></svg>.</p><p>However, numbers which are rational with a power of 2 in the denominator (including integers) can typically be represented exactly. Exceptions are when the number itself is very large or when the power of 2 in the denominator is very large.</p>\"},\"function\":{\"title\":\"Function\",\"text\":\"<p>A packaged block of related code for performing a specific computation or action. Values to be input are called <strong>parameters</strong>, and they can be given default values:</p><p><pre>def add(x, y, z=0):\\n    return x + y + z</pre></p><p><pre>add(3,2) # returns 5\\nadd(3,2,z=7) # returns 12</pre></p>\"},\"respectively\":{\"title\":\"Respectively\",\"text\":\"<p><em>Respectively</em> means <em>in the given order</em>. For example, the sentence \\\"Alice and Bob wore a green and a blue shirt, respectively.\\\" means that Alice wore a green shirt and Bob wore a blue shirt.</p>\"},\"syntax\":{\"title\":\"Syntax\",\"text\":\"<p>Syntax refers to the textual <strong>form</strong> of a given construct in a programming language. Examples:</p><p>Indexing: <code>myList[0], myDict[\\\"green\\\"]</code></p><p>Named functions: <code>myFunction(x)</code></p><p>Anonymous functions: <code>lambda x,y: x**y</code></p><p>Lists: <code>[1, 2, 3]</code></p><p>Tuples: <code>(1, 2, 3)</code></p><p>Dictionaries: <code>{\\\"a\\\": 1, \\\"b\\\": 2}</code></p><p>Dot syntax: <code>module.function, object.attribute, object.method()</code></p>\"},\"method\":{\"title\":\"method\",\"text\":\"<p>A function associated with a specific class and called using dot syntax from an instance of that class.</p><p>For exapmle, in <span class=\\\"nowrap\\\"><code>\\\",\\\".join([1,2,3])</code>,</span> <code>\\\",\\\"</code> is a string and <code>join</code> is a method of the string class.</p>\"},\"immutable\":{\"title\":\"Immutable\",\"text\":\"<p>A type is immutable if the values it stores cannot be changed. For example,</p><p><pre>T = (1, 2, 3)\\nT[1] = 4</pre></p><p>throws an error, because tuples are immutable. Changes in mutable data structures can be handled by assigning <strong>new</strong> instances of the type to the variable:</p><p><pre>T = (1, 2, 3)\\nT = (T[0], 4, T[2])</pre></p><p>Dictionaries, lists, and sets are mutable.</p>\"},\"listcomp\":{\"title\":\"List Comprehension\",\"text\":\"<p>Special syntax for generating lists by mapping and filtering. To remove the elements of <code>L</code> not satisfying a condition <code>cond</code> and apply a function <code>f</code> to the remaining elements:</p><p><pre>[f(x) for x in L if cond(x)]</pre></p><p>The <code>if</code> clause may be omitted.</p><p><pre>[x**2 for x in range(5)\\n        if x % 2 == 0]</pre></p><p>returns <code>[0, 4, 16]</code></p>\"},\"dictionary\":{\"title\":\"Dictionary\",\"text\":\"<p>An unordered, mutable data type used for encoding a function whose domain is a finite set.</p><p>For example, if we set</p><p><span class=\\\"nowrap\\\"><code>D = {'a': 1, 'b': 2, 'c': 3}</code>,</span></p><p>then the expression <code>D['b']</code> returns <span class=\\\"nowrap\\\"><code>2</code>.</span></p>\"},\"list\":{\"title\":\"List\",\"text\":\"<p>A mutable data type for storing an ordered sequence of objects.</p><pre class=\\\"language-python\\\"><code>L = [5, \\\"Hello\\\", \\\"world\\\", 6, [1,2,3]]\\nL[0] # returns 5\\nL[4][1] # returns 2</code></pre>\"}}","hintsJSON":"{\"welcome\":\"<p>Willkommen bei Data Gymnasia! Ich bin Bruno, dein persönlicher Tutor. <img class=\\\"emoji\\\" width=\\\"20\\\" height=\\\"20\\\" src=\\\"https://static.mathigon.org/emoji/mortar_board.png\\\" alt=\\\"mortar_board\\\"></p>\",\"account\":\"<p>Du kannst <span class=\\\"nowrap\\\"><x-target class=\\\"step-target pill\\\" to=\\\".nav-link.popup-target\\\">ein kostenloses Konto erstellen</x-target>,</span> um deine Fortschritte zu speichern.</p>\",\"tutorial1\":\"<p>Unser Inhalt ist in kleine Abschnitte unterteilt. Du musst die Aufgaben lösen, um zu zu sehen wie es weiter geht.</p>\",\"tutorial2\":\"<p>Wir speichern alle deine Fortschritte, so dass du später wiederkommen und genau dort weitermachen kannst, wo du aufgehört hast.</p>\",\"correct\":[\"<p>Gut gemacht! <img class=\\\"emoji\\\" width=\\\"20\\\" height=\\\"20\\\" src=\\\"https://static.mathigon.org/emoji/relaxed.png\\\" alt=\\\"relaxed\\\"></p>\",\"<p>Tolle Arbeit! <img class=\\\"emoji\\\" width=\\\"20\\\" height=\\\"20\\\" src=\\\"https://static.mathigon.org/emoji/relieved.png\\\" alt=\\\"relieved\\\"></p>\",\"<p>Fantastisch! <img class=\\\"emoji\\\" width=\\\"20\\\" height=\\\"20\\\" src=\\\"https://static.mathigon.org/emoji/grinning.png\\\" alt=\\\"grinning\\\"></p>\",\"<p>Brilliant! <img class=\\\"emoji\\\" width=\\\"20\\\" height=\\\"20\\\" src=\\\"https://static.mathigon.org/emoji/thumbsup.png\\\" alt=\\\"thumbsup\\\"></p>\",\"<p>Ausgezeichnet! <img class=\\\"emoji\\\" width=\\\"20\\\" height=\\\"20\\\" src=\\\"https://static.mathigon.org/emoji/ok_hand.png\\\" alt=\\\"ok_hand\\\"></p>\",\"<p>Echt cool. <img class=\\\"emoji\\\" width=\\\"20\\\" height=\\\"20\\\" src=\\\"https://static.mathigon.org/emoji/sunglasses.png\\\" alt=\\\"sunglasses\\\"></p>\",\"<p>Ich bin begeistert! <img class=\\\"emoji\\\" width=\\\"20\\\" height=\\\"20\\\" src=\\\"https://static.mathigon.org/emoji/v.png\\\" alt=\\\"v\\\"></p>\",\"<p>Weiter so! <img class=\\\"emoji\\\" width=\\\"20\\\" height=\\\"20\\\" src=\\\"https://static.mathigon.org/emoji/blush.png\\\" alt=\\\"blush\\\"></p>\",\"<p>Sehr schön! <img class=\\\"emoji\\\" width=\\\"20\\\" height=\\\"20\\\" src=\\\"https://static.mathigon.org/emoji/relaxed.png\\\" alt=\\\"relaxed\\\"></p>\",\"<p>Beeindruckend! <img class=\\\"emoji\\\" width=\\\"20\\\" height=\\\"20\\\" src=\\\"https://static.mathigon.org/emoji/trophy.png\\\" alt=\\\"trophy\\\"></p>\",\"<p>Hervorragend! <img class=\\\"emoji\\\" width=\\\"20\\\" height=\\\"20\\\" src=\\\"https://static.mathigon.org/emoji/grin.png\\\" alt=\\\"grin\\\"></p>\",\"<p>Super! <img class=\\\"emoji\\\" width=\\\"20\\\" height=\\\"20\\\" src=\\\"https://static.mathigon.org/emoji/star.png\\\" alt=\\\"star\\\"></p>\",\"<p>Wunderbar! <img class=\\\"emoji\\\" width=\\\"20\\\" height=\\\"20\\\" src=\\\"https://static.mathigon.org/emoji/smiley.png\\\" alt=\\\"smiley\\\"></p>\"],\"incorrect\":[\"<p>Das ist noch nicht ganz richtig. <img class=\\\"emoji\\\" width=\\\"20\\\" height=\\\"20\\\" src=\\\"https://static.mathigon.org/emoji/white_frowning_face.png\\\" alt=\\\"white_frowning_face\\\"></p>\",\"<p>Bist du dir da sicher? <img class=\\\"emoji\\\" width=\\\"20\\\" height=\\\"20\\\" src=\\\"https://static.mathigon.org/emoji/thinking_face.png\\\" alt=\\\"thinking_face\\\"></p>\",\"<p>Das sieht nicht richtig aus. <img class=\\\"emoji\\\" width=\\\"20\\\" height=\\\"20\\\" src=\\\"https://static.mathigon.org/emoji/hushed.png\\\" alt=\\\"hushed\\\"></p>\",\"<p>Versuch es noch einmal! <img class=\\\"emoji\\\" width=\\\"20\\\" height=\\\"20\\\" src=\\\"https://static.mathigon.org/emoji/confused.png\\\" alt=\\\"confused\\\"></p>\"],\"welcomeMorning\":\"<p>Guten Morgen!</p>\",\"welcomeAfternoon\":\"<p>Guten Tag!</p>\",\"welcomeEvening\":\"<p>Guten Abend!</p>\",\"welcomeMorningNamed\":\"<p>Guten Morgen, $name!</p>\",\"welcomeAfternoonNamed\":\"<p>Guten Tag, $name!</p>\",\"welcomeEveningNamed\":\"<p>Guten Abend, $name!</p>\",\"expression-1\":\"<p>Denk daran: Es geht um eine Zuordnung!</p>\",\"not-a-variable\":\"<p>Das ist ein Objekt das einer Variablen zugeordnet werden kann!</p>\",\"mutable\":\"<p>Variablen kann man ändern!</p>\"}"}