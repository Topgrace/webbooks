{"id":"intro-data-pipeline","locale":"en","nextCourse":"programming-in-julia","prevCourse":"epidemic-modeling","title":"The Data Science Pipeline","description":"Learn the basics of data wrangling, visualization, and modeling in Python.","color":"#319bbf","author":"Samuel S. Watson","hero":"\\content\\intro-data-pipeline\\hero.jpg","goals":117,"sections":[{"id":"introduction","title":"Introduction","url":"/course/intro-data-pipeline/introduction","steps":["intro","step-python"],"goals":1,"duration":5},{"id":"acquisition","title":"Acquisition","url":"/course/intro-data-pipeline/acquisition","steps":["acquire","step-range-difficulties","data-sources","kaggle-data","data-gov","uc-irvine","academic-torrents","quandl"],"goals":7,"duration":10},{"id":"wrangling","title":"Wrangling","url":"/course/intro-data-pipeline/wrangling","steps":["wrangle","step-not-tidy-data","pandas","step-access-row-col","step-loc-iloc","step-slicing-exercise","step-16","six-verbs","step-verb-item-filter","step-verb-item-sort","step-verb-item-select","step-verb-item-transform","step-verb-item-aggregate","step-verb-item-group","step-verb-item-group-explanation","filter-verb","step-index-predicates","step-query-method","step-query-interpolation","filter-exercise-solution","sort-verb","sort-exercise-solution","select-verb","step-drop-method","step-integer-drop","select-exercise-solution","transform-verb","assign-exercise-solution","aggregate-verb","range-exercise-solution","group-verb","step-flower-group-exercise","step-42","step-other-functions"],"goals":37,"duration":55},{"id":"visualization","title":"Visualization","url":"/course/intro-data-pipeline/visualization","steps":["visualize","step-scatter-example","step-aesthetic","step-map-new-aesthetic","step-48","step-facets","step-line-plot","step-line-group","step-line-plot-exercise","step-53","step-bar","step-histogram","step-histogram-exercise","step-57","step-density-plots","step-boxplot","step-violin","step-viz-close"],"goals":24,"duration":30},{"id":"modeling","title":"Modeling","url":"/course/intro-data-pipeline/modeling","steps":["model","step-response-feature","human-machine-learning","step-variance","step-not-deterministic","step-67","step-predict-expectation","step-bias-variance-tradeoff","step-overfit","step-underfit","step-complexity-tradeoff","overfitting-exercise","step-classification-regression","Scikit-Learn","machine-learning-machines","step-ml-in-sklearn","step-quadfit","step-PolynomialFeatures","step-sklearn-pipelines","step-real-example","step-train-test-split","step-testing-data-caution","step-cross-validation","step-cross-val-score","step-try-decision-trees","step-try-random-forest","step-model-comparison","hyperparameter-tuning","step-hyperparameter-search","step-moving-on"],"goals":41,"duration":55},{"id":"communication","title":"Communication","url":"/course/intro-data-pipeline/communication","steps":["communicate","step-informing-business-decisions","step-data-science-report-advice","step-narrative-cohesion","step-dont-waste-space","step-check-for-typos","communication-exercise","step-bon-voyage"],"goals":7,"duration":15}],"steps":{"intro":{"id":"intro","title":"Intro","html":"<x-step id=\"intro\" goals=\"next-0\"><p>In this mini-course, we will introduce a collection of skills commonly applied to solve data problems in industry and science. These skills correspond to stages of a typical data science project: we <strong>acquire</strong> data, <strong>wrangle</strong> it into a form conducive to further analysis, <strong>visualize</strong> the data to better understand it, <strong>model</strong> the data to gain further insight and make predictions about the process that generated the data, and <strong>communicate</strong> our results to stakeholders.</p><p><button class=\"next-step\">Continue</button></p></x-step>","goals":["next-0"],"keywords":[]},"step-python":{"id":"step-python","title":"Step Python","html":"<x-step id=\"step-python\" goals=\"\"><p>We will be using the Python data science ecosystem for developing the computational pipeline skills: Pandas for data wrangling, Plotly for data visualization, and Scikit-Learn for modeling. These packages are popular enough to be a good investment of your time even if you eventually settle into some other toolchain, because the experience will help you in interviews and when collaborating with the Python users you will inevitably encounter. </p></x-step>","goals":[],"keywords":[]},"acquire":{"id":"acquire","title":"Acquire","html":"<x-step id=\"acquire\" goals=\"next-0\"><p>As a data scientist on the job, you will often be given a data set and a problem to solve. In these situations, obtaining data might not seem like a high priority. However, using external sources in addition to the original data can be a critical source of leverage. For example, if you want to predict a company's customer <x-gloss xid=\"churn\">churn</x-gloss> you might supplement the internal customer data with economic or geographic information about the city where each customer lives. </p><p><button class=\"next-step\">Continue</button></p></x-step>","goals":["next-0"],"keywords":[]},"step-range-difficulties":{"id":"step-range-difficulties","title":"Step Range Difficulties","html":"<x-step id=\"step-range-difficulties\" goals=\"next-0\"><p>The difficulty of obtaining useful data ranges from trivial (your supervisor emails you a file) to epic (years-long clinical trials). An important part of becoming a seasoned data scientist is developing a sense for when the cost of obtaining data will lead to a commensurate problem-solving payoff. Developing your knowledge of useful and readily accessible data sets helps reduce that cost, so in this section we will get you started by making some concrete suggestions for data sources. </p><p><button class=\"next-step\">Continue</button></p></x-step>","goals":["next-0"],"keywords":[]},"data-sources":{"id":"data-sources","title":"Data Sources","html":"<x-step id=\"data-sources\" goals=\"next-0\"><ol> <li><strong>R packages</strong>. Many classic datasets are available as packages in <span class=\"nowrap\"><x-gloss xid=\"R\">R</x-gloss>.</span> Of particular note is the package <span class=\"nowrap\"><code class=\"language-md\">fivethirtyeight</code>,</span> which includes data for more than 100 articles from the popular data journalism outfit <a href=\"https://fivethirtyeight.com\" target=\"_blank\">FiveThirtyEight</a>. You can use R from within Python using the package <span class=\"nowrap\"><x-gloss xid=\"rpy2\"><code class=\"language-md\">rpy2</code></x-gloss>.</span></li></ol> <p><button class=\"next-step\">Continue</button></p></x-step>","goals":["next-0"],"keywords":[]},"kaggle-data":{"id":"kaggle-data","title":"Kaggle Data","html":"<x-step id=\"kaggle-data\" goals=\"next-0\"><ol start=\"2\"> <li><strong>Kaggle</strong>. The data science contest website <a href=\"https://www.kaggle.com/datasets\" target=\"_blank\">Kaggle</a> has about 120,000 public data sets.</li></ol> <p><button class=\"next-step\">Continue</button></p></x-step>","goals":["next-0"],"keywords":[]},"data-gov":{"id":"data-gov","title":"Data Gov","html":"<x-step id=\"data-gov\" goals=\"next-0\"><ol start=\"3\"> <li><strong>Data.gov</strong>. A <a href=\"https://www.data.gov\" target=\"_blank\">database</a> of over 200,000 open data sets shared by the U.S. Government. See also: <a href=\"https://data.gov.uk\" target=\"_blank\">data.gov.uk</a>.</li></ol> <p><button class=\"next-step\">Continue</button></p></x-step>","goals":["next-0"],"keywords":[]},"uc-irvine":{"id":"uc-irvine","title":"Uc Irvine","html":"<x-step id=\"uc-irvine\" goals=\"next-0\"><ol start=\"4\"> <li><strong>UC Irvine Machine Learning Repository</strong>. <a href=\"http://archive.ics.uci.edu/ml/index.php\" target=\"_blank\">About 480 datasets</a>, hosted by UC Irvine as a service to the machine learning community.</li></ol> <p><button class=\"next-step\">Continue</button></p></x-step>","goals":["next-0"],"keywords":[]},"academic-torrents":{"id":"academic-torrents","title":"Academic Torrents","html":"<x-step id=\"academic-torrents\" goals=\"next-0\"><ol start=\"5\"> <li><strong>Academic Torrents</strong>. Datasets from academic papers. Includes a particularly well-known dataset for natural language processing: <a href=\"http://academictorrents.com/details/4697a6e1e7841602651b087d84f904d43590d4ff\" target=\"_blank\">Enron senior management emails</a>.</li></ol> <p><button class=\"next-step\">Continue</button></p></x-step>","goals":["next-0"],"keywords":[]},"quandl":{"id":"quandl","title":"Quandl","html":"<x-step id=\"quandl\" goals=\"\"><ol start=\"6\"> <li><strong>Quandl</strong>. A mixture of free and paid <a href=\"https://www.quandl.com/\" target=\"_blank\">financial datasets</a>.</li></ol> </x-step>","goals":[],"keywords":[]},"wrangle":{"id":"wrangle","title":"Wrangle","html":"<x-step id=\"wrangle\" goals=\"next-0\"><p>Data is said to be in <em>tidy</em> format if each row corresponds to an observation and each column corresponds a different observation variable. For example, in the <span class=\"nowrap\"><x-gloss xid=\"iris\">iris dataset</x-gloss>,</span> each row represents a flower, and the entries of a row specify the flower's species and various measurements made for that flower. Here's the <x-gloss xid=\"dataframe-head\">head</x-gloss> of the Iris data frame. </p><p></p><table border=\"0\" class=\"dataframe\"> <thead> <tr style=\"text-align: right;\"> <th></th> <th>Sepal.Length</th> <th>Sepal.Width</th> <th>Petal.Length</th> <th>Petal.Width</th> <th>Species</th> </tr> </thead> <tbody> <tr> <th>1</th> <td>5.1</td> <td>3.5</td> <td>1.4</td> <td>0.2</td> <td>setosa</td> </tr> <tr> <th>2</th> <td>4.9</td> <td>3.0</td> <td>1.4</td> <td>0.2</td> <td>setosa</td> </tr> <tr> <th>3</th> <td>4.7</td> <td>3.2</td> <td>1.3</td> <td>0.2</td> <td>setosa</td> </tr> <tr> <th>4</th> <td>4.6</td> <td>3.1</td> <td>1.5</td> <td>0.2</td> <td>setosa</td> </tr> <tr> <th>5</th> <td>5.0</td> <td>3.6</td> <td>1.4</td> <td>0.2</td> <td>setosa</td> </tr> </tbody></table> <p>Note that four of the columns are <strong>quantitative</strong> (that is, they contain numerical data), while one is <strong>categorical</strong> (that is, they contain strings which represent categories).</p><p><button class=\"next-step\">Continue</button></p></x-step>","goals":["next-0"],"keywords":[]},"step-not-tidy-data":{"id":"step-not-tidy-data","title":"Step Not Tidy Data","html":"<x-step id=\"step-not-tidy-data\" goals=\"next-0\"><p>Many types of data do not fit naturally into the tidy data framework, like image data and passages of text. However, tidy data occupies a sweet spot of generality which covers a wide variety of use cases but is nevertheless specific enough to support tools which are both concise and powerful. In this mini-course, we will focus on tidy data.</p><p><button class=\"next-step\">Continue</button></p></x-step>","goals":["next-0"],"keywords":[]},"pandas":{"id":"pandas","title":"Pandas","html":"<x-step id=\"pandas\" goals=\"next-0\"><h2>Pandas</h2><p>A <strong>data frame</strong> is an object for storing tidy data, and the package which provides data frames in the Python ecosystem is <strong>Pandas</strong>. Pandas is built on NumPy, which is the Python library for multi-dimensional <span class=\"nowrap\"><x-gloss xid=\"array\">arrays</x-gloss>.</span> If you aren't comfortable with the basics of NumPy, a brief detour through <a href=\"https://colab.research.google.com/github/jakevdp/PythonDataScienceHandbook/blob/master/notebooks/02.02-The-Basics-Of-NumPy-Arrays.ipynb\" target=\"_blank\">this interactive notebook</a> is recommended. </p><pre python-executable=\"python-executable\">import pydataset\niris = pydataset.data(\"iris\")\nprint(type(iris))\niris.head()</pre><p>A data frame's <code class=\"language-python\">index</code> attribute stores the labels of the rows, and the <code class=\"language-python\">columns</code> attribute stores the column names. </p><pre python-executable=\"python-executable\">iris.columns, iris.index</pre><p><button class=\"next-step\">Continue</button></p></x-step>","goals":["next-0"],"keywords":[]},"step-access-row-col":{"id":"step-access-row-col","title":"Step Access Row Col","html":"<x-step id=\"step-access-row-col\" goals=\"next-0\"><p>Columns of the data frame can be accessed using by indexing the data frame with the name of the column. For column names that are valid Python variable names, dot syntax access is also supported: </p><pre python-executable=\"python-executable\">import pandas as pd\ndata = [[179_335,47.7],[81_274,73.4],[24_590,19.9],[22_131,25.4]]\ncolumns = ['population', 'area']\nindex = ['Providence', 'Cranston', 'Newport', 'Bristol']\nri = pd.DataFrame(data, columns = columns, index = index)\nri['population'] # or ri.population, same thing</pre><p><button class=\"next-step\">Continue</button></p></x-step>","goals":["next-0"],"keywords":[]},"step-loc-iloc":{"id":"step-loc-iloc","title":"Step Loc Iloc","html":"<x-step id=\"step-loc-iloc\" goals=\"next-0\"><p>Pandas <code class=\"language-python\">DataFrame</code> objects provide two attributes, called <code class=\"language-python\">loc</code> and <span class=\"nowrap\"><code class=\"language-python\">iloc</code>,</span> for accessing entries using names or integers, respectively.</p><pre python-executable=\"python-executable\">ri.loc['Providence',:'area'], ri.iloc[0,:1]</pre><p><button class=\"next-step\">Continue</button></p></x-step>","goals":["next-0"],"keywords":[]},"step-slicing-exercise":{"id":"step-slicing-exercise","title":"Step Slicing Exercise","html":"<x-step id=\"step-slicing-exercise\" goals=\"quill\"><p>Note that slices built with row or column names are inclusive, while integer slices follow the usual Python convention of being exclusive of the upper bound. </p><div class=\"exercise\"> <p><strong>Exercise</strong><br>Use the <code class=\"language-python\">pydataset</code> package to load the <code class=\"language-python\">'Boston'</code> data set. Select all of the columns between <code class=\"language-python\">indus</code> and <code class=\"language-python\">rad</code> and assign the resulting data frame to a new variable. Then select the first 25 rows from that new data frame.</p></div> <pre python-executable=\"python-executable\"> </pre><x-quill goal=\"quill\"></x-quill></x-step>","goals":["quill"],"keywords":[]},"step-16":{"id":"step-16","title":"Step  ","html":"<x-step id=\"step-16\" goals=\"next-0\"><p><em>Solution.</em> We index columns using <code class=\"language-python\">loc</code> and the rows using <code class=\"language-python\">iloc</code></p><pre python-executable=\"python-executable\">boston = pydataset.data('Boston')\nboston_trimmed = boston.loc[:,'indus':'rad']\nboston_trimmed.iloc[:25,:]</pre><p><button class=\"next-step\">Continue</button></p></x-step>","goals":["next-0"],"keywords":[]},"six-verbs":{"id":"six-verbs","title":"Six Verbs","html":"<x-step id=\"six-verbs\" goals=\"next-0\"><h2>The six verbs of data manipulation</h2><p>Although data frames support many transformations, we will follow the prominent data scientist <x-gloss xid=\"hadley\">Hadley Wickham</x-gloss> in suggesting the following six as fundamental. They can be combined to cover most of your data manipulation needs, so you can get up and running quickly in any data manipulation framework by learning how these actions are performed and composed. </p><p><button class=\"next-step\">Continue</button></p></x-step>","goals":["next-0"],"keywords":[]},"step-verb-item-filter":{"id":"step-verb-item-filter","title":"Step Verb Item Filter","html":"<x-step id=\"step-verb-item-filter\" goals=\"next-0\"><ol> <li><strong>Filter</strong>. Pick rows based on their values.</li></ol> <p><button class=\"next-step\">Continue</button></p></x-step>","goals":["next-0"],"keywords":[]},"step-verb-item-sort":{"id":"step-verb-item-sort","title":"Step Verb Item Sort","html":"<x-step id=\"step-verb-item-sort\" goals=\"next-0\"><ol start=\"2\"> <li><strong>Sort</strong>. Re-order the rows.</li></ol> <p><button class=\"next-step\">Continue</button></p></x-step>","goals":["next-0"],"keywords":[]},"step-verb-item-select":{"id":"step-verb-item-select","title":"Step Verb Item Select","html":"<x-step id=\"step-verb-item-select\" goals=\"next-0\"><ol start=\"3\"> <li><strong>Select</strong>. Choose specific columns.</li></ol> <p><button class=\"next-step\">Continue</button></p></x-step>","goals":["next-0"],"keywords":[]},"step-verb-item-transform":{"id":"step-verb-item-transform","title":"Step Verb Item Transform","html":"<x-step id=\"step-verb-item-transform\" goals=\"next-0\"><ol start=\"4\"> <li><strong>Transform</strong>. Create new columns from existing ones.</li></ol> <p><button class=\"next-step\">Continue</button></p></x-step>","goals":["next-0"],"keywords":[]},"step-verb-item-aggregate":{"id":"step-verb-item-aggregate","title":"Step Verb Item Aggregate","html":"<x-step id=\"step-verb-item-aggregate\" goals=\"next-0\"><ol start=\"5\"> <li><strong>Aggregate</strong>. Reduce the data frame to a single row by applying a function (like <span class=\"nowrap\"><code class=\"language-python\">sum</code>,</span> <span class=\"nowrap\"><code class=\"language-python\">min</code>,</span> <span class=\"nowrap\"><code class=\"language-python\">max</code>,</span> etc.) which maps each column of values to a single value.</li></ol> <p><button class=\"next-step\">Continue</button></p></x-step>","goals":["next-0"],"keywords":[]},"step-verb-item-group":{"id":"step-verb-item-group","title":"Step Verb Item Group","html":"<x-step id=\"step-verb-item-group\" goals=\"next-0\"><ol start=\"6\"> <li><strong>Group</strong>. Collect the rows of the data frame into groups.</li></ol> <p><button class=\"next-step\">Continue</button></p></x-step>","goals":["next-0"],"keywords":[]},"step-verb-item-group-explanation":{"id":"step-verb-item-group-explanation","title":"Step Verb Item Group Explanation","html":"<x-step id=\"step-verb-item-group-explanation\" goals=\"blank-0 blank-1 blank-2 blank-3 next-0\"><p>The grouping operation is different from the others because it outputs a <strong>grouped data frame</strong> object, which can be visualized as a stack of data frames. Here's how the popular data table product <em>Airtable</em> presents grouped data frames (using some of the rows from the iris data set above, grouped on species):</p><iframe class=\"airtable-embed\" src=\"https://airtable.com/embed/shrc2wjVuNKqz7QJJ?backgroundColor=cyan\" frameborder=\"0\" onmousewheel=\"\" width=\"100%\" height=\"533\" style=\"background: transparent; border: 1px solid #ccc;\"></iframe> <p>The other operations can be applied group-by-group. </p><p><button class=\"next-step\">Continue</button></p><div class=\"exercise\"> <p><strong>Exercise</strong><br>Experiment with the interactive table below to practice some of the operations above. You might want to click the \"View larger version\" icon in the bottom right corner to open the table in a new browser tab. </p><ol> <li>Use the <strong>Filter</strong> button to select only those flowers whose sepal length is less than 5.0.</li></ol> <p> There are <x-blank solution=\"22\" goal=\"blank-0\"></x-blank> such flowers in the data frame (note: the number of rows can be seen in the bottom left corner of the interactive table). 2. Use the <strong>Sort</strong> button to sort by sepal length and then by sepal width (this means that ties in sepal length are broken by looking at the sepal width value).</p><p> The smallest sepal length value is <span class=\"nowrap\"><x-blank solution=\"4.3\" goal=\"blank-1\"></x-blank>.</span> 3. Use the <strong>Hide fields</strong> button to select only the petal-related and species columns. 4. Remove the sorts and filters (by clicking on those buttons again and then using the small x by each sort or filter), and then use the <strong>Group</strong> button to group the data frame by species. </p><p> There are <x-blank solution=\"50\" goal=\"blank-2\"></x-blank> flowers of each species in the data frame. 5. Click the small downward pointing triangle under the Petal Length column in the Setosa group (where it originally says \"Sum 73.1\") to change the aggregation function to \"Average\". Then click the downward pointing triangle to the left of the \"setosa\" icon to collapse that group. Do the same for the other two groups. </p><p> The species with the largest average petal length is <span class=\"nowrap\"><x-blank-mc goal=\"blank-3\"><button class=\"choice\">virginica</button><button class=\"choice\">setosa</button><button class=\"choice\">versicolor</button></x-blank-mc>.</span></p></div> <iframe class=\"airtable-embed\" src=\"https://airtable.com/embed/shrUtQZE2mQanv9MC?backgroundColor=cyan&amp;viewControls=on\" frameborder=\"0\" onmousewheel=\"\" width=\"100%\" height=\"533\" style=\"background: transparent; border: 1px solid #ccc;\"></iframe> </x-step>","goals":["blank-0","blank-1","blank-2","blank-3","next-0"],"keywords":[]},"filter-verb":{"id":"filter-verb","title":"Filter Verb","html":"<x-step id=\"filter-verb\" goals=\"next-0\"><h3>Filter</h3><p>There are two main ways to filter rows in Pandas. The first is to obtain a column of boolean values and use it to index the rows of the data frame. For example: </p><pre python-executable=\"python-executable\">ri[ri.population &gt; 50_000]</pre><p>In the last line above, <code class=\"language-python\">ri.population &gt; 50_000</code> returns a column with the values <span class=\"nowrap\"><code class=\"language-python\">[True, True, False, False]</code>,</span> and indexing the data frame with a boolean array selects only those rows corresponding to the <code class=\"language-python\">True</code> values. </p><p><button class=\"next-step\">Continue</button></p></x-step>","goals":["next-0"],"keywords":[]},"step-index-predicates":{"id":"step-index-predicates","title":"Step Index Predicates","html":"<x-step id=\"step-index-predicates\" goals=\"next-0\"><p>We can combine predicates using the usual Python operations for <span class=\"nowrap\"><x-gloss xid=\"python-sets\">sets</x-gloss>:</span> </p><pre python-executable=\"python-executable\">ri[(ri.population &gt; 50_000) &amp; (ri.area &gt; 50)]</pre><p>This approach has some drawbacks: First, we have to repeat the name of the data frame multiple times. This violates the programming maxim \"Don't repeat yourself\". Second, computing an expression like <code class=\"language-python\">(ri.population &gt; 50_000) &amp; (ri.area &gt; 50)</code> requires three array <span class=\"nowrap\"><x-gloss xid=\"allocation\">allocations</x-gloss>:</span> one for <span class=\"nowrap\"><code class=\"language-python\">ri.population &gt; 50_000</code>,</span> one for <span class=\"nowrap\"><code class=\"language-python\">ri.area &gt; 50</code>,</span> and one for the <span class=\"nowrap\"><code class=\"language-python\">(ri.population &gt; 50_000) &amp; (ri.area &gt; 50)</code>.</span> These allocations are unnecessary, since it is possible to just loop over the rows and directly check the whole condition for each row (although you don't want to program that yourself in Python, because loops in Python are slow). </p><p><button class=\"next-step\">Continue</button></p></x-step>","goals":["next-0"],"keywords":[]},"step-query-method":{"id":"step-query-method","title":"Step Query Method","html":"<x-step id=\"step-query-method\" goals=\"next-0\"><p>Pandas does provide a solution to this problem: the <code class=\"language-python\">query</code> method. You supply your condition as a string, and Pandas makes things efficient for you under the hood:</p><pre python-executable=\"python-executable\">ri.query('population &gt; 50_000 &amp; area &gt; 50')</pre><p><button class=\"next-step\">Continue</button></p></x-step>","goals":["next-0"],"keywords":[]},"step-query-interpolation":{"id":"step-query-interpolation","title":"Step Query Interpolation","html":"<x-step id=\"step-query-interpolation\" goals=\"quill\"><p>Python variables can be interpolated in query strings using the <code class=\"language-python\">@</code> prefix. For example, the query above could also be written as</p><pre python-executable=\"python-executable\">min_pop = 50_000\nri.query('population &gt; @min_pop &amp; area &gt; 50')</pre><div class=\"exercise\"> <p><strong>Exercise</strong><br>Use the <code class=\"language-md\">query</code> method to identify the records in the <code class=\"language-python\">'Boston'</code> data set which have the property that <code class=\"language-python\">indus</code> is at least 10 and either <code class=\"language-python\">medv</code> is less than 8 or <code class=\"language-python\">chas</code> is 1. </p></div> <pre python-executable=\"python-executable\"> </pre><x-quill goal=\"quill\"></x-quill></x-step>","goals":["quill"],"keywords":[]},"filter-exercise-solution":{"id":"filter-exercise-solution","title":"Filter Exercise Solution","html":"<x-step id=\"filter-exercise-solution\" goals=\"next-0\"><p><em>Solution.</em> We use parentheses to group the given logical conditions:</p><pre python-executable=\"python-executable\">import pydataset\nboston = pydataset.data('Boston')\nboston.query('indus &gt;= 10 &amp; (medv &lt; 8 | chas == 1)')</pre><p><button class=\"next-step\">Continue</button></p></x-step>","goals":["next-0"],"keywords":[]},"sort-verb":{"id":"sort-verb","title":"Sort Verb","html":"<x-step id=\"sort-verb\" goals=\"quill\"><h3>Sort</h3><p>The <code class=\"language-python\">DataFrame</code> method that sorts values is called <span class=\"nowrap\"><code class=\"language-python\">sort_values</code>.</span> It takes an argument for the column labels (or list of columns labels) to use for sorting, and you can use the <code class=\"language-python\">ascending</code> argument to specify whether the values in that column should be in increasing or decreasing order. </p><pre python-executable=\"python-executable\">ri.sort_values('population',ascending=False)</pre><p>If a list of columns is supplied, then each column after the first is used to break ties in the preceding columns: </p><pre python-executable=\"python-executable\">d = pd.DataFrame([[3,2],[3,1],[2,4]],columns=['a','b'])\nd.sort_values(['a','b'])</pre><p>Note that <code class=\"language-python\">sort_values</code> returns a new data frame. It does not modify the original one. </p><div class=\"exercise\"> <p><strong>Exercise</strong><br>Sort the <code class=\"language-python\">'Boston'</code> data set in decreasing order of the value in the first column.</p></div> <pre python-executable=\"python-executable\"> </pre><x-quill goal=\"quill\"></x-quill></x-step>","goals":["quill"],"keywords":[]},"sort-exercise-solution":{"id":"sort-exercise-solution","title":"Sort Exercise Solution","html":"<x-step id=\"sort-exercise-solution\" goals=\"next-0\"><p><em>Solution.</em> We can inspect <code class=\"language-python\">columns</code> or look at the data frame's head to see that the first column is <span class=\"nowrap\"><code class=\"language-python\">'crim'</code>.</span> Then we sort:</p><pre python-executable=\"python-executable\">boston = pydataset.data('Boston')\nboston.sort_values(['crim'], ascending = False)</pre><p><button class=\"next-step\">Continue</button></p></x-step>","goals":["next-0"],"keywords":[]},"select-verb":{"id":"select-verb","title":"Select Verb","html":"<x-step id=\"select-verb\" goals=\"next-0\"><h3>Select</h3><p>To select columns in Pandas, you can just index the data frame with a list of column names: </p><pre python-executable=\"python-executable\">ri[['population','area']]</pre><p><button class=\"next-step\">Continue</button></p></x-step>","goals":["next-0"],"keywords":[]},"step-drop-method":{"id":"step-drop-method","title":"Step Drop Method","html":"<x-step id=\"step-drop-method\" goals=\"next-0\"><p>If you want to keep all columns <em>except</em> specific ones, you can use the <code class=\"language-python\">drop</code> method: </p><pre python-executable=\"python-executable\">ri.drop('population', axis=1)</pre><p>We have to specify that <code class=\"language-python\">'population'</code> refers to columns (<code class=\"language-python\">axis=1</code>), because the <code class=\"language-python\">drop</code> method's default is to look for rows to drop. Like <span class=\"nowrap\"><code class=\"language-python\">sort_values</code>,</span> <code class=\"language-python\">drop</code> doesn't modify the original data frame.</p><p><button class=\"next-step\">Continue</button></p></x-step>","goals":["next-0"],"keywords":[]},"step-integer-drop":{"id":"step-integer-drop","title":"Step Integer Drop","html":"<x-step id=\"step-integer-drop\" goals=\"quill\"><div class=\"exercise\"> <p><strong>Exercise</strong><br>Select the columns in the Boston data frame which contain floating point numbers (as opposed to integers, which do not print with a decimal point). </p></div> <pre python-executable=\"python-executable\">    </pre><x-quill goal=\"quill\"></x-quill></x-step>","goals":["quill"],"keywords":[]},"select-exercise-solution":{"id":"select-exercise-solution","title":"Select Exercise Solution","html":"<x-step id=\"select-exercise-solution\" goals=\"next-0\"><p><em>Solution.</em> We inspect the data frame to find that the columns which are not floats are <span class=\"nowrap\"><code class=\"language-python\">'chas'</code>,</span> <span class=\"nowrap\"><code class=\"language-python\">rad</code>,</span> and <span class=\"nowrap\"><code class=\"language-python\">'tax'</code>.</span> So we use drop instead of selecting: </p><pre python-executable=\"python-executable\">boston_float_only = boston.drop(['chas', 'rad', 'tax'],axis=1)\nboston_float_only.head()</pre><p>As a follow-up, we note that this is a sufficiently common operation that Pandas supplies a convenience method for it: </p><pre python-executable=\"python-executable\">import numpy as np\nboston_float_only = boston.select_dtypes(exclude=['int'])\nboston_float_only.head()</pre><p>You can inspect the types of the columns of a data frame using its <code class=\"language-python\">dtypes</code> attribute.</p><p><button class=\"next-step\">Continue</button></p></x-step>","goals":["next-0"],"keywords":[]},"transform-verb":{"id":"transform-verb","title":"Transform Verb","html":"<x-step id=\"transform-verb\" goals=\"quill\"><h3>Transform</h3><p>We can create new columns in a data frame using the <code class=\"language-python\">assign</code> method. For example: </p><pre python-executable=\"python-executable\">ri.assign(density = ri.population / ri.area)</pre><p>If the name of the data frame is quite long, you can avoid having to type it repeatedly by supplying an anonymous function to be applied to the data frame: </p><pre python-executable=\"python-executable\">ri.assign(density = lambda d: d.population / d.area) \\\n  .assign(**{'inverse density': lambda d: 1/d.density})</pre><p>We are using two <code class=\"language-python\">assign</code> calls to create a column called <code class=\"language-python\">density</code> and then a second new column called <span class=\"nowrap\"><code class=\"language-python\">inverse density</code>.</span> (Note how we used <x-gloss xid=\"splat\">splatting</x-gloss> to get a space in the column name.)</p><div class=\"exercise\"> <p><strong>Exercise</strong><br>For each observation in the <code class=\"language-python\">'toothpaste'</code> data set, find the ratio of the difference between means to the square root of the sum of the squares of the standard deviations for conditions \"A\" and \"B\". </p></div> <pre python-executable=\"python-executable\"> </pre><x-quill goal=\"quill\"></x-quill></x-step>","goals":["quill"],"keywords":[]},"assign-exercise-solution":{"id":"assign-exercise-solution","title":"Assign Exercise Solution","html":"<x-step id=\"assign-exercise-solution\" goals=\"next-0\"><p><em>Solution.</em> Since the formula is quite involved, we use an anonymous function: </p><pre python-executable=\"python-executable\">import numpy as np\ntoothpaste = pydataset.data('toothpaste')\ntoothpaste.assign(score = lambda d: \n      (d.meanA - d.meanB)/np.sqrt(d.sdA**2 + d.sdB**2))</pre><p><button class=\"next-step\">Continue</button></p></x-step>","goals":["next-0"],"keywords":[]},"aggregate-verb":{"id":"aggregate-verb","title":"Aggregate Verb","html":"<x-step id=\"aggregate-verb\" goals=\"quill\"><h3>Aggregate</h3><p>The <code class=\"language-python\">agg</code> method applies a specified function (called the <em>aggregation</em> function) to each column in a data frame. Several aggregation functions are built-in and can be specified using a string: </p><table> <thead> <tr> <th>Name</th><th>Description</th></tr> </thead> <tbody><tr> <td><code class=\"language-python\">count</code></td><td>number of entries</td></tr> <tr> <td><code class=\"language-python\">sum</code></td><td>sum of entries</td></tr> <tr> <td><code class=\"language-python\">prod</code></td><td>product of entries</td></tr> <tr> <td><code class=\"language-python\">mean</code></td><td>average</td></tr> <tr> <td><code class=\"language-python\">median</code></td><td>middle entry when sorted</td></tr> <tr> <td><code class=\"language-python\">var</code></td><td>variance</td></tr> <tr> <td><code class=\"language-python\">std</code></td><td>standard deviation</td></tr> <tr> <td><code class=\"language-python\">min</code></td><td>minimum entry</td></tr> <tr> <td><code class=\"language-python\">max</code></td><td>maximum entry</td></tr> </tbody></table> <p>For example, to find the total population of the four cities in our data frame, we run: </p><pre python-executable=\"python-executable\">ri.population.agg('sum')</pre><p>To find the average population and area: </p><pre python-executable=\"python-executable\">ri.agg('mean')</pre><p>You can also supply a custom aggregation function instead of a string. </p><div class=\"exercise\"> <p><strong>Exercise</strong><br>Find the range (the difference between max and min) for each of the four quantitative columns in the <code class=\"language-python\">iris</code> dataset. Try using an anonymous function rather than using the built-in <code class=\"language-python\">'min'</code> and <code class=\"language-python\">'max'</code> aggregation functions.</p></div> <pre python-executable=\"python-executable\"> </pre><x-quill goal=\"quill\"></x-quill></x-step>","goals":["quill"],"keywords":[]},"range-exercise-solution":{"id":"range-exercise-solution","title":"Range Exercise Solution","html":"<x-step id=\"range-exercise-solution\" goals=\"next-0\"><p><em>Solution.</em> We have to drop the categorical column first since we can't compute a range for that. </p><pre python-executable=\"python-executable\">import numpy as np\nimport pydataset\niris = pydataset.data('iris')\niris.drop(['Species'],axis=1).agg(lambda r: np.max(r) - np.min(r))</pre><p><button class=\"next-step\">Continue</button></p></x-step>","goals":["next-0"],"keywords":[]},"group-verb":{"id":"group-verb","title":"Group Verb","html":"<x-step id=\"group-verb\" goals=\"next-0\"><h3>Group</h3><p>The aggregation function is a little bland by itself. We often want to apply the aggregation function only to specific rows. For example consider the following transaction log:</p><p>| Customer name | Transaction amount | | Acme, Inc. | 45.03 | | Acme, Inc. | 118.22 | | XYZ Widgets | 35.55 | | Acme, Inc. | 22.04 | | XYZ Widgets | 34.78 | </p><p>What is the total transaction amount for each company? We could filter for each company and aggregate the two resulting data frames, but that would get unwieldy quickly as the number of companies grows. Instead, we <strong>group</strong> the data frame by customer name and then apply the aggregation function: </p><pre python-executable=\"python-executable\">columns = ['Customer name', 'Transaction amount']\ntransactions = pd.DataFrame([['Acme, Inc.',45.03],\n                             ['Acme, Inc.',118.22],\n                             ['XYZ Widgets',35.55],\n                             ['Acme, Inc.',22.04],\n                             ['XYZ Widgets',34.78]],\n                             columns=columns)\ntransactions.groupby('Customer name').agg('sum')</pre><p>When a data frame is grouped along a particular column, the resulting grouped data frame is a dictionary-like object whose keys are the unique values of that column and whose values are the data frames obtained by filtering for the given key in that column. For example, <code class=\"language-python\">transactions.groupby('Customer name')</code> maps the key <code class=\"language-python\">'Acme, Inc.'</code> to the data frame </p><table border=\"0\" class=\"dataframe\"> <thead> <tr style=\"text-align: right;\"> <th></th> <th>Customer name</th> <th>Transaction amount</th> </tr> </thead> <tbody> <tr> <th>0</th> <td>Acme, Inc.</td> <td>45.03</td> </tr> <tr> <th>1</th> <td>Acme, Inc.</td> <td>118.22</td> </tr> <tr> <th>3</th> <td>Acme, Inc.</td> <td>22.04</td> </tr> </tbody></table> <p>and <code class=\"language-python\">'XYZ Widgets'</code> to</p><table border=\"0\" class=\"dataframe\"> <thead> <tr style=\"text-align: right;\"> <th></th> <th>Customer name</th> <th>Transaction amount</th> </tr> </thead> <tbody> <tr> <th>2</th> <td>XYZ Widgets</td> <td>35.55</td> </tr> <tr> <th>4</th> <td>XYZ Widgets</td> <td>34.78</td> </tr> </tbody></table> <p>The <code class=\"language-python\">agg</code> method of <code class=\"language-python\">DataFrameGroupBy</code> object operates on each each of these data frames to produce a single row, and these rows are collected into a new data frame. The row index for this output data frame comes from the keys of the dictionary-like <code class=\"language-python\">DataFrameGroupBy</code> object. </p><div class=\"exercise\"> <p><strong>Exercise</strong><br>Use the interactive table below to perform the same aggregation operation described above (in other words, find the sum of the transaction amounts for each company).</p></div> <p></p><center> <iframe class=\"airtable-embed\" src=\"https://airtable.com/embed/shrzoImJZEKreaxwn?backgroundColor=cyan&amp;viewControls=on\" frameborder=\"0\" onmousewheel=\"\" width=\"100%\" height=\"533\" style=\"background: transparent; border: 1px solid #ccc;\"></iframe><p></p></center> <p><button class=\"next-step\">Continue</button></p></x-step>","goals":["next-0"],"keywords":[]},"step-flower-group-exercise":{"id":"step-flower-group-exercise","title":"Step Flower Group Exercise","html":"<x-step id=\"step-flower-group-exercise\" goals=\"quill\"><div class=\"exercise\"> <p><strong>Exercise</strong><br>Group the flowers in the Iris data set in unit intervals of sepal length and find the average sepal width for each such group. (In other words, one group contains all flowers with sepal length in <span class=\"nowrap\"><svg style=\"vertical-align: -0.566ex\" width=\"4.778ex\" height=\"2.262ex\" class=\"mathjax\" viewBox=\"0 -750 2111.7 1000\"><title>[4,5)</title><defs><path id=\"MJX-376-TEX-N-5B\" d=\"M118 -250V750H255V710H158V-210H255V-250H118Z\"></path><path id=\"MJX-376-TEX-N-34\" d=\"M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z\"></path><path id=\"MJX-376-TEX-N-2C\" d=\"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z\"></path><path id=\"MJX-376-TEX-N-35\" d=\"M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z\"></path><path id=\"MJX-376-TEX-N-29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"></path></defs><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\"><g data-mml-node=\"math\"><g data-mml-node=\"mo\"><use xlink:href=\"#MJX-376-TEX-N-5B\"></use></g><g data-mml-node=\"mn\" transform=\"translate(278, 0)\"><use xlink:href=\"#MJX-376-TEX-N-34\"></use></g><g data-mml-node=\"mo\" transform=\"translate(778, 0)\"><use xlink:href=\"#MJX-376-TEX-N-2C\"></use></g><g data-mml-node=\"mn\" transform=\"translate(1222.7, 0)\"><use xlink:href=\"#MJX-376-TEX-N-35\"></use></g><g data-mml-node=\"mo\" transform=\"translate(1722.7, 0)\"><use xlink:href=\"#MJX-376-TEX-N-29\"></use></g></g></g></svg>,</span> another group has all flowers with sepal length in <span class=\"nowrap\"><svg style=\"vertical-align: -0.566ex\" width=\"4.778ex\" height=\"2.262ex\" class=\"mathjax\" viewBox=\"0 -750 2111.7 1000\"><title>[5,6)</title><defs><path id=\"MJX-384-TEX-N-5B\" d=\"M118 -250V750H255V710H158V-210H255V-250H118Z\"></path><path id=\"MJX-384-TEX-N-35\" d=\"M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z\"></path><path id=\"MJX-384-TEX-N-2C\" d=\"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z\"></path><path id=\"MJX-384-TEX-N-36\" d=\"M42 313Q42 476 123 571T303 666Q372 666 402 630T432 550Q432 525 418 510T379 495Q356 495 341 509T326 548Q326 592 373 601Q351 623 311 626Q240 626 194 566Q147 500 147 364L148 360Q153 366 156 373Q197 433 263 433H267Q313 433 348 414Q372 400 396 374T435 317Q456 268 456 210V192Q456 169 451 149Q440 90 387 34T253 -22Q225 -22 199 -14T143 16T92 75T56 172T42 313ZM257 397Q227 397 205 380T171 335T154 278T148 216Q148 133 160 97T198 39Q222 21 251 21Q302 21 329 59Q342 77 347 104T352 209Q352 289 347 316T329 361Q302 397 257 397Z\"></path><path id=\"MJX-384-TEX-N-29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"></path></defs><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\"><g data-mml-node=\"math\"><g data-mml-node=\"mo\"><use xlink:href=\"#MJX-384-TEX-N-5B\"></use></g><g data-mml-node=\"mn\" transform=\"translate(278, 0)\"><use xlink:href=\"#MJX-384-TEX-N-35\"></use></g><g data-mml-node=\"mo\" transform=\"translate(778, 0)\"><use xlink:href=\"#MJX-384-TEX-N-2C\"></use></g><g data-mml-node=\"mn\" transform=\"translate(1222.7, 0)\"><use xlink:href=\"#MJX-384-TEX-N-36\"></use></g><g data-mml-node=\"mo\" transform=\"translate(1722.7, 0)\"><use xlink:href=\"#MJX-384-TEX-N-29\"></use></g></g></g></svg>,</span> and so on.)</p><p>Hint: make a new column to group by.</p></div> <pre python-executable=\"python-executable\">import pydataset\niris = pydataset.data('iris')\n </pre><x-quill goal=\"quill\"></x-quill></x-step>","goals":["quill"],"keywords":[]},"step-42":{"id":"step-42","title":"Step  ","html":"<x-step id=\"step-42\" goals=\"next-0\"><p><em>Solution.</em> We create a new column using the <code class=\"language-python\">np.floor</code> function. Then we perform the grouping, select the column we want, and aggregate using the <code class=\"language-python\">mean</code> function:</p><pre python-executable=\"python-executable\">import pydataset\nimport numpy as np\niris = pydataset.data('iris') \niris.assign(sepal_length_floor = np.floor(iris[\"Sepal.Length\"])) \\\n    .groupby('sepal_length_floor') \\\n    [['Sepal.Width']] \\\n    .agg('mean')</pre><p><button class=\"next-step\">Continue</button></p></x-step>","goals":["next-0"],"keywords":[]},"step-other-functions":{"id":"step-other-functions","title":"Step Other Functions","html":"<x-step id=\"step-other-functions\" goals=\"\"><p>We conclude this section by noting that the other four operations (filter, sort, select, and transform) can be applied to grouped data frames as well. However, only selection works directly on grouped data frames. For the others, we use the <code class=\"language-python\">apply</code> method of the grouped data frame object to operate group-by-group and collect the results into a single data frame. </p><p>For example, we can sort by petal length within species as follows:</p><pre python-executable=\"python-executable\">iris.groupby('Species').apply(lambda d: d.sort_values('Petal.Length'))</pre><p>You'll notice in data frame returned above that the row indices are retained from the original data frame. Actually, the group values are also incorporated into the indexing scheme—this is advanced feature of Pandas called a <em>multi-indexing</em>. The <code class=\"language-python\">reset_index</code> method is useful for dropping this extra structure and simply re-indexing the rows from 0. We need to supply the value <code class=\"language-python\">True</code> to the keyword argument <span class=\"nowrap\"><code class=\"language-python\">drop</code>,</span> because otherwise the <code class=\"language-python\">reset_index</code> method will try to keep the old indices around as new columns, and that will fail since we already have a <code class=\"language-python\">Species</code> column:</p><pre python-executable=\"python-executable\">(iris.groupby('Species')\n     .apply(lambda d: d.sort_values('Petal.Length'))\n     .reset_index(drop = True))</pre></x-step>","goals":[],"keywords":[]},"visualize":{"id":"visualize","title":"Visualize","html":"<x-step id=\"visualize\" goals=\"next-0\"><p>Data visualization is a way to leverage your visual cortex to gain insight into data. Because vision is such a rich and well-developed interface between the human mind and the external world, visualization is a critical tool for understanding and communicating data ideas.</p><p>The standard graphics library in Python is Matplotlib, but here we will use a newer package called <em>Plotly</em>. Plotly offers a number of material advantages relative to Matplotlib: (1) figures support interactions like mouseovers and animations, (2) there is support for <x-gloss xid=\"mpl3d\">genuine</x-gloss> 3D graphics, and (3) Plotly is not Python-specific: it can be used directly in Javascript or in R or Julia.</p><p>If you use Plotly in a Jupyter notebook, the figures will automatically display in an interactive form. Therefore, it is recommended that you follow along using a separate tab with a <a href=\"https://mybinder.org/v2/gh/data-gymnasia/python-binder/master\" target=\"_blank\">Jupyter notebook</a>. However, we will use the function <code class=\"language-python\">show</code> defined in the cell below to display the figures as static images so they can be viewed on this page. </p><pre python-executable=\"python-executable\">from datagymnasia import show\nprint(\"Success!\")</pre><p><button class=\"next-step\">Continue</button></p></x-step>","goals":["next-0"],"keywords":[]},"step-scatter-example":{"id":"step-scatter-example","title":"Step Scatter Example","html":"<x-step id=\"step-scatter-example\" goals=\"next-0\"><h2>Scatter plot</h2><p>We can visualize the relationship between two columns of numerical data by associating them with the horizontal and vertical axes of the Cartesian plane and drawing a point in the figure for each observation. This is called a <strong>scatter plot</strong>. In Plotly Express, scatter plots are created using the <code class=\"language-python\">px.scatter</code> function. The columns to associate with the two axes are identified by name using the keyword arguments <code class=\"language-python\">x</code> and <span class=\"nowrap\"><code class=\"language-python\">y</code>.</span> </p><pre python-executable=\"python-executable\">import plotly.express as px\nimport pydataset\niris = pydataset.data('iris')\nshow(px.scatter(iris,x='Sepal.Width',y='Sepal.Length'))</pre><p><button class=\"next-step\">Continue</button></p></x-step>","goals":["next-0"],"keywords":[]},"step-aesthetic":{"id":"step-aesthetic","title":"Step Aesthetic","html":"<x-step id=\"step-aesthetic\" goals=\"next-0\"><p>An <strong>aesthetic</strong> is any visual property of a plot object. For example, horizontal position is an aesthetic, since we can visually distinguish objects based on their horizontal position in a graph. We call horizontal position the <code class=\"language-python\">x</code> aesthetic. Similarly, the <code class=\"language-python\">y</code> aesthetic represents vertical position. </p><p>We say that the <code class=\"language-python\">x='Sepal.Width'</code> argument <em>maps</em> the <code class=\"language-python\">'Sepal.Width'</code> variable to the <code class=\"language-python\">x</code> aesthetic. We can map other variables to other aesthetics, with further keyword arguments, like <code class=\"language-python\">color</code> and <span class=\"nowrap\"><code class=\"language-python\">symbol</code>:</span> </p><pre python-executable=\"python-executable\">show(px.scatter(iris,\n                x='Sepal.Width',\n                y='Sepal.Length',\n                color='Species',\n                symbol='Species'))</pre><p>Note that we used the same categorical variable (<code class=\"language-python\">'Species'</code>) to the <code class=\"language-python\">color</code> and <code class=\"language-python\">symbol</code> aesthetics. </p><p><button class=\"next-step\">Continue</button></p></x-step>","goals":["next-0"],"keywords":[]},"step-map-new-aesthetic":{"id":"step-map-new-aesthetic","title":"Step Map New Aesthetic","html":"<x-step id=\"step-map-new-aesthetic\" goals=\"quill\"><div class=\"exercise\"> <p><strong>Exercise</strong><br>Create a new data frame by appending a new column called \"area\" which is computed as a product of petal length and width. Map this new column to the <code class=\"language-python\">size</code> aesthetic (keeping <span class=\"nowrap\"><code class=\"language-python\">x</code>,</span> <span class=\"nowrap\"><code class=\"language-python\">y</code>,</span> and <code class=\"language-python\">color</code> the same as above). Which species of flowers has the smallest petal area? </p></div> <pre python-executable=\"python-executable\"> </pre><x-quill goal=\"quill\"></x-quill></x-step>","goals":["quill"],"keywords":[]},"step-48":{"id":"step-48","title":"Step  ","html":"<x-step id=\"step-48\" goals=\"next-0\"><p><em>Solution.</em> We use the <code class=\"language-python\">assign</code> method to add the suggested column, and we include an additiona keyword argument to map the new column to the <code class=\"language-python\">size</code> aesthetic.</p><pre python-executable=\"python-executable\">show(px.scatter(iris.assign(area = iris[\"Petal.Length\"] * \n                                   iris['Petal.Width']),\n                x='Sepal.Width',\n                y='Sepal.Length',\n                color='Species',\n                size='area'))</pre><p><button class=\"next-step\">Continue</button></p></x-step>","goals":["next-0"],"keywords":[]},"step-facets":{"id":"step-facets","title":"Step Facets","html":"<x-step id=\"step-facets\" goals=\"next-0\"><h3>Faceting</h3><p>Rather than distinguishing species by color, we could also show them on three separate plots. This is called <strong>faceting</strong>. In Plotly Express, variables can be faceted using the <code class=\"language-python\">facet_row</code> and <code class=\"language-python\">facet_col</code> arguments. </p><pre python-executable=\"python-executable\">show(px.scatter(iris, \n                x = 'Sepal.Width', \n                y = 'Sepal.Length', \n                facet_col = 'Species'))</pre><p><button class=\"next-step\">Continue</button></p></x-step>","goals":["next-0"],"keywords":[]},"step-line-plot":{"id":"step-line-plot","title":"Step Line Plot","html":"<x-step id=\"step-line-plot\" goals=\"next-0\"><h2>Line plots</h2><p>A point is not the only geometric object we can use to represent data. A <em>line</em> might be more suitable if we want to help guide the eye from one data point to the next. Points and lines are examples of plot <strong>geometries</strong>. Geometries are tied to Plotly Express functions: <code class=\"language-python\">px.scatter</code> uses the point geometry, and <code class=\"language-python\">px.line</code> uses the line geometry.</p><p>Let's make a line plot using the <em>Gapminder</em> data set, which records life expectancy and per-capita GDP for 142 countries. </p><pre python-executable=\"python-executable\">import plotly.express as px\ngapminder = px.data.gapminder()\nusa = gapminder.query('country == \"United States\"')\nshow(px.line(usa, x=\"year\", y=\"lifeExp\"))</pre><p><button class=\"next-step\">Continue</button></p></x-step>","goals":["next-0"],"keywords":[]},"step-line-group":{"id":"step-line-group","title":"Step Line Group","html":"<x-step id=\"step-line-group\" goals=\"next-0\"><p>The <code class=\"language-python\">line_group</code> argument allows us to group the data by country so we can plot multiple lines. Let's also map the <code class=\"language-python\">'continent'</code> variable to the <code class=\"language-python\">color</code> aesthetic. </p><pre python-executable=\"python-executable\">show(px.line(gapminder, \n             x=\"year\", \n             y=\"lifeExp\", \n             line_group=\"country\", \n             color=\"continent\"))</pre><p><button class=\"next-step\">Continue</button></p></x-step>","goals":["next-0"],"keywords":[]},"step-line-plot-exercise":{"id":"step-line-plot-exercise","title":"Step Line Plot Exercise","html":"<x-step id=\"step-line-plot-exercise\" goals=\"quill\"><div class=\"exercise\"> <p><strong>Exercise</strong><br>Although Plotly Express is designed primarily for data analysis, it can be used for mathematical graphs as well. Use <code class=\"language-python\">px.line</code> to graph the function <svg style=\"vertical-align: -0.025ex\" width=\"6.846ex\" height=\"1.553ex\" class=\"mathjax\" viewBox=\"0 -675.5 3026 686.5\"><title>x\\mapsto \\operatorname{e}^x</title><defs><path id=\"MJX-377-TEX-I-1D465\" d=\"M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z\"></path><path id=\"MJX-377-TEX-N-21A6\" d=\"M95 155V109Q95 83 92 73T75 63Q61 63 58 74T54 130Q54 140 54 180T55 250Q55 421 57 425Q61 437 75 437Q88 437 91 428T95 393V345V270H835Q719 357 692 493Q692 494 692 496T691 499Q691 511 708 511H711Q720 511 723 510T729 506T732 497T735 481T743 456Q765 389 816 336T935 261Q944 258 944 250Q944 244 939 241T915 231T877 212Q836 186 806 152T761 85T740 35T732 4Q730 -6 727 -8T711 -11Q691 -11 691 0Q691 7 696 25Q728 151 835 230H95V155Z\"></path><path id=\"MJX-377-TEX-N-65\" d=\"M28 218Q28 273 48 318T98 391T163 433T229 448Q282 448 320 430T378 380T406 316T415 245Q415 238 408 231H126V216Q126 68 226 36Q246 30 270 30Q312 30 342 62Q359 79 369 104L379 128Q382 131 395 131H398Q415 131 415 121Q415 117 412 108Q393 53 349 21T250 -11Q155 -11 92 58T28 218ZM333 275Q322 403 238 411H236Q228 411 220 410T195 402T166 381T143 340T127 274V267H333V275Z\"></path></defs><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><use xlink:href=\"#MJX-377-TEX-I-1D465\"></use></g><g data-mml-node=\"mo\" transform=\"translate(849.8, 0)\"><use xlink:href=\"#MJX-377-TEX-N-21A6\"></use></g><g data-mml-node=\"msup\" transform=\"translate(2127.6, 0)\"><g data-mml-node=\"mi\"><use xlink:href=\"#MJX-377-TEX-N-65\"></use></g><g data-mml-node=\"mi\" transform=\"translate(444, 363) scale(0.707)\"><use xlink:href=\"#MJX-377-TEX-I-1D465\"></use></g></g></g></g></svg> over the interval <span class=\"nowrap\"><svg style=\"vertical-align: -0.566ex\" width=\"4.526ex\" height=\"2.262ex\" class=\"mathjax\" viewBox=\"0 -750 2000.7 1000\"><title>[0,5]</title><defs><path id=\"MJX-385-TEX-N-5B\" d=\"M118 -250V750H255V710H158V-210H255V-250H118Z\"></path><path id=\"MJX-385-TEX-N-30\" d=\"M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z\"></path><path id=\"MJX-385-TEX-N-2C\" d=\"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z\"></path><path id=\"MJX-385-TEX-N-35\" d=\"M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z\"></path><path id=\"MJX-385-TEX-N-5D\" d=\"M22 710V750H159V-250H22V-210H119V710H22Z\"></path></defs><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\"><g data-mml-node=\"math\"><g data-mml-node=\"mo\"><use xlink:href=\"#MJX-385-TEX-N-5B\"></use></g><g data-mml-node=\"mn\" transform=\"translate(278, 0)\"><use xlink:href=\"#MJX-385-TEX-N-30\"></use></g><g data-mml-node=\"mo\" transform=\"translate(778, 0)\"><use xlink:href=\"#MJX-385-TEX-N-2C\"></use></g><g data-mml-node=\"mn\" transform=\"translate(1222.7, 0)\"><use xlink:href=\"#MJX-385-TEX-N-35\"></use></g><g data-mml-node=\"mo\" transform=\"translate(1722.7, 0)\"><use xlink:href=\"#MJX-385-TEX-N-5D\"></use></g></g></g></svg>.</span></p><p>Hint: begin by making a new data frame with appropriate columns. You might find <code class=\"language-python\">np.linspace</code> useful.</p></div> <pre python-executable=\"python-executable\"> </pre><x-quill goal=\"quill\"></x-quill></x-step>","goals":["quill"],"keywords":[]},"step-53":{"id":"step-53","title":"Step  ","html":"<x-step id=\"step-53\" goals=\"next-0\"><p><em>Solution.</em> We use <code class=\"language-python\">np.linspace</code> to define an array of <svg style=\"vertical-align: -0.025ex\" width=\"1.294ex\" height=\"1.025ex\" class=\"mathjax\" viewBox=\"0 -442 572 453\"><title>x</title><defs><path id=\"MJX-28-TEX-I-1D465\" d=\"M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z\"></path></defs><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><use xlink:href=\"#MJX-28-TEX-I-1D465\"></use></g></g></g></svg>-values, and we exponentiate it to make a list of <svg style=\"vertical-align: -0.464ex\" width=\"1.109ex\" height=\"1.464ex\" class=\"mathjax\" viewBox=\"0 -442 490 647\"><title>y</title><defs><path id=\"MJX-29-TEX-I-1D466\" d=\"M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z\"></path></defs><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><use xlink:href=\"#MJX-29-TEX-I-1D466\"></use></g></g></g></svg>-values. We package these together into a data frame and plot it with <code class=\"language-python\">px.line</code> as usual:</p><pre python-executable=\"python-executable\">import numpy as np\nimport pandas as pd\nx = np.linspace(0,5,100)\ny = np.exp(x)\ndf = pd.DataFrame({'x': x, 'exp(x)': y})\nshow(px.line(df, x = 'x', y = 'exp(x)'))</pre><p><button class=\"next-step\">Continue</button></p></x-step>","goals":["next-0"],"keywords":[]},"step-bar":{"id":"step-bar","title":"Step Bar","html":"<x-step id=\"step-bar\" goals=\"next-0\"><h2>Bar plots</h2><p>Another common plot geometry is the <em>bar</em>. Suppose we want to know the average petal width for flowers with a given petal length. We can group by petal length and aggregate with the <code class=\"language-python\">mean</code> function to obtain the desired data, and then visualize it with a bar graph: </p><pre python-executable=\"python-executable\">show(px.bar(iris.groupby('Petal.Length').agg('mean').reset_index(), \n            x = 'Petal.Length', \n            y = 'Petal.Width'))</pre><p>We use <code class=\"language-python\">reset_index</code> because we want to be able to access the index column of the data frame (which contains the petal lengths), and the index is not directly accessible from Plotly Express. Resetting makes the index a normal column and replaces it with consecutive integers starting from 0. </p><p><button class=\"next-step\">Continue</button></p></x-step>","goals":["next-0"],"keywords":[]},"step-histogram":{"id":"step-histogram","title":"Step Histogram","html":"<x-step id=\"step-histogram\" goals=\"next-0\"><p>Perhaps the most common use of the bar geometry is to make <strong>histograms</strong>. A histogram is a bar plot obtained by <em>binning</em> observations into intervals based on the values of a particular variable and plotting the intervals on the horizontal axis and the bin counts on the vertical axis. </p><p>Here's an example of a histogram in Plotly Express. </p><pre python-executable=\"python-executable\">show(px.histogram(iris, x = 'Sepal.Width', nbins = 30))</pre><p>We can control the number of bins with the <code class=\"language-python\">nbins</code> argument. </p><p><button class=\"next-step\">Continue</button></p></x-step>","goals":["next-0"],"keywords":[]},"step-histogram-exercise":{"id":"step-histogram-exercise","title":"Step Histogram Exercise","html":"<x-step id=\"step-histogram-exercise\" goals=\"quill\"><div class=\"exercise\"> <p><strong>Exercise</strong><br>Does it make sense to map a categorical variable to the <code class=\"language-python\">color</code> aesthetic for a histogram? Try changing the command below to map the species column to <span class=\"nowrap\"><code class=\"language-python\">color</code>.</span> </p></div> <pre python-executable=\"python-executable\">show(px.histogram(iris, x = 'Sepal.Width', nbins = 30))</pre><x-quill goal=\"quill\"></x-quill></x-step>","goals":["quill"],"keywords":[]},"step-57":{"id":"step-57","title":"Step  ","html":"<x-step id=\"step-57\" goals=\"next-0\"><p><em>Solution.</em> Yes, we can split each bar into multiple colors to visualize the contribution to each bar from each category. This works in Plotly Express: </p><pre python-executable=\"python-executable\">show(px.histogram(iris, \n                  x = 'Sepal.Width', \n                  nbins = 30, \n                  color = 'Species'))</pre><p><button class=\"next-step\">Continue</button></p></x-step>","goals":["next-0"],"keywords":[]},"step-density-plots":{"id":"step-density-plots","title":"Step Density Plots","html":"<x-step id=\"step-density-plots\" goals=\"blank-0 blank-1 next-0\"><h2>Density plots</h2><p>Closely related to the histogram is a one-dimensional <em>density plot</em>. A density plot approximates the distribution of a variable in a smooth way, rather than the using the <x-blank-mc goal=\"blank-0\"><button class=\"choice\">piecewise constant</button><button class=\"choice\">linear</button><button class=\"choice\">quadratic</button></x-blank-mc> function mapping each <svg style=\"vertical-align: -0.025ex\" width=\"1.294ex\" height=\"1.025ex\" class=\"mathjax\" viewBox=\"0 -442 572 453\"><title>x</title><defs><path id=\"MJX-28-TEX-I-1D465\" d=\"M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z\"></path></defs><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><use xlink:href=\"#MJX-28-TEX-I-1D465\"></use></g></g></g></svg> value to the height of its histogram bar.</p><p>Unfortunately, Plotly Express doesn't have direct support for one-dimensional density plots, so we'll use plotly module called the <em>figure factory</em>: </p><pre python-executable=\"python-executable\">import plotly.figure_factory as ff\nshow(ff.create_distplot([iris['Sepal.Width']],['Sepal.Width']))</pre><p>The figure factory takes two lists as arguments: one contains the values to use to estimate the density, and the other represents the names of the groups (in this case, we're just using one group). You'll see that the plot produced by this function contains three <span class=\"nowrap\"><x-blank-mc goal=\"blank-1\"><button class=\"choice\">geometries</button><button class=\"choice\">aesthetics</button><button class=\"choice\">plot titles</button></x-blank-mc>:</span> the bar plot is a histogram, the line plot represents the density, and the tick marks indicate the individual variable values (the set of tick marks is called a <strong>rug plot</strong>). </p><p><button class=\"next-step\">Continue</button></p></x-step>","goals":["blank-0","blank-1","next-0"],"keywords":[]},"step-boxplot":{"id":"step-boxplot","title":"Step Boxplot","html":"<x-step id=\"step-boxplot\" goals=\"blank-0 blank-1 blank-2 blank-3 next-0\"><p>If a categorical variables is mapped to the <code class=\"language-python\">x</code> aesthetic, the point geometry fails to make good use of plot space because all of the points will lie on a limited number of <x-blank-mc goal=\"blank-0\"><button class=\"choice\">vertical</button><button class=\"choice\">horizontal</button></x-blank-mc> lines. As a result, it's common practice to represent the points in each category in some other way. Examples include the boxplot and the violin plot:</p><pre python-executable=\"python-executable\">show(px.box(iris, x = 'Species', y = 'Petal.Width'))</pre><pre python-executable=\"python-executable\">show(px.violin(iris, x = 'Species', y = 'Petal.Width'))</pre><p>The box plot represents the distribute of the <code class=\"language-python\">y</code> variable using five numbers: the min, first quartile, median, third quartile, and max. Alternatively, the min and max are sometimes replaced with upper and lower <em>fences</em>, and observations which lie outside are considered outliers and depicted with with points. The plot creator has discretion regarding how to calculate fence cutoffs, but one common choice for the upper fence formula is <span class=\"nowrap\"><svg style=\"vertical-align: -0.566ex\" width=\"15.967ex\" height=\"2.262ex\" class=\"mathjax\" viewBox=\"0 -750 7057.4 1000\"><title>\\mathrm{Q}_3 + (1.5 \\cdot \\mathrm{IQR})</title><defs><path id=\"MJX-378-TEX-N-51\" d=\"M56 341Q56 499 157 602T388 705Q521 705 621 601T722 341Q722 275 703 218T660 127T603 63T555 25T525 9Q524 8 524 8H523Q524 5 526 -1T537 -21T555 -47T581 -67T615 -76Q653 -76 678 -56T706 -3Q707 10 716 10Q721 10 728 5L727 -13Q727 -88 697 -140T606 -193Q563 -193 538 -166T498 -83Q483 -23 483 -8L471 -11Q459 -14 435 -18T388 -22Q254 -22 155 81T56 341ZM607 339Q607 429 586 496T531 598T461 649T390 665T318 649T248 598T192 496T170 339Q170 143 277 57Q301 39 305 39L304 42Q304 44 304 46Q301 53 301 68Q301 101 325 128T391 155Q454 155 495 70L501 58Q549 91 578 164Q607 234 607 339ZM385 18Q404 18 425 23T459 33T472 40Q471 47 468 57T449 88T412 115Q398 117 386 117Q367 117 353 102T338 67Q338 48 351 33T385 18Z\"></path><path id=\"MJX-378-TEX-N-33\" d=\"M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z\"></path><path id=\"MJX-378-TEX-N-2B\" d=\"M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z\"></path><path id=\"MJX-378-TEX-N-28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"></path><path id=\"MJX-378-TEX-N-31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path><path id=\"MJX-378-TEX-N-2E\" d=\"M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z\"></path><path id=\"MJX-378-TEX-N-35\" d=\"M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z\"></path><path id=\"MJX-378-TEX-N-22C5\" d=\"M78 250Q78 274 95 292T138 310Q162 310 180 294T199 251Q199 226 182 208T139 190T96 207T78 250Z\"></path><path id=\"MJX-378-TEX-N-49\" d=\"M328 0Q307 3 180 3T32 0H21V46H43Q92 46 106 49T126 60Q128 63 128 342Q128 620 126 623Q122 628 118 630T96 635T43 637H21V683H32Q53 680 180 680T328 683H339V637H317Q268 637 254 634T234 623Q232 620 232 342Q232 63 234 60Q238 55 242 53T264 48T317 46H339V0H328Z\"></path><path id=\"MJX-378-TEX-N-52\" d=\"M130 622Q123 629 119 631T103 634T60 637H27V683H202H236H300Q376 683 417 677T500 648Q595 600 609 517Q610 512 610 501Q610 468 594 439T556 392T511 361T472 343L456 338Q459 335 467 332Q497 316 516 298T545 254T559 211T568 155T578 94Q588 46 602 31T640 16H645Q660 16 674 32T692 87Q692 98 696 101T712 105T728 103T732 90Q732 59 716 27T672 -16Q656 -22 630 -22Q481 -16 458 90Q456 101 456 163T449 246Q430 304 373 320L363 322L297 323H231V192L232 61Q238 51 249 49T301 46H334V0H323Q302 3 181 3Q59 3 38 0H27V46H60Q102 47 111 49T130 61V622ZM491 499V509Q491 527 490 539T481 570T462 601T424 623T362 636Q360 636 340 636T304 637H283Q238 637 234 628Q231 624 231 492V360H289Q390 360 434 378T489 456Q491 467 491 499Z\"></path><path id=\"MJX-378-TEX-N-29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"></path></defs><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\"><g data-mml-node=\"math\"><g data-mml-node=\"msub\"><g data-mml-node=\"TeXAtom\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"mi\"><use xlink:href=\"#MJX-378-TEX-N-51\"></use></g></g><g data-mml-node=\"mn\" transform=\"translate(778, -228.4) scale(0.707)\"><use xlink:href=\"#MJX-378-TEX-N-33\"></use></g></g><g data-mml-node=\"mo\" transform=\"translate(1403.8, 0)\"><use xlink:href=\"#MJX-378-TEX-N-2B\"></use></g><g data-mml-node=\"mo\" transform=\"translate(2404, 0)\"><use xlink:href=\"#MJX-378-TEX-N-28\"></use></g><g data-mml-node=\"mn\" transform=\"translate(2793, 0)\"><use xlink:href=\"#MJX-378-TEX-N-31\"></use><use xlink:href=\"#MJX-378-TEX-N-2E\" transform=\"translate(500, 0)\"></use><use xlink:href=\"#MJX-378-TEX-N-35\" transform=\"translate(778, 0)\"></use></g><g data-mml-node=\"mo\" transform=\"translate(4293.2, 0)\"><use xlink:href=\"#MJX-378-TEX-N-22C5\"></use></g><g data-mml-node=\"TeXAtom\" data-mjx-texclass=\"ORD\" transform=\"translate(4793.4, 0)\"><g data-mml-node=\"mi\"><use xlink:href=\"#MJX-378-TEX-N-49\"></use></g><g data-mml-node=\"mi\" transform=\"translate(361, 0)\"><use xlink:href=\"#MJX-378-TEX-N-51\"></use></g><g data-mml-node=\"mi\" transform=\"translate(1139, 0)\"><use xlink:href=\"#MJX-378-TEX-N-52\"></use></g></g><g data-mml-node=\"mo\" transform=\"translate(6668.4, 0)\"><use xlink:href=\"#MJX-378-TEX-N-29\"></use></g></g></g></svg>,</span> where <svg style=\"vertical-align: -0.552ex\" width=\"2.673ex\" height=\"2.147ex\" class=\"mathjax\" viewBox=\"0 -705 1181.6 948.9\"><title>\\mathrm{Q}_3</title><defs><path id=\"MJX-386-TEX-N-51\" d=\"M56 341Q56 499 157 602T388 705Q521 705 621 601T722 341Q722 275 703 218T660 127T603 63T555 25T525 9Q524 8 524 8H523Q524 5 526 -1T537 -21T555 -47T581 -67T615 -76Q653 -76 678 -56T706 -3Q707 10 716 10Q721 10 728 5L727 -13Q727 -88 697 -140T606 -193Q563 -193 538 -166T498 -83Q483 -23 483 -8L471 -11Q459 -14 435 -18T388 -22Q254 -22 155 81T56 341ZM607 339Q607 429 586 496T531 598T461 649T390 665T318 649T248 598T192 496T170 339Q170 143 277 57Q301 39 305 39L304 42Q304 44 304 46Q301 53 301 68Q301 101 325 128T391 155Q454 155 495 70L501 58Q549 91 578 164Q607 234 607 339ZM385 18Q404 18 425 23T459 33T472 40Q471 47 468 57T449 88T412 115Q398 117 386 117Q367 117 353 102T338 67Q338 48 351 33T385 18Z\"></path><path id=\"MJX-386-TEX-N-33\" d=\"M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z\"></path></defs><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\"><g data-mml-node=\"math\"><g data-mml-node=\"msub\"><g data-mml-node=\"TeXAtom\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"mi\"><use xlink:href=\"#MJX-386-TEX-N-51\"></use></g></g><g data-mml-node=\"mn\" transform=\"translate(778, -228.4) scale(0.707)\"><use xlink:href=\"#MJX-386-TEX-N-33\"></use></g></g></g></g></svg> is the third quartile and <svg style=\"vertical-align: -0.437ex\" width=\"4.242ex\" height=\"2.032ex\" class=\"mathjax\" viewBox=\"0 -705 1875 898\"><title>\\mathrm{IQR}</title><defs><path id=\"MJX-388-TEX-N-49\" d=\"M328 0Q307 3 180 3T32 0H21V46H43Q92 46 106 49T126 60Q128 63 128 342Q128 620 126 623Q122 628 118 630T96 635T43 637H21V683H32Q53 680 180 680T328 683H339V637H317Q268 637 254 634T234 623Q232 620 232 342Q232 63 234 60Q238 55 242 53T264 48T317 46H339V0H328Z\"></path><path id=\"MJX-388-TEX-N-51\" d=\"M56 341Q56 499 157 602T388 705Q521 705 621 601T722 341Q722 275 703 218T660 127T603 63T555 25T525 9Q524 8 524 8H523Q524 5 526 -1T537 -21T555 -47T581 -67T615 -76Q653 -76 678 -56T706 -3Q707 10 716 10Q721 10 728 5L727 -13Q727 -88 697 -140T606 -193Q563 -193 538 -166T498 -83Q483 -23 483 -8L471 -11Q459 -14 435 -18T388 -22Q254 -22 155 81T56 341ZM607 339Q607 429 586 496T531 598T461 649T390 665T318 649T248 598T192 496T170 339Q170 143 277 57Q301 39 305 39L304 42Q304 44 304 46Q301 53 301 68Q301 101 325 128T391 155Q454 155 495 70L501 58Q549 91 578 164Q607 234 607 339ZM385 18Q404 18 425 23T459 33T472 40Q471 47 468 57T449 88T412 115Q398 117 386 117Q367 117 353 102T338 67Q338 48 351 33T385 18Z\"></path><path id=\"MJX-388-TEX-N-52\" d=\"M130 622Q123 629 119 631T103 634T60 637H27V683H202H236H300Q376 683 417 677T500 648Q595 600 609 517Q610 512 610 501Q610 468 594 439T556 392T511 361T472 343L456 338Q459 335 467 332Q497 316 516 298T545 254T559 211T568 155T578 94Q588 46 602 31T640 16H645Q660 16 674 32T692 87Q692 98 696 101T712 105T728 103T732 90Q732 59 716 27T672 -16Q656 -22 630 -22Q481 -16 458 90Q456 101 456 163T449 246Q430 304 373 320L363 322L297 323H231V192L232 61Q238 51 249 49T301 46H334V0H323Q302 3 181 3Q59 3 38 0H27V46H60Q102 47 111 49T130 61V622ZM491 499V509Q491 527 490 539T481 570T462 601T424 623T362 636Q360 636 340 636T304 637H283Q238 637 234 628Q231 624 231 492V360H289Q390 360 434 378T489 456Q491 467 491 499Z\"></path></defs><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\"><g data-mml-node=\"math\"><g data-mml-node=\"TeXAtom\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"mi\"><use xlink:href=\"#MJX-388-TEX-N-49\"></use></g><g data-mml-node=\"mi\" transform=\"translate(361, 0)\"><use xlink:href=\"#MJX-388-TEX-N-51\"></use></g><g data-mml-node=\"mi\" transform=\"translate(1139, 0)\"><use xlink:href=\"#MJX-388-TEX-N-52\"></use></g></g></g></g></svg> is the <span class=\"nowrap\"><x-gloss xid=\"IQR\">interquartile range</x-gloss>.</span> The corresponding lower fence formula would be <x-blank-mc goal=\"blank-1\"><button class=\"choice\"><span class=\"math\" data-voice=\"_Q_ 1\"><msub><mi>Q</mi><mn>1</mn></msub></span></button><button class=\"choice\"><span class=\"math\" data-voice=\"_Q_ 2\"><msub><mi>Q</mi><mn>2</mn></msub></span></button></x-blank-mc> <x-blank-mc goal=\"blank-2\"><button class=\"choice\">minus</button><button class=\"choice\">plus</button></x-blank-mc> 1.5 times the <span class=\"nowrap\"><x-blank-mc goal=\"blank-3\"><button class=\"choice\">inter-quartile range</button><button class=\"choice\">variance</button><button class=\"choice\">median</button></x-blank-mc>.</span></p><p><button class=\"next-step\">Continue</button></p></x-step>","goals":["blank-0","blank-1","blank-2","blank-3","next-0"],"keywords":[]},"step-violin":{"id":"step-violin","title":"Step Violin","html":"<x-step id=\"step-violin\" goals=\"blank-0 next-0\"><p>A violin plot is similar to a boxplot, except that rather than a box, a small <x-blank-mc goal=\"blank-0\"><button class=\"choice\">density plot</button><button class=\"choice\">histogram</button></x-blank-mc> is drawn instead of the box-and-whisker figure. </p><p><button class=\"next-step\">Continue</button></p></x-step>","goals":["blank-0","next-0"],"keywords":[]},"step-viz-close":{"id":"step-viz-close","title":"Step Viz Close","html":"<x-step id=\"step-viz-close\" goals=\"\"><p>In this section we introduced several of the main tools in a data scientist's visualization toolkit, but you will learn many others. Check out the <a href=\"https://www.rstudio.com/wp-content/uploads/2015/03/ggplot2-cheatsheet.pdf\" target=\"_blank\">cheatsheet for ggplot2</a> to see a much longer list of geometries, aesthetics, and statistical transformations.</p></x-step>","goals":[],"keywords":[]},"model":{"id":"model","title":"Model","html":"<x-step id=\"model\" goals=\"next-0\"><p>A machine learning <strong>model</strong> is a mathematical description of a relationship between random variables. In this section, we will focus on <strong>supervised learning</strong>, which is the task of predicting the values of one random variable given the values of others. We call the variable to predict the <strong>response variable</strong> and the other variables <strong>features</strong>. </p><p><button class=\"next-step\">Continue</button></p></x-step>","goals":["next-0"],"keywords":[]},"step-response-feature":{"id":"step-response-feature","title":"Step Response Feature","html":"<x-step id=\"step-response-feature\" goals=\"next-0\"><p>We get information about the joint distribution of the features and response variable in the form of a tidy data frame whose rows represent independent samples from the distribution. These data are called <strong>training data</strong>. </p><p><button class=\"next-step\">Continue</button></p></x-step>","goals":["next-0"],"keywords":[]},"human-machine-learning":{"id":"human-machine-learning","title":"Human Machine Learning","html":"<x-step id=\"human-machine-learning\" goals=\"blank-0 blank-1\"><h2>Machine learning with no machine</h2><p>Let's warm up with some supervised <em>human</em> learning.</p><div class=\"exercise\"> <p><strong>Exercise</strong><br>Fill in the missing data in the following data frame. Think of each row as having been randomly sampled from the distribution of a random vector <svg style=\"vertical-align: -0.566ex\" width=\"6.42ex\" height=\"2.262ex\" class=\"mathjax\" viewBox=\"0 -750 2837.7 1000\"><title>(X,Y)</title><defs><path id=\"MJX-263-TEX-N-28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"></path><path id=\"MJX-263-TEX-I-1D44B\" d=\"M42 0H40Q26 0 26 11Q26 15 29 27Q33 41 36 43T55 46Q141 49 190 98Q200 108 306 224T411 342Q302 620 297 625Q288 636 234 637H206Q200 643 200 645T202 664Q206 677 212 683H226Q260 681 347 681Q380 681 408 681T453 682T473 682Q490 682 490 671Q490 670 488 658Q484 643 481 640T465 637Q434 634 411 620L488 426L541 485Q646 598 646 610Q646 628 622 635Q617 635 609 637Q594 637 594 648Q594 650 596 664Q600 677 606 683H618Q619 683 643 683T697 681T738 680Q828 680 837 683H845Q852 676 852 672Q850 647 840 637H824Q790 636 763 628T722 611T698 593L687 584Q687 585 592 480L505 384Q505 383 536 304T601 142T638 56Q648 47 699 46Q734 46 734 37Q734 35 732 23Q728 7 725 4T711 1Q708 1 678 1T589 2Q528 2 496 2T461 1Q444 1 444 10Q444 11 446 25Q448 35 450 39T455 44T464 46T480 47T506 54Q523 62 523 64Q522 64 476 181L429 299Q241 95 236 84Q232 76 232 72Q232 53 261 47Q262 47 267 47T273 46Q276 46 277 46T280 45T283 42T284 35Q284 26 282 19Q279 6 276 4T261 1Q258 1 243 1T201 2T142 2Q64 2 42 0Z\"></path><path id=\"MJX-263-TEX-N-2C\" d=\"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z\"></path><path id=\"MJX-263-TEX-I-1D44C\" d=\"M66 637Q54 637 49 637T39 638T32 641T30 647T33 664T42 682Q44 683 56 683Q104 680 165 680Q288 680 306 683H316Q322 677 322 674T320 656Q316 643 310 637H298Q242 637 242 624Q242 619 292 477T343 333L346 336Q350 340 358 349T379 373T411 410T454 461Q546 568 561 587T577 618Q577 634 545 637Q528 637 528 647Q528 649 530 661Q533 676 535 679T549 683Q551 683 578 682T657 680Q684 680 713 681T746 682Q763 682 763 673Q763 669 760 657T755 643Q753 637 734 637Q662 632 617 587Q608 578 477 424L348 273L322 169Q295 62 295 57Q295 46 363 46Q379 46 384 45T390 35Q390 33 388 23Q384 6 382 4T366 1Q361 1 324 1T232 2Q170 2 138 2T102 1Q84 1 84 9Q84 14 87 24Q88 27 89 30T90 35T91 39T93 42T96 44T101 45T107 45T116 46T129 46Q168 47 180 50T198 63Q201 68 227 171L252 274L129 623Q128 624 127 625T125 627T122 629T118 631T113 633T105 634T96 635T83 636T66 637Z\"></path><path id=\"MJX-263-TEX-N-29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"></path></defs><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\"><g data-mml-node=\"math\"><g data-mml-node=\"mo\"><use xlink:href=\"#MJX-263-TEX-N-28\"></use></g><g data-mml-node=\"mi\" transform=\"translate(389, 0)\"><use xlink:href=\"#MJX-263-TEX-I-1D44B\"></use></g><g data-mml-node=\"mo\" transform=\"translate(1241, 0)\"><use xlink:href=\"#MJX-263-TEX-N-2C\"></use></g><g data-mml-node=\"mi\" transform=\"translate(1685.7, 0)\"><use xlink:href=\"#MJX-263-TEX-I-1D44C\"></use></g><g data-mml-node=\"mo\" transform=\"translate(2448.7, 0)\"><use xlink:href=\"#MJX-263-TEX-N-29\"></use></g></g></g></svg> in <span class=\"nowrap\"><svg style=\"vertical-align: 0\" width=\"2.547ex\" height=\"1.993ex\" class=\"mathjax\" viewBox=\"0 -881 1125.6 881\"><title>\\mathbb{R}^2</title><defs><path id=\"MJX-247-TEX-D-211D\" d=\"M17 665Q17 672 28 683H221Q415 681 439 677Q461 673 481 667T516 654T544 639T566 623T584 607T597 592T607 578T614 565T618 554L621 548Q626 530 626 497Q626 447 613 419Q578 348 473 326L455 321Q462 310 473 292T517 226T578 141T637 72T686 35Q705 30 705 16Q705 7 693 -1H510Q503 6 404 159L306 310H268V183Q270 67 271 59Q274 42 291 38Q295 37 319 35Q344 35 353 28Q362 17 353 3L346 -1H28Q16 5 16 16Q16 35 55 35Q96 38 101 52Q106 60 106 341T101 632Q95 645 55 648Q17 648 17 665ZM241 35Q238 42 237 45T235 78T233 163T233 337V621L237 635L244 648H133Q136 641 137 638T139 603T141 517T141 341Q141 131 140 89T134 37Q133 36 133 35H241ZM457 496Q457 540 449 570T425 615T400 634T377 643Q374 643 339 648Q300 648 281 635Q271 628 270 610T268 481V346H284Q327 346 375 352Q421 364 439 392T457 496ZM492 537T492 496T488 427T478 389T469 371T464 361Q464 360 465 360Q469 360 497 370Q593 400 593 495Q593 592 477 630L457 637L461 626Q474 611 488 561Q492 537 492 496ZM464 243Q411 317 410 317Q404 317 401 315Q384 315 370 312H346L526 35H619L606 50Q553 109 464 243Z\"></path><path id=\"MJX-247-TEX-N-32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"></path></defs><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\"><g data-mml-node=\"math\"><g data-mml-node=\"msup\"><g data-mml-node=\"TeXAtom\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"mi\"><use xlink:href=\"#MJX-247-TEX-D-211D\"></use></g></g><g data-mml-node=\"mn\" transform=\"translate(722, 410.1) scale(0.707)\"><use xlink:href=\"#MJX-247-TEX-N-32\"></use></g></g></g></g></svg>.</span> </p><table> <thead> <tr> <th>x</th><th>y</th></tr> </thead> <tbody><tr> <td>3</td><td>2</td></tr> <tr> <td>4</td><td>1</td></tr> <tr> <td>-3</td><td>8</td></tr> <tr> <td>2</td><td>3</td></tr> <tr> <td>7</td><td>-2</td></tr> <tr> <td>1</td><td><x-blank solution=\"4\" goal=\"blank-0\"></x-blank></td></tr> <tr> <td>6</td><td><x-blank solution=\"-1\" goal=\"blank-1\"></x-blank></td></tr> </tbody></table> </div> </x-step>","goals":["blank-0","blank-1"],"keywords":[]},"step-variance":{"id":"step-variance","title":"Step Variance","html":"<x-step id=\"step-variance\" goals=\"next-0\"><p>In the data frame above, not much is clear about the distribution of the random variable <span class=\"nowrap\"><svg style=\"vertical-align: 0\" width=\"1.928ex\" height=\"1.545ex\" class=\"mathjax\" viewBox=\"0 -683 852 683\"><title>X</title><defs><path id=\"MJX-25-TEX-I-1D44B\" d=\"M42 0H40Q26 0 26 11Q26 15 29 27Q33 41 36 43T55 46Q141 49 190 98Q200 108 306 224T411 342Q302 620 297 625Q288 636 234 637H206Q200 643 200 645T202 664Q206 677 212 683H226Q260 681 347 681Q380 681 408 681T453 682T473 682Q490 682 490 671Q490 670 488 658Q484 643 481 640T465 637Q434 634 411 620L488 426L541 485Q646 598 646 610Q646 628 622 635Q617 635 609 637Q594 637 594 648Q594 650 596 664Q600 677 606 683H618Q619 683 643 683T697 681T738 680Q828 680 837 683H845Q852 676 852 672Q850 647 840 637H824Q790 636 763 628T722 611T698 593L687 584Q687 585 592 480L505 384Q505 383 536 304T601 142T638 56Q648 47 699 46Q734 46 734 37Q734 35 732 23Q728 7 725 4T711 1Q708 1 678 1T589 2Q528 2 496 2T461 1Q444 1 444 10Q444 11 446 25Q448 35 450 39T455 44T464 46T480 47T506 54Q523 62 523 64Q522 64 476 181L429 299Q241 95 236 84Q232 76 232 72Q232 53 261 47Q262 47 267 47T273 46Q276 46 277 46T280 45T283 42T284 35Q284 26 282 19Q279 6 276 4T261 1Q258 1 243 1T201 2T142 2Q64 2 42 0Z\"></path></defs><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><use xlink:href=\"#MJX-25-TEX-I-1D44B\"></use></g></g></g></svg>.</span> But it does seem reasonable to speculate that <svg style=\"vertical-align: -0.186ex\" width=\"10.568ex\" height=\"1.731ex\" class=\"mathjax\" viewBox=\"0 -683 4671 765\"><title>Y = 5 - X</title><defs><path id=\"MJX-379-TEX-I-1D44C\" d=\"M66 637Q54 637 49 637T39 638T32 641T30 647T33 664T42 682Q44 683 56 683Q104 680 165 680Q288 680 306 683H316Q322 677 322 674T320 656Q316 643 310 637H298Q242 637 242 624Q242 619 292 477T343 333L346 336Q350 340 358 349T379 373T411 410T454 461Q546 568 561 587T577 618Q577 634 545 637Q528 637 528 647Q528 649 530 661Q533 676 535 679T549 683Q551 683 578 682T657 680Q684 680 713 681T746 682Q763 682 763 673Q763 669 760 657T755 643Q753 637 734 637Q662 632 617 587Q608 578 477 424L348 273L322 169Q295 62 295 57Q295 46 363 46Q379 46 384 45T390 35Q390 33 388 23Q384 6 382 4T366 1Q361 1 324 1T232 2Q170 2 138 2T102 1Q84 1 84 9Q84 14 87 24Q88 27 89 30T90 35T91 39T93 42T96 44T101 45T107 45T116 46T129 46Q168 47 180 50T198 63Q201 68 227 171L252 274L129 623Q128 624 127 625T125 627T122 629T118 631T113 633T105 634T96 635T83 636T66 637Z\"></path><path id=\"MJX-379-TEX-N-3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"></path><path id=\"MJX-379-TEX-N-35\" d=\"M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z\"></path><path id=\"MJX-379-TEX-N-2212\" d=\"M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z\"></path><path id=\"MJX-379-TEX-I-1D44B\" d=\"M42 0H40Q26 0 26 11Q26 15 29 27Q33 41 36 43T55 46Q141 49 190 98Q200 108 306 224T411 342Q302 620 297 625Q288 636 234 637H206Q200 643 200 645T202 664Q206 677 212 683H226Q260 681 347 681Q380 681 408 681T453 682T473 682Q490 682 490 671Q490 670 488 658Q484 643 481 640T465 637Q434 634 411 620L488 426L541 485Q646 598 646 610Q646 628 622 635Q617 635 609 637Q594 637 594 648Q594 650 596 664Q600 677 606 683H618Q619 683 643 683T697 681T738 680Q828 680 837 683H845Q852 676 852 672Q850 647 840 637H824Q790 636 763 628T722 611T698 593L687 584Q687 585 592 480L505 384Q505 383 536 304T601 142T638 56Q648 47 699 46Q734 46 734 37Q734 35 732 23Q728 7 725 4T711 1Q708 1 678 1T589 2Q528 2 496 2T461 1Q444 1 444 10Q444 11 446 25Q448 35 450 39T455 44T464 46T480 47T506 54Q523 62 523 64Q522 64 476 181L429 299Q241 95 236 84Q232 76 232 72Q232 53 261 47Q262 47 267 47T273 46Q276 46 277 46T280 45T283 42T284 35Q284 26 282 19Q279 6 276 4T261 1Q258 1 243 1T201 2T142 2Q64 2 42 0Z\"></path></defs><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><use xlink:href=\"#MJX-379-TEX-I-1D44C\"></use></g><g data-mml-node=\"mo\" transform=\"translate(1040.8, 0)\"><use xlink:href=\"#MJX-379-TEX-N-3D\"></use></g><g data-mml-node=\"mn\" transform=\"translate(2096.6, 0)\"><use xlink:href=\"#MJX-379-TEX-N-35\"></use></g><g data-mml-node=\"mo\" transform=\"translate(2818.8, 0)\"><use xlink:href=\"#MJX-379-TEX-N-2212\"></use></g><g data-mml-node=\"mi\" transform=\"translate(3819, 0)\"><use xlink:href=\"#MJX-379-TEX-I-1D44B\"></use></g></g></g></svg> based on the available data. Based on this observation, we might choose to use <svg style=\"vertical-align: -0.566ex\" width=\"12.566ex\" height=\"2.262ex\" class=\"mathjax\" viewBox=\"0 -750 5554 1000\"><title>h(x) = 5 - x</title><defs><path id=\"MJX-387-TEX-I-210E\" d=\"M137 683Q138 683 209 688T282 694Q294 694 294 685Q294 674 258 534Q220 386 220 383Q220 381 227 388Q288 442 357 442Q411 442 444 415T478 336Q478 285 440 178T402 50Q403 36 407 31T422 26Q450 26 474 56T513 138Q516 149 519 151T535 153Q555 153 555 145Q555 144 551 130Q535 71 500 33Q466 -10 419 -10H414Q367 -10 346 17T325 74Q325 90 361 192T398 345Q398 404 354 404H349Q266 404 205 306L198 293L164 158Q132 28 127 16Q114 -11 83 -11Q69 -11 59 -2T48 16Q48 30 121 320L195 616Q195 629 188 632T149 637H128Q122 643 122 645T124 664Q129 683 137 683Z\"></path><path id=\"MJX-387-TEX-N-28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"></path><path id=\"MJX-387-TEX-I-1D465\" d=\"M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z\"></path><path id=\"MJX-387-TEX-N-29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"></path><path id=\"MJX-387-TEX-N-3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"></path><path id=\"MJX-387-TEX-N-35\" d=\"M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z\"></path><path id=\"MJX-387-TEX-N-2212\" d=\"M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z\"></path></defs><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><use xlink:href=\"#MJX-387-TEX-I-210E\"></use></g><g data-mml-node=\"mo\" transform=\"translate(576, 0)\"><use xlink:href=\"#MJX-387-TEX-N-28\"></use></g><g data-mml-node=\"mi\" transform=\"translate(965, 0)\"><use xlink:href=\"#MJX-387-TEX-I-1D465\"></use></g><g data-mml-node=\"mo\" transform=\"translate(1537, 0)\"><use xlink:href=\"#MJX-387-TEX-N-29\"></use></g><g data-mml-node=\"mo\" transform=\"translate(2203.8, 0)\"><use xlink:href=\"#MJX-387-TEX-N-3D\"></use></g><g data-mml-node=\"mn\" transform=\"translate(3259.6, 0)\"><use xlink:href=\"#MJX-387-TEX-N-35\"></use></g><g data-mml-node=\"mo\" transform=\"translate(3981.8, 0)\"><use xlink:href=\"#MJX-387-TEX-N-2212\"></use></g><g data-mml-node=\"mi\" transform=\"translate(4982, 0)\"><use xlink:href=\"#MJX-387-TEX-I-1D465\"></use></g></g></g></svg> as our <strong>prediction</strong> function for the problem of predicting <svg style=\"vertical-align: 0\" width=\"1.726ex\" height=\"1.545ex\" class=\"mathjax\" viewBox=\"0 -683 763 683\"><title>Y</title><defs><path id=\"MJX-233-TEX-I-1D44C\" d=\"M66 637Q54 637 49 637T39 638T32 641T30 647T33 664T42 682Q44 683 56 683Q104 680 165 680Q288 680 306 683H316Q322 677 322 674T320 656Q316 643 310 637H298Q242 637 242 624Q242 619 292 477T343 333L346 336Q350 340 358 349T379 373T411 410T454 461Q546 568 561 587T577 618Q577 634 545 637Q528 637 528 647Q528 649 530 661Q533 676 535 679T549 683Q551 683 578 682T657 680Q684 680 713 681T746 682Q763 682 763 673Q763 669 760 657T755 643Q753 637 734 637Q662 632 617 587Q608 578 477 424L348 273L322 169Q295 62 295 57Q295 46 363 46Q379 46 384 45T390 35Q390 33 388 23Q384 6 382 4T366 1Q361 1 324 1T232 2Q170 2 138 2T102 1Q84 1 84 9Q84 14 87 24Q88 27 89 30T90 35T91 39T93 42T96 44T101 45T107 45T116 46T129 46Q168 47 180 50T198 63Q201 68 227 171L252 274L129 623Q128 624 127 625T125 627T122 629T118 631T113 633T105 634T96 635T83 636T66 637Z\"></path></defs><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><use xlink:href=\"#MJX-233-TEX-I-1D44C\"></use></g></g></g></svg> based on the value of <span class=\"nowrap\"><svg style=\"vertical-align: 0\" width=\"1.928ex\" height=\"1.545ex\" class=\"mathjax\" viewBox=\"0 -683 852 683\"><title>X</title><defs><path id=\"MJX-25-TEX-I-1D44B\" d=\"M42 0H40Q26 0 26 11Q26 15 29 27Q33 41 36 43T55 46Q141 49 190 98Q200 108 306 224T411 342Q302 620 297 625Q288 636 234 637H206Q200 643 200 645T202 664Q206 677 212 683H226Q260 681 347 681Q380 681 408 681T453 682T473 682Q490 682 490 671Q490 670 488 658Q484 643 481 640T465 637Q434 634 411 620L488 426L541 485Q646 598 646 610Q646 628 622 635Q617 635 609 637Q594 637 594 648Q594 650 596 664Q600 677 606 683H618Q619 683 643 683T697 681T738 680Q828 680 837 683H845Q852 676 852 672Q850 647 840 637H824Q790 636 763 628T722 611T698 593L687 584Q687 585 592 480L505 384Q505 383 536 304T601 142T638 56Q648 47 699 46Q734 46 734 37Q734 35 732 23Q728 7 725 4T711 1Q708 1 678 1T589 2Q528 2 496 2T461 1Q444 1 444 10Q444 11 446 25Q448 35 450 39T455 44T464 46T480 47T506 54Q523 62 523 64Q522 64 476 181L429 299Q241 95 236 84Q232 76 232 72Q232 53 261 47Q262 47 267 47T273 46Q276 46 277 46T280 45T283 42T284 35Q284 26 282 19Q279 6 276 4T261 1Q258 1 243 1T201 2T142 2Q64 2 42 0Z\"></path></defs><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><use xlink:href=\"#MJX-25-TEX-I-1D44B\"></use></g></g></g></svg>.</span> </p><p><button class=\"next-step\">Continue</button></p></x-step>","goals":["next-0"],"keywords":[]},"step-not-deterministic":{"id":"step-not-deterministic","title":"Step Not Deterministic","html":"<x-step id=\"step-not-deterministic\" goals=\"blank-0\"><p>The situation where one random variable is strictly determined by another is rare in practice. Let's try a trickier version of the previous exercise:</p><div class=\"exercise\"> <p><strong>Exercise</strong><br>Fill in the missing data in the following data frame. Hint: it might help to make a scatter plot.</p><table> <thead> <tr> <th>x</th><th>y</th></tr> </thead> <tbody><tr> <td>2</td><td>1</td></tr> <tr> <td>13</td><td>325</td></tr> <tr> <td>1</td><td>28</td></tr> <tr> <td>9</td><td>190</td></tr> <tr> <td>20</td><td>818</td></tr> <tr> <td>12</td><td>291</td></tr> <tr> <td>18</td><td>592</td></tr> <tr> <td>9</td><td>153</td></tr> <tr> <td>-8</td><td>80</td></tr> <tr> <td>5</td><td><x-blank solution=\"118±50\" goal=\"blank-0\"></x-blank></td></tr> </tbody></table> </div> <pre python-executable=\"python-executable\">import plotly.express as px\nfrom datagymnasia import show\nimport pandas as pd\ndf = pd.DataFrame({'x': [2, 13, 1, 9, 20, 12, 18, 9, -8],\n                 'y': [1, 325, 28, 190, 818, 291, 592, 153, 80]})\nshow(px.scatter(df, x = 'x', y = 'y'))</pre></x-step>","goals":["blank-0"],"keywords":[]},"step-67":{"id":"step-67","title":"Step  ","html":"<x-step id=\"step-67\" goals=\"next-0\"><p>The data in the table above were actually generated from a particular distribution, and the value of <svg style=\"vertical-align: -0.464ex\" width=\"1.109ex\" height=\"1.464ex\" class=\"mathjax\" viewBox=\"0 -442 490 647\"><title>y</title><defs><path id=\"MJX-29-TEX-I-1D466\" d=\"M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z\"></path></defs><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><use xlink:href=\"#MJX-29-TEX-I-1D466\"></use></g></g></g></svg> for the last observation happened to be 118. However, all you can really tell from the training data is that it looks like the value is probably between 0 and 200 or so. Because the <x-gloss xid=\"conditional-variance\">conditional variance</x-gloss> of <svg style=\"vertical-align: 0\" width=\"1.726ex\" height=\"1.545ex\" class=\"mathjax\" viewBox=\"0 -683 763 683\"><title>Y</title><defs><path id=\"MJX-233-TEX-I-1D44C\" d=\"M66 637Q54 637 49 637T39 638T32 641T30 647T33 664T42 682Q44 683 56 683Q104 680 165 680Q288 680 306 683H316Q322 677 322 674T320 656Q316 643 310 637H298Q242 637 242 624Q242 619 292 477T343 333L346 336Q350 340 358 349T379 373T411 410T454 461Q546 568 561 587T577 618Q577 634 545 637Q528 637 528 647Q528 649 530 661Q533 676 535 679T549 683Q551 683 578 682T657 680Q684 680 713 681T746 682Q763 682 763 673Q763 669 760 657T755 643Q753 637 734 637Q662 632 617 587Q608 578 477 424L348 273L322 169Q295 62 295 57Q295 46 363 46Q379 46 384 45T390 35Q390 33 388 23Q384 6 382 4T366 1Q361 1 324 1T232 2Q170 2 138 2T102 1Q84 1 84 9Q84 14 87 24Q88 27 89 30T90 35T91 39T93 42T96 44T101 45T107 45T116 46T129 46Q168 47 180 50T198 63Q201 68 227 171L252 274L129 623Q128 624 127 625T125 627T122 629T118 631T113 633T105 634T96 635T83 636T66 637Z\"></path></defs><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><use xlink:href=\"#MJX-233-TEX-I-1D44C\"></use></g></g></g></svg> given <svg style=\"vertical-align: 0\" width=\"1.928ex\" height=\"1.545ex\" class=\"mathjax\" viewBox=\"0 -683 852 683\"><title>X</title><defs><path id=\"MJX-25-TEX-I-1D44B\" d=\"M42 0H40Q26 0 26 11Q26 15 29 27Q33 41 36 43T55 46Q141 49 190 98Q200 108 306 224T411 342Q302 620 297 625Q288 636 234 637H206Q200 643 200 645T202 664Q206 677 212 683H226Q260 681 347 681Q380 681 408 681T453 682T473 682Q490 682 490 671Q490 670 488 658Q484 643 481 640T465 637Q434 634 411 620L488 426L541 485Q646 598 646 610Q646 628 622 635Q617 635 609 637Q594 637 594 648Q594 650 596 664Q600 677 606 683H618Q619 683 643 683T697 681T738 680Q828 680 837 683H845Q852 676 852 672Q850 647 840 637H824Q790 636 763 628T722 611T698 593L687 584Q687 585 592 480L505 384Q505 383 536 304T601 142T638 56Q648 47 699 46Q734 46 734 37Q734 35 732 23Q728 7 725 4T711 1Q708 1 678 1T589 2Q528 2 496 2T461 1Q444 1 444 10Q444 11 446 25Q448 35 450 39T455 44T464 46T480 47T506 54Q523 62 523 64Q522 64 476 181L429 299Q241 95 236 84Q232 76 232 72Q232 53 261 47Q262 47 267 47T273 46Q276 46 277 46T280 45T283 42T284 35Q284 26 282 19Q279 6 276 4T261 1Q258 1 243 1T201 2T142 2Q64 2 42 0Z\"></path></defs><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><use xlink:href=\"#MJX-25-TEX-I-1D44B\"></use></g></g></g></svg> is nonzero, it is not possible to predict <svg style=\"vertical-align: 0\" width=\"1.726ex\" height=\"1.545ex\" class=\"mathjax\" viewBox=\"0 -683 763 683\"><title>Y</title><defs><path id=\"MJX-233-TEX-I-1D44C\" d=\"M66 637Q54 637 49 637T39 638T32 641T30 647T33 664T42 682Q44 683 56 683Q104 680 165 680Q288 680 306 683H316Q322 677 322 674T320 656Q316 643 310 637H298Q242 637 242 624Q242 619 292 477T343 333L346 336Q350 340 358 349T379 373T411 410T454 461Q546 568 561 587T577 618Q577 634 545 637Q528 637 528 647Q528 649 530 661Q533 676 535 679T549 683Q551 683 578 682T657 680Q684 680 713 681T746 682Q763 682 763 673Q763 669 760 657T755 643Q753 637 734 637Q662 632 617 587Q608 578 477 424L348 273L322 169Q295 62 295 57Q295 46 363 46Q379 46 384 45T390 35Q390 33 388 23Q384 6 382 4T366 1Q361 1 324 1T232 2Q170 2 138 2T102 1Q84 1 84 9Q84 14 87 24Q88 27 89 30T90 35T91 39T93 42T96 44T101 45T107 45T116 46T129 46Q168 47 180 50T198 63Q201 68 227 171L252 274L129 623Q128 624 127 625T125 627T122 629T118 631T113 633T105 634T96 635T83 636T66 637Z\"></path></defs><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><use xlink:href=\"#MJX-233-TEX-I-1D44C\"></use></g></g></g></svg> values exactly given corresponding <svg style=\"vertical-align: 0\" width=\"1.928ex\" height=\"1.545ex\" class=\"mathjax\" viewBox=\"0 -683 852 683\"><title>X</title><defs><path id=\"MJX-25-TEX-I-1D44B\" d=\"M42 0H40Q26 0 26 11Q26 15 29 27Q33 41 36 43T55 46Q141 49 190 98Q200 108 306 224T411 342Q302 620 297 625Q288 636 234 637H206Q200 643 200 645T202 664Q206 677 212 683H226Q260 681 347 681Q380 681 408 681T453 682T473 682Q490 682 490 671Q490 670 488 658Q484 643 481 640T465 637Q434 634 411 620L488 426L541 485Q646 598 646 610Q646 628 622 635Q617 635 609 637Q594 637 594 648Q594 650 596 664Q600 677 606 683H618Q619 683 643 683T697 681T738 680Q828 680 837 683H845Q852 676 852 672Q850 647 840 637H824Q790 636 763 628T722 611T698 593L687 584Q687 585 592 480L505 384Q505 383 536 304T601 142T638 56Q648 47 699 46Q734 46 734 37Q734 35 732 23Q728 7 725 4T711 1Q708 1 678 1T589 2Q528 2 496 2T461 1Q444 1 444 10Q444 11 446 25Q448 35 450 39T455 44T464 46T480 47T506 54Q523 62 523 64Q522 64 476 181L429 299Q241 95 236 84Q232 76 232 72Q232 53 261 47Q262 47 267 47T273 46Q276 46 277 46T280 45T283 42T284 35Q284 26 282 19Q279 6 276 4T261 1Q258 1 243 1T201 2T142 2Q64 2 42 0Z\"></path></defs><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><use xlink:href=\"#MJX-25-TEX-I-1D44B\"></use></g></g></g></svg> values.</p><p><button class=\"next-step\">Continue</button></p></x-step>","goals":["next-0"],"keywords":[]},"step-predict-expectation":{"id":"step-predict-expectation","title":"Step Predict Expectation","html":"<x-step id=\"step-predict-expectation\" goals=\"next-0\"><p>As illustrated in this example, when predicting one random variable <svg style=\"vertical-align: 0\" width=\"1.726ex\" height=\"1.545ex\" class=\"mathjax\" viewBox=\"0 -683 763 683\"><title>Y</title><defs><path id=\"MJX-233-TEX-I-1D44C\" d=\"M66 637Q54 637 49 637T39 638T32 641T30 647T33 664T42 682Q44 683 56 683Q104 680 165 680Q288 680 306 683H316Q322 677 322 674T320 656Q316 643 310 637H298Q242 637 242 624Q242 619 292 477T343 333L346 336Q350 340 358 349T379 373T411 410T454 461Q546 568 561 587T577 618Q577 634 545 637Q528 637 528 647Q528 649 530 661Q533 676 535 679T549 683Q551 683 578 682T657 680Q684 680 713 681T746 682Q763 682 763 673Q763 669 760 657T755 643Q753 637 734 637Q662 632 617 587Q608 578 477 424L348 273L322 169Q295 62 295 57Q295 46 363 46Q379 46 384 45T390 35Q390 33 388 23Q384 6 382 4T366 1Q361 1 324 1T232 2Q170 2 138 2T102 1Q84 1 84 9Q84 14 87 24Q88 27 89 30T90 35T91 39T93 42T96 44T101 45T107 45T116 46T129 46Q168 47 180 50T198 63Q201 68 227 171L252 274L129 623Q128 624 127 625T125 627T122 629T118 631T113 633T105 634T96 635T83 636T66 637Z\"></path></defs><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><use xlink:href=\"#MJX-233-TEX-I-1D44C\"></use></g></g></g></svg> given another random variable <span class=\"nowrap\"><svg style=\"vertical-align: 0\" width=\"1.928ex\" height=\"1.545ex\" class=\"mathjax\" viewBox=\"0 -683 852 683\"><title>X</title><defs><path id=\"MJX-25-TEX-I-1D44B\" d=\"M42 0H40Q26 0 26 11Q26 15 29 27Q33 41 36 43T55 46Q141 49 190 98Q200 108 306 224T411 342Q302 620 297 625Q288 636 234 637H206Q200 643 200 645T202 664Q206 677 212 683H226Q260 681 347 681Q380 681 408 681T453 682T473 682Q490 682 490 671Q490 670 488 658Q484 643 481 640T465 637Q434 634 411 620L488 426L541 485Q646 598 646 610Q646 628 622 635Q617 635 609 637Q594 637 594 648Q594 650 596 664Q600 677 606 683H618Q619 683 643 683T697 681T738 680Q828 680 837 683H845Q852 676 852 672Q850 647 840 637H824Q790 636 763 628T722 611T698 593L687 584Q687 585 592 480L505 384Q505 383 536 304T601 142T638 56Q648 47 699 46Q734 46 734 37Q734 35 732 23Q728 7 725 4T711 1Q708 1 678 1T589 2Q528 2 496 2T461 1Q444 1 444 10Q444 11 446 25Q448 35 450 39T455 44T464 46T480 47T506 54Q523 62 523 64Q522 64 476 181L429 299Q241 95 236 84Q232 76 232 72Q232 53 261 47Q262 47 267 47T273 46Q276 46 277 46T280 45T283 42T284 35Q284 26 282 19Q279 6 276 4T261 1Q258 1 243 1T201 2T142 2Q64 2 42 0Z\"></path></defs><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><use xlink:href=\"#MJX-25-TEX-I-1D44B\"></use></g></g></g></svg>,</span> we accept that we don't have enough information (even with <em>perfect</em> knowledge of the joint distribution of <svg style=\"vertical-align: 0\" width=\"1.928ex\" height=\"1.545ex\" class=\"mathjax\" viewBox=\"0 -683 852 683\"><title>X</title><defs><path id=\"MJX-25-TEX-I-1D44B\" d=\"M42 0H40Q26 0 26 11Q26 15 29 27Q33 41 36 43T55 46Q141 49 190 98Q200 108 306 224T411 342Q302 620 297 625Q288 636 234 637H206Q200 643 200 645T202 664Q206 677 212 683H226Q260 681 347 681Q380 681 408 681T453 682T473 682Q490 682 490 671Q490 670 488 658Q484 643 481 640T465 637Q434 634 411 620L488 426L541 485Q646 598 646 610Q646 628 622 635Q617 635 609 637Q594 637 594 648Q594 650 596 664Q600 677 606 683H618Q619 683 643 683T697 681T738 680Q828 680 837 683H845Q852 676 852 672Q850 647 840 637H824Q790 636 763 628T722 611T698 593L687 584Q687 585 592 480L505 384Q505 383 536 304T601 142T638 56Q648 47 699 46Q734 46 734 37Q734 35 732 23Q728 7 725 4T711 1Q708 1 678 1T589 2Q528 2 496 2T461 1Q444 1 444 10Q444 11 446 25Q448 35 450 39T455 44T464 46T480 47T506 54Q523 62 523 64Q522 64 476 181L429 299Q241 95 236 84Q232 76 232 72Q232 53 261 47Q262 47 267 47T273 46Q276 46 277 46T280 45T283 42T284 35Q284 26 282 19Q279 6 276 4T261 1Q258 1 243 1T201 2T142 2Q64 2 42 0Z\"></path></defs><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><use xlink:href=\"#MJX-25-TEX-I-1D44B\"></use></g></g></g></svg> and <svg style=\"vertical-align: 0\" width=\"1.726ex\" height=\"1.545ex\" class=\"mathjax\" viewBox=\"0 -683 763 683\"><title>Y</title><defs><path id=\"MJX-233-TEX-I-1D44C\" d=\"M66 637Q54 637 49 637T39 638T32 641T30 647T33 664T42 682Q44 683 56 683Q104 680 165 680Q288 680 306 683H316Q322 677 322 674T320 656Q316 643 310 637H298Q242 637 242 624Q242 619 292 477T343 333L346 336Q350 340 358 349T379 373T411 410T454 461Q546 568 561 587T577 618Q577 634 545 637Q528 637 528 647Q528 649 530 661Q533 676 535 679T549 683Q551 683 578 682T657 680Q684 680 713 681T746 682Q763 682 763 673Q763 669 760 657T755 643Q753 637 734 637Q662 632 617 587Q608 578 477 424L348 273L322 169Q295 62 295 57Q295 46 363 46Q379 46 384 45T390 35Q390 33 388 23Q384 6 382 4T366 1Q361 1 324 1T232 2Q170 2 138 2T102 1Q84 1 84 9Q84 14 87 24Q88 27 89 30T90 35T91 39T93 42T96 44T101 45T107 45T116 46T129 46Q168 47 180 50T198 63Q201 68 227 171L252 274L129 623Q128 624 127 625T125 627T122 629T118 631T113 633T105 634T96 635T83 636T66 637Z\"></path></defs><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><use xlink:href=\"#MJX-233-TEX-I-1D44C\"></use></g></g></g></svg>) to make an exact prediction. Instead, we typically estimate the <x-gloss xid=\"conditional-expectation\">conditional expectation</x-gloss> of <svg style=\"vertical-align: 0\" width=\"1.726ex\" height=\"1.545ex\" class=\"mathjax\" viewBox=\"0 -683 763 683\"><title>Y</title><defs><path id=\"MJX-233-TEX-I-1D44C\" d=\"M66 637Q54 637 49 637T39 638T32 641T30 647T33 664T42 682Q44 683 56 683Q104 680 165 680Q288 680 306 683H316Q322 677 322 674T320 656Q316 643 310 637H298Q242 637 242 624Q242 619 292 477T343 333L346 336Q350 340 358 349T379 373T411 410T454 461Q546 568 561 587T577 618Q577 634 545 637Q528 637 528 647Q528 649 530 661Q533 676 535 679T549 683Q551 683 578 682T657 680Q684 680 713 681T746 682Q763 682 763 673Q763 669 760 657T755 643Q753 637 734 637Q662 632 617 587Q608 578 477 424L348 273L322 169Q295 62 295 57Q295 46 363 46Q379 46 384 45T390 35Q390 33 388 23Q384 6 382 4T366 1Q361 1 324 1T232 2Q170 2 138 2T102 1Q84 1 84 9Q84 14 87 24Q88 27 89 30T90 35T91 39T93 42T96 44T101 45T107 45T116 46T129 46Q168 47 180 50T198 63Q201 68 227 171L252 274L129 623Q128 624 127 625T125 627T122 629T118 631T113 633T105 634T96 635T83 636T66 637Z\"></path></defs><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><use xlink:href=\"#MJX-233-TEX-I-1D44C\"></use></g></g></g></svg> given <span class=\"nowrap\"><svg style=\"vertical-align: 0\" width=\"1.928ex\" height=\"1.545ex\" class=\"mathjax\" viewBox=\"0 -683 852 683\"><title>X</title><defs><path id=\"MJX-25-TEX-I-1D44B\" d=\"M42 0H40Q26 0 26 11Q26 15 29 27Q33 41 36 43T55 46Q141 49 190 98Q200 108 306 224T411 342Q302 620 297 625Q288 636 234 637H206Q200 643 200 645T202 664Q206 677 212 683H226Q260 681 347 681Q380 681 408 681T453 682T473 682Q490 682 490 671Q490 670 488 658Q484 643 481 640T465 637Q434 634 411 620L488 426L541 485Q646 598 646 610Q646 628 622 635Q617 635 609 637Q594 637 594 648Q594 650 596 664Q600 677 606 683H618Q619 683 643 683T697 681T738 680Q828 680 837 683H845Q852 676 852 672Q850 647 840 637H824Q790 636 763 628T722 611T698 593L687 584Q687 585 592 480L505 384Q505 383 536 304T601 142T638 56Q648 47 699 46Q734 46 734 37Q734 35 732 23Q728 7 725 4T711 1Q708 1 678 1T589 2Q528 2 496 2T461 1Q444 1 444 10Q444 11 446 25Q448 35 450 39T455 44T464 46T480 47T506 54Q523 62 523 64Q522 64 476 181L429 299Q241 95 236 84Q232 76 232 72Q232 53 261 47Q262 47 267 47T273 46Q276 46 277 46T280 45T283 42T284 35Q284 26 282 19Q279 6 276 4T261 1Q258 1 243 1T201 2T142 2Q64 2 42 0Z\"></path></defs><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><use xlink:href=\"#MJX-25-TEX-I-1D44B\"></use></g></g></g></svg>.</span> This is a value we should be able to estimate with an error going to zero as the number of observations goes to infinity and we get a clearer picture of the joint distribution of <svg style=\"vertical-align: 0\" width=\"1.928ex\" height=\"1.545ex\" class=\"mathjax\" viewBox=\"0 -683 852 683\"><title>X</title><defs><path id=\"MJX-25-TEX-I-1D44B\" d=\"M42 0H40Q26 0 26 11Q26 15 29 27Q33 41 36 43T55 46Q141 49 190 98Q200 108 306 224T411 342Q302 620 297 625Q288 636 234 637H206Q200 643 200 645T202 664Q206 677 212 683H226Q260 681 347 681Q380 681 408 681T453 682T473 682Q490 682 490 671Q490 670 488 658Q484 643 481 640T465 637Q434 634 411 620L488 426L541 485Q646 598 646 610Q646 628 622 635Q617 635 609 637Q594 637 594 648Q594 650 596 664Q600 677 606 683H618Q619 683 643 683T697 681T738 680Q828 680 837 683H845Q852 676 852 672Q850 647 840 637H824Q790 636 763 628T722 611T698 593L687 584Q687 585 592 480L505 384Q505 383 536 304T601 142T638 56Q648 47 699 46Q734 46 734 37Q734 35 732 23Q728 7 725 4T711 1Q708 1 678 1T589 2Q528 2 496 2T461 1Q444 1 444 10Q444 11 446 25Q448 35 450 39T455 44T464 46T480 47T506 54Q523 62 523 64Q522 64 476 181L429 299Q241 95 236 84Q232 76 232 72Q232 53 261 47Q262 47 267 47T273 46Q276 46 277 46T280 45T283 42T284 35Q284 26 282 19Q279 6 276 4T261 1Q258 1 243 1T201 2T142 2Q64 2 42 0Z\"></path></defs><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><use xlink:href=\"#MJX-25-TEX-I-1D44B\"></use></g></g></g></svg> and <span class=\"nowrap\"><svg style=\"vertical-align: 0\" width=\"1.726ex\" height=\"1.545ex\" class=\"mathjax\" viewBox=\"0 -683 763 683\"><title>Y</title><defs><path id=\"MJX-233-TEX-I-1D44C\" d=\"M66 637Q54 637 49 637T39 638T32 641T30 647T33 664T42 682Q44 683 56 683Q104 680 165 680Q288 680 306 683H316Q322 677 322 674T320 656Q316 643 310 637H298Q242 637 242 624Q242 619 292 477T343 333L346 336Q350 340 358 349T379 373T411 410T454 461Q546 568 561 587T577 618Q577 634 545 637Q528 637 528 647Q528 649 530 661Q533 676 535 679T549 683Q551 683 578 682T657 680Q684 680 713 681T746 682Q763 682 763 673Q763 669 760 657T755 643Q753 637 734 637Q662 632 617 587Q608 578 477 424L348 273L322 169Q295 62 295 57Q295 46 363 46Q379 46 384 45T390 35Q390 33 388 23Q384 6 382 4T366 1Q361 1 324 1T232 2Q170 2 138 2T102 1Q84 1 84 9Q84 14 87 24Q88 27 89 30T90 35T91 39T93 42T96 44T101 45T107 45T116 46T129 46Q168 47 180 50T198 63Q201 68 227 171L252 274L129 623Q128 624 127 625T125 627T122 629T118 631T113 633T105 634T96 635T83 636T66 637Z\"></path></defs><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><use xlink:href=\"#MJX-233-TEX-I-1D44C\"></use></g></g></g></svg>.</span></p><p><button class=\"next-step\">Continue</button></p></x-step>","goals":["next-0"],"keywords":[]},"step-bias-variance-tradeoff":{"id":"step-bias-variance-tradeoff","title":"Step Bias Variance Tradeoff","html":"<x-step id=\"step-bias-variance-tradeoff\" goals=\"blank-0 picker-2\"><p>The human brain is remarkably well-suited to learning tasks like the one in the previous exercise. It's worth reflecting on some of its insights. Which of the following was closer to your mind's implicit model for how the random variables are related?</p><x-picker class=\"rigid\" goal=\"picker\"><div class=\"item\" data-error=\"underfit\" style=\"width: 600px\"><img src=\"/content/intro-data-pipeline/images/underfit.svg\" alt=\"\"></div><div class=\"item\" data-error=\"overfit\" style=\"width: 600px\"><img src=\"/content/intro-data-pipeline/images/overfit.svg\" alt=\"\"></div><div class=\"item\" style=\"width: 600px\"><img src=\"/content/intro-data-pipeline/images/justright.svg\" alt=\"\"></div></x-picker><p>The advantage of the first model is that it's very <span class=\"nowrap\"><x-blank-mc goal=\"blank-0\"><button class=\"choice\">simple</button><button class=\"choice\">complicated</button></x-blank-mc>.</span> However, (spoiler alert!) the <svg style=\"vertical-align: -0.464ex\" width=\"1.109ex\" height=\"1.464ex\" class=\"mathjax\" viewBox=\"0 -442 490 647\"><title>y</title><defs><path id=\"MJX-29-TEX-I-1D466\" d=\"M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z\"></path></defs><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><use xlink:href=\"#MJX-29-TEX-I-1D466\"></use></g></g></g></svg> values for the data points were in fact generated as twice the square of the corresponding <svg style=\"vertical-align: -0.025ex\" width=\"1.294ex\" height=\"1.025ex\" class=\"mathjax\" viewBox=\"0 -442 572 453\"><title>x</title><defs><path id=\"MJX-28-TEX-I-1D465\" d=\"M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z\"></path></defs><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><use xlink:href=\"#MJX-28-TEX-I-1D465\"></use></g></g></g></svg> value plus an independent integer selected uniformly at random from <span class=\"nowrap\"><svg style=\"vertical-align: -0.566ex\" width=\"21.885ex\" height=\"2.262ex\" class=\"mathjax\" viewBox=\"0 -750 9673.3 1000\"><title>\\{-80,-79,\\ldots,79,80\\}</title><defs><path id=\"MJX-380-TEX-N-7B\" d=\"M434 -231Q434 -244 428 -250H410Q281 -250 230 -184Q225 -177 222 -172T217 -161T213 -148T211 -133T210 -111T209 -84T209 -47T209 0Q209 21 209 53Q208 142 204 153Q203 154 203 155Q189 191 153 211T82 231Q71 231 68 234T65 250T68 266T82 269Q116 269 152 289T203 345Q208 356 208 377T209 529V579Q209 634 215 656T244 698Q270 724 324 740Q361 748 377 749Q379 749 390 749T408 750H428Q434 744 434 732Q434 719 431 716Q429 713 415 713Q362 710 332 689T296 647Q291 634 291 499V417Q291 370 288 353T271 314Q240 271 184 255L170 250L184 245Q202 239 220 230T262 196T290 137Q291 131 291 1Q291 -134 296 -147Q306 -174 339 -192T415 -213Q429 -213 431 -216Q434 -219 434 -231Z\"></path><path id=\"MJX-380-TEX-N-2212\" d=\"M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z\"></path><path id=\"MJX-380-TEX-N-38\" d=\"M70 417T70 494T124 618T248 666Q319 666 374 624T429 515Q429 485 418 459T392 417T361 389T335 371T324 363L338 354Q352 344 366 334T382 323Q457 264 457 174Q457 95 399 37T249 -22Q159 -22 101 29T43 155Q43 263 172 335L154 348Q133 361 127 368Q70 417 70 494ZM286 386L292 390Q298 394 301 396T311 403T323 413T334 425T345 438T355 454T364 471T369 491T371 513Q371 556 342 586T275 624Q268 625 242 625Q201 625 165 599T128 534Q128 511 141 492T167 463T217 431Q224 426 228 424L286 386ZM250 21Q308 21 350 55T392 137Q392 154 387 169T375 194T353 216T330 234T301 253T274 270Q260 279 244 289T218 306L210 311Q204 311 181 294T133 239T107 157Q107 98 150 60T250 21Z\"></path><path id=\"MJX-380-TEX-N-30\" d=\"M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z\"></path><path id=\"MJX-380-TEX-N-2C\" d=\"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z\"></path><path id=\"MJX-380-TEX-N-37\" d=\"M55 458Q56 460 72 567L88 674Q88 676 108 676H128V672Q128 662 143 655T195 646T364 644H485V605L417 512Q408 500 387 472T360 435T339 403T319 367T305 330T292 284T284 230T278 162T275 80Q275 66 275 52T274 28V19Q270 2 255 -10T221 -22Q210 -22 200 -19T179 0T168 40Q168 198 265 368Q285 400 349 489L395 552H302Q128 552 119 546Q113 543 108 522T98 479L95 458V455H55V458Z\"></path><path id=\"MJX-380-TEX-N-39\" d=\"M352 287Q304 211 232 211Q154 211 104 270T44 396Q42 412 42 436V444Q42 537 111 606Q171 666 243 666Q245 666 249 666T257 665H261Q273 665 286 663T323 651T370 619T413 560Q456 472 456 334Q456 194 396 97Q361 41 312 10T208 -22Q147 -22 108 7T68 93T121 149Q143 149 158 135T173 96Q173 78 164 65T148 49T135 44L131 43Q131 41 138 37T164 27T206 22H212Q272 22 313 86Q352 142 352 280V287ZM244 248Q292 248 321 297T351 430Q351 508 343 542Q341 552 337 562T323 588T293 615T246 625Q208 625 181 598Q160 576 154 546T147 441Q147 358 152 329T172 282Q197 248 244 248Z\"></path><path id=\"MJX-380-TEX-N-2026\" d=\"M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60ZM525 60Q525 84 542 102T585 120Q609 120 627 104T646 61Q646 36 629 18T586 0T543 17T525 60ZM972 60Q972 84 989 102T1032 120Q1056 120 1074 104T1093 61Q1093 36 1076 18T1033 0T990 17T972 60Z\"></path><path id=\"MJX-380-TEX-N-7D\" d=\"M65 731Q65 745 68 747T88 750Q171 750 216 725T279 670Q288 649 289 635T291 501Q292 362 293 357Q306 312 345 291T417 269Q428 269 431 266T434 250T431 234T417 231Q380 231 345 210T298 157Q293 143 292 121T291 -28V-79Q291 -134 285 -156T256 -198Q202 -250 89 -250Q71 -250 68 -247T65 -230Q65 -224 65 -223T66 -218T69 -214T77 -213Q91 -213 108 -210T146 -200T183 -177T207 -139Q208 -134 209 3L210 139Q223 196 280 230Q315 247 330 250Q305 257 280 270Q225 304 212 352L210 362L209 498Q208 635 207 640Q195 680 154 696T77 713Q68 713 67 716T65 731Z\"></path></defs><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\"><g data-mml-node=\"math\"><g data-mml-node=\"mo\"><use xlink:href=\"#MJX-380-TEX-N-7B\"></use></g><g data-mml-node=\"mo\" transform=\"translate(500, 0)\"><use xlink:href=\"#MJX-380-TEX-N-2212\"></use></g><g data-mml-node=\"mn\" transform=\"translate(1278, 0)\"><use xlink:href=\"#MJX-380-TEX-N-38\"></use><use xlink:href=\"#MJX-380-TEX-N-30\" transform=\"translate(500, 0)\"></use></g><g data-mml-node=\"mo\" transform=\"translate(2278, 0)\"><use xlink:href=\"#MJX-380-TEX-N-2C\"></use></g><g data-mml-node=\"mo\" transform=\"translate(2722.7, 0)\"><use xlink:href=\"#MJX-380-TEX-N-2212\"></use></g><g data-mml-node=\"mn\" transform=\"translate(3500.7, 0)\"><use xlink:href=\"#MJX-380-TEX-N-37\"></use><use xlink:href=\"#MJX-380-TEX-N-39\" transform=\"translate(500, 0)\"></use></g><g data-mml-node=\"mo\" transform=\"translate(4500.7, 0)\"><use xlink:href=\"#MJX-380-TEX-N-2C\"></use></g><g data-mml-node=\"mo\" transform=\"translate(4945.3, 0)\"><use xlink:href=\"#MJX-380-TEX-N-2026\"></use></g><g data-mml-node=\"mo\" transform=\"translate(6284, 0)\"><use xlink:href=\"#MJX-380-TEX-N-2C\"></use></g><g data-mml-node=\"mn\" transform=\"translate(6728.7, 0)\"><use xlink:href=\"#MJX-380-TEX-N-37\"></use><use xlink:href=\"#MJX-380-TEX-N-39\" transform=\"translate(500, 0)\"></use></g><g data-mml-node=\"mo\" transform=\"translate(7728.7, 0)\"><use xlink:href=\"#MJX-380-TEX-N-2C\"></use></g><g data-mml-node=\"mn\" transform=\"translate(8173.3, 0)\"><use xlink:href=\"#MJX-380-TEX-N-38\"></use><use xlink:href=\"#MJX-380-TEX-N-30\" transform=\"translate(500, 0)\"></use></g><g data-mml-node=\"mo\" transform=\"translate(9173.3, 0)\"><use xlink:href=\"#MJX-380-TEX-N-7D\"></use></g></g></g></svg>.</span> The step of squaring the <svg style=\"vertical-align: -0.025ex\" width=\"1.294ex\" height=\"1.025ex\" class=\"mathjax\" viewBox=\"0 -442 572 453\"><title>x</title><defs><path id=\"MJX-28-TEX-I-1D465\" d=\"M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z\"></path></defs><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><use xlink:href=\"#MJX-28-TEX-I-1D465\"></use></g></g></g></svg> value produces some curviness which is not captured by the straight line. We say that this model is <strong>underfit</strong>: it doesn't match the data well enough because it too simple. </p></x-step>","goals":["blank-0","picker-2"],"keywords":[]},"step-overfit":{"id":"step-overfit","title":"Step Overfit","html":"<x-step id=\"step-overfit\" goals=\"blank-0 blank-1\"><p>The advantage of the second model is that it passes through <x-blank-mc goal=\"blank-0\"><button class=\"choice\">almost all</button><button class=\"choice\">all</button><button class=\"choice\">a few</button></x-blank-mc> of the training points. The disadvantage is that it is clearly taking the locations of these points <span class=\"nowrap\"><x-blank-mc goal=\"blank-1\"><button class=\"choice\">too seriously</button><button class=\"choice\">not seriously enough</button></x-blank-mc>.</span> If we got more observations, we would would not expect them to continue to fall on the curve. We say that the this model is <strong>overfit</strong>: it matches the training data well but will not generalize to new observations. </p></x-step>","goals":["blank-0","blank-1"],"keywords":[]},"step-underfit":{"id":"step-underfit","title":"Step Underfit","html":"<x-step id=\"step-underfit\" goals=\"next-0\"><p>The third model represents a compromise between underfitting and overfitting. It's curvy enough to match the training data reasonably well, but not so well that it will fail to generalize to new observations. </p><p><button class=\"next-step\">Continue</button></p></x-step>","goals":["next-0"],"keywords":[]},"step-complexity-tradeoff":{"id":"step-complexity-tradeoff","title":"Step Complexity Tradeoff","html":"<x-step id=\"step-complexity-tradeoff\" goals=\"next-0\"><p>The tension between underfitting and overfitting is called the <strong>bias-complexity tradeoff</strong>, and it lies at the heart of machine learning. </p><p><button class=\"next-step\">Continue</button></p></x-step>","goals":["next-0"],"keywords":[]},"overfitting-exercise":{"id":"overfitting-exercise","title":"Overfitting Exercise","html":"<x-step id=\"overfitting-exercise\" goals=\"blank-0 picker-0 picker-1\"><div class=\"exercise\"> <p><strong>Exercise</strong><br>The following two figures represent two machine learning models for predicting a categorical variable. There are two features, represented by horizontal and vertical position in the plane. The response variable can be either 'red x' or 'blue o'. The prediction function is specified by color: points which fall in the red region are predicted to be red, and points which fall in the blue region are predicted to be blue.</p><p>Which model correctly classifies more training points?</p><x-picker class=\"rigid\" goal=\"picker\"><div class=\"item\" style=\"width: 400px\"><img src=\"/content/intro-data-pipeline/images/nn-overfit.png\" alt=\"\"></div><div class=\"item\" data-error=\"incorrect\" style=\"width: 400px\"><img src=\"/content/intro-data-pipeline/images/nn-not-overfit.png\" alt=\"\"></div></x-picker><p>Which model is more likely to correctly classify a new observation based on its feature values?</p><x-picker class=\"rigid\" goal=\"picker\"><div class=\"item\" data-error=\"overfit\" style=\"width: 400px\"><img src=\"/content/intro-data-pipeline/images/nn-overfit.png\" alt=\"\"></div><div class=\"item\" style=\"width: 400px\"><img src=\"/content/intro-data-pipeline/images/nn-not-overfit.png\" alt=\"\"></div></x-picker><p>Even with perfect information about the distribution that the data frame rows are sampled from, is it possible to correctly classify new observations with 100% accuracy? <x-blank-mc goal=\"blank-0\"><button class=\"choice\">No</button><button class=\"choice\">Yes</button></x-blank-mc></p></div> </x-step>","goals":["blank-0","picker-0","picker-1"],"keywords":[]},"step-classification-regression":{"id":"step-classification-regression","title":"Step Classification Regression","html":"<x-step id=\"step-classification-regression\" goals=\"blank-0 blank-1\"><p>If the response variable is categorical, then the prediction problem is called a <x-blank-mc goal=\"blank-0\"><button class=\"choice\"><strong>classification</strong></button><button class=\"choice\"><strong>regression</strong></button></x-blank-mc> problem. If the response variable is quantitative, then the prediction problem is called a <x-blank-mc goal=\"blank-1\"><button class=\"choice\"><strong>regression</strong></button><button class=\"choice\"><strong>classification</strong></button></x-blank-mc> problem. </p></x-step>","goals":["blank-0","blank-1"],"keywords":[]},"Scikit-Learn":{"id":"Scikit-Learn","title":"Scikit Learn","html":"<x-step id=\"Scikit-Learn\" goals=\"blank-0\"><h2>Scikit-Learn</h2><p>The examples in the previous section hint at some of the disadvantages of the relying on the human brain to make data predictions: our ability to meaningfully visualize features maxes out pretty quickly. We can visualize only <x-blank-mc goal=\"blank-0\"><button class=\"choice\">3</button><button class=\"choice\">4</button><button class=\"choice\">5</button></x-blank-mc> features using distinct spatial dimensions, and other aesthetics like color, size, and shape can handle only a few more. Furthermore, important patterns in the data might not be visually salient in the graphical depictions we come up with.</p></x-step>","goals":["blank-0"],"keywords":[]},"machine-learning-machines":{"id":"machine-learning-machines","title":"Machine Learning Machines","html":"<x-step id=\"machine-learning-machines\" goals=\"next-0\"><p>So let's turn to doing machine learning with <em>machines</em>. Python's standard machine learning package is called Scikit-Learn. Let's see how it can be used to replicate the regression task you performed above, starting with linear regression. </p><p><button class=\"next-step\">Continue</button></p></x-step>","goals":["next-0"],"keywords":[]},"step-ml-in-sklearn":{"id":"step-ml-in-sklearn","title":"Step Ml In Sklearn","html":"<x-step id=\"step-ml-in-sklearn\" goals=\"blank-0 next-0\"><p>Machine learning models in Scikit-Learn are represented as objects whose class reflects the type of estimator. For example, a linear regression model has class <span class=\"nowrap\"><code class=\"language-python\">LinearRegression</code>.</span> Such objects can be fit to training data using the <code class=\"language-python\">fit</code> method, which takes two arguments: a two-dimensional array or data frame of features and a one-dimensional array of response values. Once the model has been fit, it can <code class=\"language-python\">predict</code> response values for a new two-dimensional array of features:</p><pre python-executable=\"python-executable\">from sklearn.linear_model import LinearRegression\nimport pandas as pd\ndf = pd.DataFrame({'x': [2, 13, 1, 9, 20, 12, 18, 9, -8],\n                  'y': [1, 325, 28, 190, 818, 291, 592, 153, 80]})\nmodel = LinearRegression()\nmodel.fit(df[['x']],df['y'])\nmodel.predict([[5]])</pre><p>This estimate ends up being significantly <x-blank-mc goal=\"blank-0\"><button class=\"choice\">higher</button><button class=\"choice\">lower</button></x-blank-mc> than the actual response value of 118 for that sample. The linear model underfits the data, and that happens to lead to an overestimate at <span class=\"nowrap\"><svg style=\"vertical-align: -0.186ex\" width=\"5.442ex\" height=\"1.692ex\" class=\"mathjax\" viewBox=\"0 -666 2405.6 748\"><title>x = 5</title><defs><path id=\"MJX-381-TEX-I-1D465\" d=\"M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z\"></path><path id=\"MJX-381-TEX-N-3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"></path><path id=\"MJX-381-TEX-N-35\" d=\"M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z\"></path></defs><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><use xlink:href=\"#MJX-381-TEX-I-1D465\"></use></g><g data-mml-node=\"mo\" transform=\"translate(849.8, 0)\"><use xlink:href=\"#MJX-381-TEX-N-3D\"></use></g><g data-mml-node=\"mn\" transform=\"translate(1905.6, 0)\"><use xlink:href=\"#MJX-381-TEX-N-35\"></use></g></g></g></svg>.</span> </p><p><button class=\"next-step\">Continue</button></p></x-step>","goals":["blank-0","next-0"],"keywords":[]},"step-quadfit":{"id":"step-quadfit","title":"Step Quadfit","html":"<x-step id=\"step-quadfit\" goals=\"next-0\"><p>Next let's use <code class=\"language-python\">sklearn</code> to fit the same data with a quadratic polynomial. There is no class for polynomial fitting, because polynomial regression is actually a special case of linear regression: we create new features by computing pairwise products of the original features and then fit a linear model using the new data frame. The coefficients for that model provide the quadratic coefficients of best fit for the original features. </p><p><button class=\"next-step\">Continue</button></p></x-step>","goals":["next-0"],"keywords":[]},"step-PolynomialFeatures":{"id":"step-PolynomialFeatures","title":"Step PolynomialFeatures","html":"<x-step id=\"step-PolynomialFeatures\" goals=\"blank-0 next-0\"><p>In Scikit-Learn, creating new columns for the pairwise products of original columns is achieved using a class called <span class=\"nowrap\"><code class=\"language-python\">PolynomialFeatures</code>.</span> To actually apply the transformation, we use the <code class=\"language-python\">fit_transform</code> method: </p><pre python-executable=\"python-executable\">from sklearn.preprocessing import PolynomialFeatures\npoly = PolynomialFeatures(degree=2)\nextended_features = poly.fit_transform(df[['x']])\nextended_features</pre><p>Now we can use this new array to fit a linear model.</p><pre python-executable=\"python-executable\"> \nmodel = LinearRegression()\nmodel.fit(extended_features,df['y'])\nmodel.predict([[5]])</pre><p>Oops! That didn't work because we need to process the input in the same way we processed the training data before fitting the model. </p><pre python-executable=\"python-executable\">model.predict([[1,5,25]])</pre><p>This model returns a value which is quite close to the conditional expectation of <svg style=\"vertical-align: 0\" width=\"1.726ex\" height=\"1.545ex\" class=\"mathjax\" viewBox=\"0 -683 763 683\"><title>Y</title><defs><path id=\"MJX-233-TEX-I-1D44C\" d=\"M66 637Q54 637 49 637T39 638T32 641T30 647T33 664T42 682Q44 683 56 683Q104 680 165 680Q288 680 306 683H316Q322 677 322 674T320 656Q316 643 310 637H298Q242 637 242 624Q242 619 292 477T343 333L346 336Q350 340 358 349T379 373T411 410T454 461Q546 568 561 587T577 618Q577 634 545 637Q528 637 528 647Q528 649 530 661Q533 676 535 679T549 683Q551 683 578 682T657 680Q684 680 713 681T746 682Q763 682 763 673Q763 669 760 657T755 643Q753 637 734 637Q662 632 617 587Q608 578 477 424L348 273L322 169Q295 62 295 57Q295 46 363 46Q379 46 384 45T390 35Q390 33 388 23Q384 6 382 4T366 1Q361 1 324 1T232 2Q170 2 138 2T102 1Q84 1 84 9Q84 14 87 24Q88 27 89 30T90 35T91 39T93 42T96 44T101 45T107 45T116 46T129 46Q168 47 180 50T198 63Q201 68 227 171L252 274L129 623Q128 624 127 625T125 627T122 629T118 631T113 633T105 634T96 635T83 636T66 637Z\"></path></defs><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><use xlink:href=\"#MJX-233-TEX-I-1D44C\"></use></g></g></g></svg> given <span class=\"nowrap\"><svg style=\"vertical-align: -0.186ex\" width=\"6.076ex\" height=\"1.731ex\" class=\"mathjax\" viewBox=\"0 -683 2685.6 765\"><title>X=5</title><defs><path id=\"MJX-382-TEX-I-1D44B\" d=\"M42 0H40Q26 0 26 11Q26 15 29 27Q33 41 36 43T55 46Q141 49 190 98Q200 108 306 224T411 342Q302 620 297 625Q288 636 234 637H206Q200 643 200 645T202 664Q206 677 212 683H226Q260 681 347 681Q380 681 408 681T453 682T473 682Q490 682 490 671Q490 670 488 658Q484 643 481 640T465 637Q434 634 411 620L488 426L541 485Q646 598 646 610Q646 628 622 635Q617 635 609 637Q594 637 594 648Q594 650 596 664Q600 677 606 683H618Q619 683 643 683T697 681T738 680Q828 680 837 683H845Q852 676 852 672Q850 647 840 637H824Q790 636 763 628T722 611T698 593L687 584Q687 585 592 480L505 384Q505 383 536 304T601 142T638 56Q648 47 699 46Q734 46 734 37Q734 35 732 23Q728 7 725 4T711 1Q708 1 678 1T589 2Q528 2 496 2T461 1Q444 1 444 10Q444 11 446 25Q448 35 450 39T455 44T464 46T480 47T506 54Q523 62 523 64Q522 64 476 181L429 299Q241 95 236 84Q232 76 232 72Q232 53 261 47Q262 47 267 47T273 46Q276 46 277 46T280 45T283 42T284 35Q284 26 282 19Q279 6 276 4T261 1Q258 1 243 1T201 2T142 2Q64 2 42 0Z\"></path><path id=\"MJX-382-TEX-N-3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"></path><path id=\"MJX-382-TEX-N-35\" d=\"M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z\"></path></defs><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><use xlink:href=\"#MJX-382-TEX-I-1D44B\"></use></g><g data-mml-node=\"mo\" transform=\"translate(1129.8, 0)\"><use xlink:href=\"#MJX-382-TEX-N-3D\"></use></g><g data-mml-node=\"mn\" transform=\"translate(2185.6, 0)\"><use xlink:href=\"#MJX-382-TEX-N-35\"></use></g></g></g></svg>,</span> which is <x-blank solution=\"50\" goal=\"blank-0\"></x-blank> (Hint: look back to where you got a peek behind the curtain to see how the <svg style=\"vertical-align: -0.464ex\" width=\"1.109ex\" height=\"1.464ex\" class=\"mathjax\" viewBox=\"0 -442 490 647\"><title>y</title><defs><path id=\"MJX-29-TEX-I-1D466\" d=\"M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z\"></path></defs><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><use xlink:href=\"#MJX-29-TEX-I-1D466\"></use></g></g></g></svg> values were generated).</p><p><button class=\"next-step\">Continue</button></p></x-step>","goals":["blank-0","next-0"],"keywords":[]},"step-sklearn-pipelines":{"id":"step-sklearn-pipelines","title":"Step Sklearn Pipelines","html":"<x-step id=\"step-sklearn-pipelines\" goals=\"blank-0\"><p>Sklearn has a solution to the problem of having to apply the same preprocessing steps multiple times (once for training data and again at prediction time). The idea is to bind the preprocessing steps and the machine learning model into a single object. This object is called a <strong>pipeline</strong>. Let's do the same calculation again:</p><pre python-executable=\"python-executable\">from sklearn.pipeline import Pipeline\nmodel = Pipeline([('poly', PolynomialFeatures(degree=2)),\n                  ('linear', LinearRegression(fit_intercept=False))])\nmodel.fit(df[['x']],df['y'])\nmodel.predict([[5]])</pre><p>Much simpler! Note that we turned the <x-blank-mc goal=\"blank-0\"><button class=\"choice\">intercept</button><button class=\"choice\">slope</button></x-blank-mc> off for the <code class=\"language-python\">LinearRegression</code> model because the first step in the pipeline outputs a constant column (which plays the role of an intercept).</p></x-step>","goals":["blank-0"],"keywords":[]},"step-real-example":{"id":"step-real-example","title":"Step Real Example","html":"<x-step id=\"step-real-example\" goals=\"next-0\"><p>Having used toy data to go through some of the basics of <span class=\"nowrap\"><code class=\"language-python\">sklearn</code>,</span> let's fit some models on a real data set on <span class=\"nowrap\"><x-gloss xid=\"geron\">home prices in Boston</x-gloss>.</span> </p><p>Let's begin by looking at the dataset's documentation.</p><pre python-executable=\"python-executable\"> \nimport pydataset\nboston = pydataset.data('Boston')\npydataset.data('Boston',show_doc=True)</pre><p><button class=\"next-step\">Continue</button></p></x-step>","goals":["next-0"],"keywords":[]},"step-train-test-split":{"id":"step-train-test-split","title":"Step Train Test Split","html":"<x-step id=\"step-train-test-split\" goals=\"next-0\"><p>Our goal will be to predict median housing prices (the column <code class=\"language-python\">'medv'</code>) based on the other columns in the data frame. However, we already have all of these values! If we want to be able to assess how well we are predicting median housing prices, we need to set some of the data aside for testing. It's important that we do this from the outset, because any work we do with the test data has the potential to influence our model in the direction of working better on the data we have than on actual fresh data. The arguments <code class=\"language-python\">test_size</code> and <code class=\"language-python\">random_state</code> specify the proportion of data set aside for testing (20%) and a seed for the random number generator to ensure we reproduce the same split if we run the code again.</p><pre python-executable=\"python-executable\"> \nfrom sklearn.model_selection import train_test_split\nX_train, X_test, Y_train, Y_test = train_test_split(boston.drop('medv',axis=1),\n                                                boston['medv'], \n                                                test_size = 0.2,\n                                                random_state = 42)\nlinear = LinearRegression()\nlinear.fit(X_train, Y_train)</pre><p><button class=\"next-step\">Continue</button></p></x-step>","goals":["next-0"],"keywords":[]},"step-testing-data-caution":{"id":"step-testing-data-caution","title":"Step Testing Data Caution","html":"<x-step id=\"step-testing-data-caution\" goals=\"next-0\"><p>At this point we'd like to test our dflinear on the testing data we set aside. However, we should be very careful about doing that, because if we repeat that process on many models and select the best, then the testing data have effectively crept into the training loop, and we are no longer confident about how the model will perform on fresh data. </p><p><button class=\"next-step\">Continue</button></p></x-step>","goals":["next-0"],"keywords":[]},"step-cross-validation":{"id":"step-cross-validation","title":"Step Cross Validation","html":"<x-step id=\"step-cross-validation\" goals=\"next-0\"><p>Instead what we'll do is carve out preliminary testing data from our training data. Then we'll follow the same fitting procedure to train a model on remaining training data. We can do this repeatedly to get a better sense for how our model tends to perform when it sees new data. This process is called <strong>cross-validation</strong>, and Scikit-Learn has built-in methods for it. We'll use a version called <svg style=\"vertical-align: -0.025ex\" width=\"1.179ex\" height=\"1.595ex\" class=\"mathjax\" viewBox=\"0 -694 521 705\"><title>k</title><defs><path id=\"MJX-133-TEX-I-1D458\" d=\"M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z\"></path></defs><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><use xlink:href=\"#MJX-133-TEX-I-1D458\"></use></g></g></g></svg>-fold cross-validation which partitions the training data into <svg style=\"vertical-align: -0.025ex\" width=\"1.179ex\" height=\"1.595ex\" class=\"mathjax\" viewBox=\"0 -694 521 705\"><title>k</title><defs><path id=\"MJX-133-TEX-I-1D458\" d=\"M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z\"></path></defs><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><use xlink:href=\"#MJX-133-TEX-I-1D458\"></use></g></g></g></svg> subsets called <em>folds</em> and trains the model with <svg style=\"vertical-align: -0.186ex\" width=\"5.076ex\" height=\"1.756ex\" class=\"mathjax\" viewBox=\"0 -694 2243.4 776\"><title>k-1</title><defs><path id=\"MJX-383-TEX-I-1D458\" d=\"M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z\"></path><path id=\"MJX-383-TEX-N-2212\" d=\"M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z\"></path><path id=\"MJX-383-TEX-N-31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path></defs><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><use xlink:href=\"#MJX-383-TEX-I-1D458\"></use></g><g data-mml-node=\"mo\" transform=\"translate(743.2, 0)\"><use xlink:href=\"#MJX-383-TEX-N-2212\"></use></g><g data-mml-node=\"mn\" transform=\"translate(1743.4, 0)\"><use xlink:href=\"#MJX-383-TEX-N-31\"></use></g></g></g></svg> of the folds as training data and the last fold as test data. Each fold takes one turn as the test data, so you get <svg style=\"vertical-align: -0.025ex\" width=\"1.179ex\" height=\"1.595ex\" class=\"mathjax\" viewBox=\"0 -694 521 705\"><title>k</title><defs><path id=\"MJX-133-TEX-I-1D458\" d=\"M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z\"></path></defs><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><use xlink:href=\"#MJX-133-TEX-I-1D458\"></use></g></g></g></svg> fits in total.</p><p><button class=\"next-step\">Continue</button></p></x-step>","goals":["next-0"],"keywords":[]},"step-cross-val-score":{"id":"step-cross-val-score","title":"Step Cross Val Score","html":"<x-step id=\"step-cross-val-score\" goals=\"blank-0 blank-1 next-0\"><p>We supply the model and the training data to the function <span class=\"nowrap\"><code class=\"language-python\">cross_val_score</code>.</span> We use <em>negative mean squared error</em> for assessing how well the model fits the test data. The <em>mean squared error</em> refers to the average squared difference between predictions and actual response values, and this value is negated since Scikit-Learn's cross-validation is designed for the convention that a higher score is better (whereas un-negated squared error has the property that <x-blank-mc goal=\"blank-0\"><button class=\"choice\">lower</button><button class=\"choice\">higher</button></x-blank-mc> is better). The <code class=\"language-python\">cv</code> argument specifies the number of folds.</p><pre python-executable=\"python-executable\"> \nimport numpy as np\nfrom sklearn.model_selection import cross_val_score\nscores = cross_val_score(linear, X_train, Y_train,\n                         scoring=\"neg_mean_squared_error\", cv=10)\nlinreg_cv_scores = np.sqrt(-scores)\nlinreg_cv_scores</pre><p>The average value of the variable we're trying to predict is around <span class=\"nowrap\"><x-blank solution=\"23±5\" goal=\"blank-1\"></x-blank>,</span> so the model's accuracy is not particularly impressive.</p><p><button class=\"next-step\">Continue</button></p></x-step>","goals":["blank-0","blank-1","next-0"],"keywords":[]},"step-try-decision-trees":{"id":"step-try-decision-trees","title":"Step Try Decision Trees","html":"<x-step id=\"step-try-decision-trees\" goals=\"next-0\"><p>We can swap out the linear model for other <code class=\"language-python\">sklearn</code> models to see how they compare. For example, let's try <em>decision tree regression</em>, which can account for complex relationships between features by applying branching sequences of rules. </p><pre python-executable=\"python-executable\"> \nfrom sklearn.tree import DecisionTreeRegressor\ndecisiontree = DecisionTreeRegressor()\nscores = cross_val_score(decisiontree, X_train, Y_train,\n                         scoring=\"neg_mean_squared_error\", cv=10)\ntree_cv_scores = np.sqrt(-scores)\ntree_cv_scores</pre><pre python-executable=\"python-executable\"> \nimport plotly.express as px\nfrom datagymnasia import show\nresults = pd.DataFrame(\n  {'scores': np.hstack((linreg_cv_scores,\n                       tree_cv_scores)),\n   'model': np.hstack((np.full(10,'linear'),\n                       np.full(10,'tree')))}\n)\n \nshow(px.histogram(results, x = 'scores', color = 'model', barmode = 'group'))</pre><p><button class=\"next-step\">Continue</button></p></x-step>","goals":["next-0"],"keywords":[]},"step-try-random-forest":{"id":"step-try-random-forest","title":"Step Try Random Forest","html":"<x-step id=\"step-try-random-forest\" goals=\"next-0\"><p>Let's try one more model: the <em>random forest</em>. As the name suggests, random forests are made up of many decision trees. </p><pre python-executable=\"python-executable\">from sklearn.ensemble import RandomForestRegressor\nrandomforest = RandomForestRegressor()\nscores = cross_val_score(randomforest, X_train, Y_train,\n                         scoring=\"neg_mean_squared_error\", cv=10)\nforest_cv_scores = np.sqrt(-scores)\nforest_cv_scores</pre><p><button class=\"next-step\">Continue</button></p></x-step>","goals":["next-0"],"keywords":[]},"step-model-comparison":{"id":"step-model-comparison","title":"Step Model Comparison","html":"<x-step id=\"step-model-comparison\" goals=\"blank-0 blank-1 quill\"><p>Now let's compare all three models:</p><pre python-executable=\"python-executable\">results = pd.DataFrame(\n    {'scores': np.hstack((linreg_cv_scores,\n                          tree_cv_scores,\n                          forest_cv_scores)),\n     'model': np.hstack((np.full(10,'linear'),\n              np.full(10,'tree'),\n              np.full(10,'forest')))}\n)\nshow(px.histogram(results, x = 'scores', color = 'model', barmode = 'group'))</pre><p>According to this bar chart, the best model among these three is the <span class=\"nowrap\"><x-blank-mc goal=\"blank-0\"><button class=\"choice\">random forest</button><button class=\"choice\">linear model</button><button class=\"choice\">decision tree</button></x-blank-mc>,</span> while the second best is the <span class=\"nowrap\"><x-blank-mc goal=\"blank-1\"><button class=\"choice\">linear model</button><button class=\"choice\">decision tree</button><button class=\"choice\">random forest</button></x-blank-mc>.</span> Let's check whether that holds up when we finally use the test set:</p><pre python-executable=\"python-executable\"> \nlinear.fit(X_train, Y_train)\nprint(np.mean((linear.predict(X_test) - Y_test)**2))\ndecisiontree.fit(X_train, Y_train)\nprint(np.mean((decisiontree.predict(X_test) - Y_test)**2))\nrandomforest.fit(X_train, Y_train)\nprint(np.mean((randomforest.predict(X_test) - Y_test)**2))</pre><p>Are these results expected? Discuss.</p><x-quill goal=\"quill\"></x-quill></x-step>","goals":["blank-0","blank-1","quill"],"keywords":[]},"hyperparameter-tuning":{"id":"hyperparameter-tuning","title":"Hyperparameter Tuning","html":"<x-step id=\"hyperparameter-tuning\" goals=\"next-0\"><h2>Hyperparameter tuning</h2><p>A <em>hyperparameter</em> is a value which impacts the behavior of a model but which is held fixed during the fitting process. For example, if you fit a polynomial of degree <svg style=\"vertical-align: -0.025ex\" width=\"1.357ex\" height=\"1.025ex\" class=\"mathjax\" viewBox=\"0 -442 600 453\"><title>n</title><defs><path id=\"MJX-33-TEX-I-1D45B\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"></path></defs><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><use xlink:href=\"#MJX-33-TEX-I-1D45B\"></use></g></g></g></svg> to a set of data, then the coefficients of the polynomial are parameters and <svg style=\"vertical-align: -0.025ex\" width=\"1.357ex\" height=\"1.025ex\" class=\"mathjax\" viewBox=\"0 -442 600 453\"><title>n</title><defs><path id=\"MJX-33-TEX-I-1D45B\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"></path></defs><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><use xlink:href=\"#MJX-33-TEX-I-1D45B\"></use></g></g></g></svg> is a hyperparameter. </p><p>It's ultimately up to the data scientist to make good choices for hyperparameter values. However, you can automate this process by getting Scikit-Learn to search through a collection of values and return the best ones (selected according to cross-validation results). </p><p><button class=\"next-step\">Continue</button></p></x-step>","goals":["next-0"],"keywords":[]},"step-hyperparameter-search":{"id":"step-hyperparameter-search","title":"Step Hyperparameter Search","html":"<x-step id=\"step-hyperparameter-search\" goals=\"next-0\"><p>The hyperparameters for a random forest include <code class=\"language-python\">n_estimators</code> (the number of trees in the forest) and <code class=\"language-python\">max_features</code> (the number of features that each branch in each decision tree is allowed to consider). <code class=\"language-python\">GridSearchCV</code> is a Scikit-Learn class for performing hyperparameter searches. It does cross-validation for every combination of the supplied parameters (hence <em>grid</em> in the name).</p><pre python-executable=\"python-executable\"> \nfrom sklearn.model_selection import GridSearchCV\nparam_grid = [\n    {'n_estimators': [3, 10, 30], 'max_features': [2, 4, 6, 8]},\n]\ngrid_search = GridSearchCV(randomforest, param_grid, cv=5,\n                           scoring='neg_mean_squared_error')\n \ngrid_search.fit(X_train, Y_train)\ngrid_search.best_params_</pre><p><button class=\"next-step\">Continue</button></p></x-step>","goals":["next-0"],"keywords":[]},"step-moving-on":{"id":"step-moving-on","title":"Step Moving On","html":"<x-step id=\"step-moving-on\" goals=\"\"><p>Although there's a lot more to know about data preparation and modeling, we've seen some of the basic elements in action: do any necessary preprocessing, prepare the data for modeling using a train-test split, fit a model to the data, assess models using cross-validation, and choose model hyperparameters using a grid search. </p><p>As you gain experience, the wrangling, visualization, and modeling phases will intertwine: you wrangle to get a better visualization and to prepare data for the model, you gain modeling insights from visualization, and your preliminary modeling results suggest visualizations to investigate. The process of navigating fluidly between wrangling, visualization, and modeling is called <strong>exploratory data analysis</strong>. </p></x-step>","goals":[],"keywords":[]},"communicate":{"id":"communicate","title":"Communicate","html":"<x-step id=\"communicate\" goals=\"next-0\"><p>Once you've decided on a model, the next step is to use it to actually solve your problem. For example, perhaps the housing pricing prediction is part of a real estate app. In that case, you would need to incorporate your model into the app. Typically you would have an app development team with whom to discuss the best way to do that, since the details would often depend on various technical aspects of how the app works. </p><p><button class=\"next-step\">Continue</button></p></x-step>","goals":["next-0"],"keywords":[]},"step-informing-business-decisions":{"id":"step-informing-business-decisions","title":"Step Informing Business Decisions","html":"<x-step id=\"step-informing-business-decisions\" goals=\"next-0\"><p>Another common machine learning use case is informing business decisions. Typically, the people ultimately responsible for those decisions will want as robust an understanding as possible of the relevant details about how the model works and how reliable its predictions are. The data scientist is responsible for describing their process clearly and being forthright about any causes for concern. It might also be important at this stage to be able to think of machine learning models in more specific terms than \"something that can be trained in Scikit-Learn\". </p><p>You might be asked to give a report or a presentation or both, and your ability to have an impact in your organization might depend on your ability to inspire confidence through these media. It's a good idea to begin practicing supporting your quantitative work with clear explanations, well before the stakes are high. </p><p><button class=\"next-step\">Continue</button></p></x-step>","goals":["next-0"],"keywords":[]},"step-data-science-report-advice":{"id":"step-data-science-report-advice","title":"Step Data Science Report Advice","html":"<x-step id=\"step-data-science-report-advice\" goals=\"next-0\"><p>Here are a few tips for writing about your data analysis:</p><ol> <li><strong>Know your audience.</strong> Learning to anticipate what will be understandable and meaningful to your readers is one of the most important skills for any sort of writing. It takes practice, and it requires targeting a specific audience throughout the writing process. If in doubt, provide an explanation rather than assuming your reader will be familiar with a necessary idea.</li></ol> <p><button class=\"next-step\">Continue</button></p></x-step>","goals":["next-0"],"keywords":[]},"step-narrative-cohesion":{"id":"step-narrative-cohesion","title":"Step Narrative Cohesion","html":"<x-step id=\"step-narrative-cohesion\" goals=\"next-0\"><ol start=\"2\"> <li><strong>Prioritize narrative cohesion</strong>. You don't want a report to read like a laundry list of things you did. The reader should be able to easily identify the motivating question, follow idea threads from section to section, appreciate any surprises, and spend attention on various components in proportion to their actual importance.</li></ol> <p><button class=\"next-step\">Continue</button></p></x-step>","goals":["next-0"],"keywords":[]},"step-dont-waste-space":{"id":"step-dont-waste-space","title":"Step Dont Waste Space","html":"<x-step id=\"step-dont-waste-space\" goals=\"next-0\"><ol start=\"3\"> <li><strong>Don't waste space</strong>. Leave out stuff if it really doesn't matter. No one can appreciate dozens of lines of data frame printouts, so they should not appear in a report. If it's important to show what a data frame looks like, you might print its head. The same goes for figures: it takes time for the reader to absorb the lessons of a graphic, so you want to write explicit captions to facilitate that process. It's also important to be mindful of reader fatigue. If you have 20 plots related to the same idea, you probably need to identify a handful of especially useful ones and do without the rest.</li></ol> <p><button class=\"next-step\">Continue</button></p></x-step>","goals":["next-0"],"keywords":[]},"step-check-for-typos":{"id":"step-check-for-typos","title":"Step Check For Typos","html":"<x-step id=\"step-check-for-typos\" goals=\"next-0\"><ol start=\"4\"> <li><strong>Check for typos</strong>. Readers will, subconsciously or otherwise, take your work less seriously if it is riddled with errors. Use a service like Grammarly or a colleague who will proofread your work to help make sure it is grammatically and typographically accurate.</li></ol> <p><button class=\"next-step\">Continue</button></p></x-step>","goals":["next-0"],"keywords":[]},"communication-exercise":{"id":"communication-exercise","title":"Communication Exercise","html":"<x-step id=\"communication-exercise\" goals=\"quill\"><div class=\"exercise\"> <p><strong>Exercise</strong><br>Read <a href=\"https://data-gymnasia.github.io/report-examples/bad-example.html\" target=\"_blank\">this report</a> and <a href=\"http://cs229.stanford.edu/proj2014/Adam%20Abdulhamid,%20Ivaylo%20Bahtchevanov,%20Peng%20Jia,Life%20Expectancy%20Post%20Thoracic%20Surgery.pdf\" target=\"_blank\">this report</a>. Make five positive or negative observations about each report. It's OK if your observations are mostly negative about one and mostly positive about the other.</p></div> <x-quill goal=\"quill\"></x-quill></x-step>","goals":["quill"],"keywords":[]},"step-bon-voyage":{"id":"step-bon-voyage","title":"Step Bon Voyage","html":"<x-step id=\"step-bon-voyage\" goals=\"\"><h2>Bon voyage</h2><p>This course has been a very brief introduction to the data science pipeline. If you try to tackle a real data science problem, you will find that there are many important skills that we did not develop (for example, handling missing data or making categorical variables quantitative for purposes of training a model). However, getting a survey of the full pipeline will serve as a useful frame of reference as you learn more data science from more in-depth sources. My top recommendations are <em>Hands-on Machine Learning with Scikit-Learn and TensorFlow</em> by Aurélien Geron for Python, and the free online book <a href=\"http://rafalab.github.io/dsbook\" target=\"_blank\"><em>Introduction to Data Science</em></a> by Rafael Irizarry for R.</p></x-step>","goals":[],"keywords":[]}},"availableLocales":["en"],"biosJSON":"{}","glossJSON":"{\"churn\":{\"title\":\"Churn\",\"text\":\"<p>Customer churn refers to the cessation of a customer's relationship with a company</p>\"},\"R\":{\"title\":\"R\",\"text\":\"<p>R is a popular open source programming language for data science. Python and R are by far the most prominent two programming languages used in data science in industry and academia. R is heavily geared toward statistical applications and is very popular among research statisticians. Python is becoming increasingly popular in industry, where it benefits from its closer ties to the software development world.</p>\"},\"rpy2\":{\"title\":\"rpy2\",\"text\":\"<p>rpy2 is the standard Python package for interfacing with R. For example, the block</p><pre class=\\\"language-python\\\"><code>from rpy2.robjects import r, pandas2ri\\nfrom rpy2.robjects.packages import importr\\nimportr('nycflights13')\\npandas2ri.ri2py(r['flights'])</code></pre><p>loads the R package <span class=\\\"nowrap\\\"><code class=\\\"language-r\\\">nycflights13</code>,</span> accesses the <code class=\\\"language-r\\\">flights</code> variable from the R environment, and converts it to a Pandas data frame.</p>\"},\"iris\":{\"title\":\"Iris dataset\",\"text\":\"<p>The Iris dataset records 4 measurements (sepal length, sepal width, petal length, and petal width) for 50 flowers from each of three different species. The data set has become a staple of introductory data analysis materials.</p>\"},\"dataframe-head\":{\"title\":\"Head\",\"text\":\"<p>The <strong>head</strong> of a dataframe is the first several rows. Pandas data frame objects have a <code class=\\\"language-python\\\">head</code> method which returns the head. This method is useful when you want to have a look at the data frame but don't want to fill the screen with its many rows.</p>\"},\"array\":{\"title\":\"Array\",\"text\":\"<p>An array is a grid of values, indexed by a tuple of integers. The length of the indexing tuple is called the <strong>dimension</strong> of the array.</p><p>A one-dimensional array is a vector, a two-dimensional aray is a matrix, and so on.</p>\"},\"hadley\":{\"title\":\"Hadley Wickham\",\"text\":\"<p>Hadley Wickham is the Chief Scientist at RStudio. He created an influential visualization library in R based on the <em>grammar of graphics</em> idea, which emphasizes a core set of building blocks and principled ways to combine them into more complex graphics. He also created several other packages applying similar ideas to data manipulation. This suite of packages, called the <em>tidyverse</em>, has become the de facto standard for data visualization and manipulation in R.</p>\"},\"python-sets\":{\"title\":\"Sets\",\"text\":\"<p>In Python, a <code class=\\\"language-python\\\">set</code> is a data structure with efficient support for insertion, deletion, and membership checking. As in math, elements of a sets are unordered and repetitions are ignored. The basic set operations for two sets <code class=\\\"language-python\\\">s</code> and <code class=\\\"language-python\\\">t</code> are <code class=\\\"language-python\\\">s &amp; t</code> for intersection, <code class=\\\"language-python\\\">s | t</code> for union, <code class=\\\"language-python\\\">s - t</code> for set difference (elements in the first set but not the second), and <code class=\\\"language-python\\\">s ^ t</code> for symmetric difference (elements in exactly one of the two sets).</p>\"},\"allocation\":{\"title\":\"Allocation\",\"text\":\"<p>To store an array or other data structure, the computer must <strong>allocate</strong> memory for it and insert the appropriate data. For example, when you execute <code class=\\\"language-python\\\">pos_inds = (a &gt; 0)</code> where <code class=\\\"language-python\\\">a</code> is a NumPy array of length 1,000,000, one million new memory addresses are dedicated to storing the entries of <span class=\\\"nowrap\\\"><code class=\\\"language-python\\\">pos_inds</code>,</span> and those bytes are filled with <code class=\\\"language-python\\\">True</code>s and <code class=\\\"language-python\\\">False</code>s. Depending on what you want to do with <span class=\\\"nowrap\\\"><code class=\\\"language-python\\\">pos_inds</code>,</span> this operation might be wasteful.</p>\"},\"splat\":{\"title\":\"Splatting\",\"text\":\"<p>In Python, you can supply the contents of a list as arguments to a function by putting an asterisk in front of the list name when calling the function. For example <code class=\\\"language-python\\\">f(*[1,2,3])</code> is the same as <span class=\\\"nowrap\\\"><code class=\\\"language-python\\\">f(1,2,3)</code>.</span> Likewise, you can supply the contents of a dictionary as keyword arguments. For example, <code class=\\\"language-python\\\">f(**{'a': 1, 'b': 2})</code> is the same as <span class=\\\"nowrap\\\"><code class=\\\"language-python\\\">f(a=1,b=2)</code>.</span> This is useful when want to manage arguments programatically rather than having to type them in when you call the function.</p>\"},\"mpl3d\":{\"title\":\"3D in Matplotlib\",\"text\":\"<p>Matplotlib does not support true 3D graphics. You can make 3D figures, but for every pair of objects in the scene, one will be rendered entirely in front of the other. This leads to inaccuracies if the scene is relatively complex. See the Matplotlib <a href=\\\"https://matplotlib.org/mpl_toolkits/mplot3d/faq.html\\\" target=\\\"_blank\\\">FAQ page</a> for more details.</p>\"},\"IQR\":{\"title\":\"Inter-quartile range\",\"text\":\"<p>The inter-quartile range of a list of real numbers is the difference between the third and first quartiles.</p>\"},\"conditional-variance\":{\"title\":\"Conditional variance\",\"text\":\"<p>The <strong>conditional variance</strong> of <svg style=\\\"vertical-align: 0\\\" width=\\\"1.726ex\\\" height=\\\"1.545ex\\\" class=\\\"mathjax\\\" viewBox=\\\"0 -683 763 683\\\"><title>Y</title><defs><path id=\\\"MJX-233-TEX-I-1D44C\\\" d=\\\"M66 637Q54 637 49 637T39 638T32 641T30 647T33 664T42 682Q44 683 56 683Q104 680 165 680Q288 680 306 683H316Q322 677 322 674T320 656Q316 643 310 637H298Q242 637 242 624Q242 619 292 477T343 333L346 336Q350 340 358 349T379 373T411 410T454 461Q546 568 561 587T577 618Q577 634 545 637Q528 637 528 647Q528 649 530 661Q533 676 535 679T549 683Q551 683 578 682T657 680Q684 680 713 681T746 682Q763 682 763 673Q763 669 760 657T755 643Q753 637 734 637Q662 632 617 587Q608 578 477 424L348 273L322 169Q295 62 295 57Q295 46 363 46Q379 46 384 45T390 35Q390 33 388 23Q384 6 382 4T366 1Q361 1 324 1T232 2Q170 2 138 2T102 1Q84 1 84 9Q84 14 87 24Q88 27 89 30T90 35T91 39T93 42T96 44T101 45T107 45T116 46T129 46Q168 47 180 50T198 63Q201 68 227 171L252 274L129 623Q128 624 127 625T125 627T122 629T118 631T113 633T105 634T96 635T83 636T66 637Z\\\"></path></defs><g stroke=\\\"currentColor\\\" fill=\\\"currentColor\\\" stroke-width=\\\"0\\\" transform=\\\"matrix(1 0 0 -1 0 0)\\\"><g data-mml-node=\\\"math\\\"><g data-mml-node=\\\"mi\\\"><use xlink:href=\\\"#MJX-233-TEX-I-1D44C\\\"></use></g></g></g></svg> given <svg style=\\\"vertical-align: -0.566ex\\\" width=\\\"8.501ex\\\" height=\\\"2.262ex\\\" class=\\\"mathjax\\\" viewBox=\\\"0 -750 3757.6 1000\\\"><title>\\\\{X = x\\\\}</title><defs><path id=\\\"MJX-269-TEX-N-7B\\\" d=\\\"M434 -231Q434 -244 428 -250H410Q281 -250 230 -184Q225 -177 222 -172T217 -161T213 -148T211 -133T210 -111T209 -84T209 -47T209 0Q209 21 209 53Q208 142 204 153Q203 154 203 155Q189 191 153 211T82 231Q71 231 68 234T65 250T68 266T82 269Q116 269 152 289T203 345Q208 356 208 377T209 529V579Q209 634 215 656T244 698Q270 724 324 740Q361 748 377 749Q379 749 390 749T408 750H428Q434 744 434 732Q434 719 431 716Q429 713 415 713Q362 710 332 689T296 647Q291 634 291 499V417Q291 370 288 353T271 314Q240 271 184 255L170 250L184 245Q202 239 220 230T262 196T290 137Q291 131 291 1Q291 -134 296 -147Q306 -174 339 -192T415 -213Q429 -213 431 -216Q434 -219 434 -231Z\\\"></path><path id=\\\"MJX-269-TEX-I-1D44B\\\" d=\\\"M42 0H40Q26 0 26 11Q26 15 29 27Q33 41 36 43T55 46Q141 49 190 98Q200 108 306 224T411 342Q302 620 297 625Q288 636 234 637H206Q200 643 200 645T202 664Q206 677 212 683H226Q260 681 347 681Q380 681 408 681T453 682T473 682Q490 682 490 671Q490 670 488 658Q484 643 481 640T465 637Q434 634 411 620L488 426L541 485Q646 598 646 610Q646 628 622 635Q617 635 609 637Q594 637 594 648Q594 650 596 664Q600 677 606 683H618Q619 683 643 683T697 681T738 680Q828 680 837 683H845Q852 676 852 672Q850 647 840 637H824Q790 636 763 628T722 611T698 593L687 584Q687 585 592 480L505 384Q505 383 536 304T601 142T638 56Q648 47 699 46Q734 46 734 37Q734 35 732 23Q728 7 725 4T711 1Q708 1 678 1T589 2Q528 2 496 2T461 1Q444 1 444 10Q444 11 446 25Q448 35 450 39T455 44T464 46T480 47T506 54Q523 62 523 64Q522 64 476 181L429 299Q241 95 236 84Q232 76 232 72Q232 53 261 47Q262 47 267 47T273 46Q276 46 277 46T280 45T283 42T284 35Q284 26 282 19Q279 6 276 4T261 1Q258 1 243 1T201 2T142 2Q64 2 42 0Z\\\"></path><path id=\\\"MJX-269-TEX-N-3D\\\" d=\\\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\\\"></path><path id=\\\"MJX-269-TEX-I-1D465\\\" d=\\\"M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z\\\"></path><path id=\\\"MJX-269-TEX-N-7D\\\" d=\\\"M65 731Q65 745 68 747T88 750Q171 750 216 725T279 670Q288 649 289 635T291 501Q292 362 293 357Q306 312 345 291T417 269Q428 269 431 266T434 250T431 234T417 231Q380 231 345 210T298 157Q293 143 292 121T291 -28V-79Q291 -134 285 -156T256 -198Q202 -250 89 -250Q71 -250 68 -247T65 -230Q65 -224 65 -223T66 -218T69 -214T77 -213Q91 -213 108 -210T146 -200T183 -177T207 -139Q208 -134 209 3L210 139Q223 196 280 230Q315 247 330 250Q305 257 280 270Q225 304 212 352L210 362L209 498Q208 635 207 640Q195 680 154 696T77 713Q68 713 67 716T65 731Z\\\"></path></defs><g stroke=\\\"currentColor\\\" fill=\\\"currentColor\\\" stroke-width=\\\"0\\\" transform=\\\"matrix(1 0 0 -1 0 0)\\\"><g data-mml-node=\\\"math\\\"><g data-mml-node=\\\"mo\\\"><use xlink:href=\\\"#MJX-269-TEX-N-7B\\\"></use></g><g data-mml-node=\\\"mi\\\" transform=\\\"translate(500, 0)\\\"><use xlink:href=\\\"#MJX-269-TEX-I-1D44B\\\"></use></g><g data-mml-node=\\\"mo\\\" transform=\\\"translate(1629.8, 0)\\\"><use xlink:href=\\\"#MJX-269-TEX-N-3D\\\"></use></g><g data-mml-node=\\\"mi\\\" transform=\\\"translate(2685.6, 0)\\\"><use xlink:href=\\\"#MJX-269-TEX-I-1D465\\\"></use></g><g data-mml-node=\\\"mo\\\" transform=\\\"translate(3257.6, 0)\\\"><use xlink:href=\\\"#MJX-269-TEX-N-7D\\\"></use></g></g></g></svg> is defined to be the variance of <svg style=\\\"vertical-align: 0\\\" width=\\\"1.726ex\\\" height=\\\"1.545ex\\\" class=\\\"mathjax\\\" viewBox=\\\"0 -683 763 683\\\"><title>Y</title><defs><path id=\\\"MJX-233-TEX-I-1D44C\\\" d=\\\"M66 637Q54 637 49 637T39 638T32 641T30 647T33 664T42 682Q44 683 56 683Q104 680 165 680Q288 680 306 683H316Q322 677 322 674T320 656Q316 643 310 637H298Q242 637 242 624Q242 619 292 477T343 333L346 336Q350 340 358 349T379 373T411 410T454 461Q546 568 561 587T577 618Q577 634 545 637Q528 637 528 647Q528 649 530 661Q533 676 535 679T549 683Q551 683 578 682T657 680Q684 680 713 681T746 682Q763 682 763 673Q763 669 760 657T755 643Q753 637 734 637Q662 632 617 587Q608 578 477 424L348 273L322 169Q295 62 295 57Q295 46 363 46Q379 46 384 45T390 35Q390 33 388 23Q384 6 382 4T366 1Q361 1 324 1T232 2Q170 2 138 2T102 1Q84 1 84 9Q84 14 87 24Q88 27 89 30T90 35T91 39T93 42T96 44T101 45T107 45T116 46T129 46Q168 47 180 50T198 63Q201 68 227 171L252 274L129 623Q128 624 127 625T125 627T122 629T118 631T113 633T105 634T96 635T83 636T66 637Z\\\"></path></defs><g stroke=\\\"currentColor\\\" fill=\\\"currentColor\\\" stroke-width=\\\"0\\\" transform=\\\"matrix(1 0 0 -1 0 0)\\\"><g data-mml-node=\\\"math\\\"><g data-mml-node=\\\"mi\\\"><use xlink:href=\\\"#MJX-233-TEX-I-1D44C\\\"></use></g></g></g></svg> with respect to its conditional distribution of <svg style=\\\"vertical-align: 0\\\" width=\\\"1.726ex\\\" height=\\\"1.545ex\\\" class=\\\"mathjax\\\" viewBox=\\\"0 -683 763 683\\\"><title>Y</title><defs><path id=\\\"MJX-233-TEX-I-1D44C\\\" d=\\\"M66 637Q54 637 49 637T39 638T32 641T30 647T33 664T42 682Q44 683 56 683Q104 680 165 680Q288 680 306 683H316Q322 677 322 674T320 656Q316 643 310 637H298Q242 637 242 624Q242 619 292 477T343 333L346 336Q350 340 358 349T379 373T411 410T454 461Q546 568 561 587T577 618Q577 634 545 637Q528 637 528 647Q528 649 530 661Q533 676 535 679T549 683Q551 683 578 682T657 680Q684 680 713 681T746 682Q763 682 763 673Q763 669 760 657T755 643Q753 637 734 637Q662 632 617 587Q608 578 477 424L348 273L322 169Q295 62 295 57Q295 46 363 46Q379 46 384 45T390 35Q390 33 388 23Q384 6 382 4T366 1Q361 1 324 1T232 2Q170 2 138 2T102 1Q84 1 84 9Q84 14 87 24Q88 27 89 30T90 35T91 39T93 42T96 44T101 45T107 45T116 46T129 46Q168 47 180 50T198 63Q201 68 227 171L252 274L129 623Q128 624 127 625T125 627T122 629T118 631T113 633T105 634T96 635T83 636T66 637Z\\\"></path></defs><g stroke=\\\"currentColor\\\" fill=\\\"currentColor\\\" stroke-width=\\\"0\\\" transform=\\\"matrix(1 0 0 -1 0 0)\\\"><g data-mml-node=\\\"math\\\"><g data-mml-node=\\\"mi\\\"><use xlink:href=\\\"#MJX-233-TEX-I-1D44C\\\"></use></g></g></g></svg> given <span class=\\\"nowrap\\\"><svg style=\\\"vertical-align: -0.566ex\\\" width=\\\"8.501ex\\\" height=\\\"2.262ex\\\" class=\\\"mathjax\\\" viewBox=\\\"0 -750 3757.6 1000\\\"><title>\\\\{X=x\\\\}</title><defs><path id=\\\"MJX-268-TEX-N-7B\\\" d=\\\"M434 -231Q434 -244 428 -250H410Q281 -250 230 -184Q225 -177 222 -172T217 -161T213 -148T211 -133T210 -111T209 -84T209 -47T209 0Q209 21 209 53Q208 142 204 153Q203 154 203 155Q189 191 153 211T82 231Q71 231 68 234T65 250T68 266T82 269Q116 269 152 289T203 345Q208 356 208 377T209 529V579Q209 634 215 656T244 698Q270 724 324 740Q361 748 377 749Q379 749 390 749T408 750H428Q434 744 434 732Q434 719 431 716Q429 713 415 713Q362 710 332 689T296 647Q291 634 291 499V417Q291 370 288 353T271 314Q240 271 184 255L170 250L184 245Q202 239 220 230T262 196T290 137Q291 131 291 1Q291 -134 296 -147Q306 -174 339 -192T415 -213Q429 -213 431 -216Q434 -219 434 -231Z\\\"></path><path id=\\\"MJX-268-TEX-I-1D44B\\\" d=\\\"M42 0H40Q26 0 26 11Q26 15 29 27Q33 41 36 43T55 46Q141 49 190 98Q200 108 306 224T411 342Q302 620 297 625Q288 636 234 637H206Q200 643 200 645T202 664Q206 677 212 683H226Q260 681 347 681Q380 681 408 681T453 682T473 682Q490 682 490 671Q490 670 488 658Q484 643 481 640T465 637Q434 634 411 620L488 426L541 485Q646 598 646 610Q646 628 622 635Q617 635 609 637Q594 637 594 648Q594 650 596 664Q600 677 606 683H618Q619 683 643 683T697 681T738 680Q828 680 837 683H845Q852 676 852 672Q850 647 840 637H824Q790 636 763 628T722 611T698 593L687 584Q687 585 592 480L505 384Q505 383 536 304T601 142T638 56Q648 47 699 46Q734 46 734 37Q734 35 732 23Q728 7 725 4T711 1Q708 1 678 1T589 2Q528 2 496 2T461 1Q444 1 444 10Q444 11 446 25Q448 35 450 39T455 44T464 46T480 47T506 54Q523 62 523 64Q522 64 476 181L429 299Q241 95 236 84Q232 76 232 72Q232 53 261 47Q262 47 267 47T273 46Q276 46 277 46T280 45T283 42T284 35Q284 26 282 19Q279 6 276 4T261 1Q258 1 243 1T201 2T142 2Q64 2 42 0Z\\\"></path><path id=\\\"MJX-268-TEX-N-3D\\\" d=\\\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\\\"></path><path id=\\\"MJX-268-TEX-I-1D465\\\" d=\\\"M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z\\\"></path><path id=\\\"MJX-268-TEX-N-7D\\\" d=\\\"M65 731Q65 745 68 747T88 750Q171 750 216 725T279 670Q288 649 289 635T291 501Q292 362 293 357Q306 312 345 291T417 269Q428 269 431 266T434 250T431 234T417 231Q380 231 345 210T298 157Q293 143 292 121T291 -28V-79Q291 -134 285 -156T256 -198Q202 -250 89 -250Q71 -250 68 -247T65 -230Q65 -224 65 -223T66 -218T69 -214T77 -213Q91 -213 108 -210T146 -200T183 -177T207 -139Q208 -134 209 3L210 139Q223 196 280 230Q315 247 330 250Q305 257 280 270Q225 304 212 352L210 362L209 498Q208 635 207 640Q195 680 154 696T77 713Q68 713 67 716T65 731Z\\\"></path></defs><g stroke=\\\"currentColor\\\" fill=\\\"currentColor\\\" stroke-width=\\\"0\\\" transform=\\\"matrix(1 0 0 -1 0 0)\\\"><g data-mml-node=\\\"math\\\"><g data-mml-node=\\\"mo\\\"><use xlink:href=\\\"#MJX-268-TEX-N-7B\\\"></use></g><g data-mml-node=\\\"mi\\\" transform=\\\"translate(500, 0)\\\"><use xlink:href=\\\"#MJX-268-TEX-I-1D44B\\\"></use></g><g data-mml-node=\\\"mo\\\" transform=\\\"translate(1629.8, 0)\\\"><use xlink:href=\\\"#MJX-268-TEX-N-3D\\\"></use></g><g data-mml-node=\\\"mi\\\" transform=\\\"translate(2685.6, 0)\\\"><use xlink:href=\\\"#MJX-268-TEX-I-1D465\\\"></use></g><g data-mml-node=\\\"mo\\\" transform=\\\"translate(3257.6, 0)\\\"><use xlink:href=\\\"#MJX-268-TEX-N-7D\\\"></use></g></g></g></svg>.</span> This value says how spread out the probability mass is for the joint distribution of <svg style=\\\"vertical-align: 0\\\" width=\\\"1.928ex\\\" height=\\\"1.545ex\\\" class=\\\"mathjax\\\" viewBox=\\\"0 -683 852 683\\\"><title>X</title><defs><path id=\\\"MJX-25-TEX-I-1D44B\\\" d=\\\"M42 0H40Q26 0 26 11Q26 15 29 27Q33 41 36 43T55 46Q141 49 190 98Q200 108 306 224T411 342Q302 620 297 625Q288 636 234 637H206Q200 643 200 645T202 664Q206 677 212 683H226Q260 681 347 681Q380 681 408 681T453 682T473 682Q490 682 490 671Q490 670 488 658Q484 643 481 640T465 637Q434 634 411 620L488 426L541 485Q646 598 646 610Q646 628 622 635Q617 635 609 637Q594 637 594 648Q594 650 596 664Q600 677 606 683H618Q619 683 643 683T697 681T738 680Q828 680 837 683H845Q852 676 852 672Q850 647 840 637H824Q790 636 763 628T722 611T698 593L687 584Q687 585 592 480L505 384Q505 383 536 304T601 142T638 56Q648 47 699 46Q734 46 734 37Q734 35 732 23Q728 7 725 4T711 1Q708 1 678 1T589 2Q528 2 496 2T461 1Q444 1 444 10Q444 11 446 25Q448 35 450 39T455 44T464 46T480 47T506 54Q523 62 523 64Q522 64 476 181L429 299Q241 95 236 84Q232 76 232 72Q232 53 261 47Q262 47 267 47T273 46Q276 46 277 46T280 45T283 42T284 35Q284 26 282 19Q279 6 276 4T261 1Q258 1 243 1T201 2T142 2Q64 2 42 0Z\\\"></path></defs><g stroke=\\\"currentColor\\\" fill=\\\"currentColor\\\" stroke-width=\\\"0\\\" transform=\\\"matrix(1 0 0 -1 0 0)\\\"><g data-mml-node=\\\"math\\\"><g data-mml-node=\\\"mi\\\"><use xlink:href=\\\"#MJX-25-TEX-I-1D44B\\\"></use></g></g></g></svg> and <svg style=\\\"vertical-align: 0\\\" width=\\\"1.726ex\\\" height=\\\"1.545ex\\\" class=\\\"mathjax\\\" viewBox=\\\"0 -683 763 683\\\"><title>Y</title><defs><path id=\\\"MJX-233-TEX-I-1D44C\\\" d=\\\"M66 637Q54 637 49 637T39 638T32 641T30 647T33 664T42 682Q44 683 56 683Q104 680 165 680Q288 680 306 683H316Q322 677 322 674T320 656Q316 643 310 637H298Q242 637 242 624Q242 619 292 477T343 333L346 336Q350 340 358 349T379 373T411 410T454 461Q546 568 561 587T577 618Q577 634 545 637Q528 637 528 647Q528 649 530 661Q533 676 535 679T549 683Q551 683 578 682T657 680Q684 680 713 681T746 682Q763 682 763 673Q763 669 760 657T755 643Q753 637 734 637Q662 632 617 587Q608 578 477 424L348 273L322 169Q295 62 295 57Q295 46 363 46Q379 46 384 45T390 35Q390 33 388 23Q384 6 382 4T366 1Q361 1 324 1T232 2Q170 2 138 2T102 1Q84 1 84 9Q84 14 87 24Q88 27 89 30T90 35T91 39T93 42T96 44T101 45T107 45T116 46T129 46Q168 47 180 50T198 63Q201 68 227 171L252 274L129 623Q128 624 127 625T125 627T122 629T118 631T113 633T105 634T96 635T83 636T66 637Z\\\"></path></defs><g stroke=\\\"currentColor\\\" fill=\\\"currentColor\\\" stroke-width=\\\"0\\\" transform=\\\"matrix(1 0 0 -1 0 0)\\\"><g data-mml-node=\\\"math\\\"><g data-mml-node=\\\"mi\\\"><use xlink:href=\\\"#MJX-233-TEX-I-1D44C\\\"></use></g></g></g></svg> along the vertical line at horizontal position <span class=\\\"nowrap\\\"><svg style=\\\"vertical-align: -0.025ex\\\" width=\\\"1.294ex\\\" height=\\\"1.025ex\\\" class=\\\"mathjax\\\" viewBox=\\\"0 -442 572 453\\\"><title>x</title><defs><path id=\\\"MJX-28-TEX-I-1D465\\\" d=\\\"M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z\\\"></path></defs><g stroke=\\\"currentColor\\\" fill=\\\"currentColor\\\" stroke-width=\\\"0\\\" transform=\\\"matrix(1 0 0 -1 0 0)\\\"><g data-mml-node=\\\"math\\\"><g data-mml-node=\\\"mi\\\"><use xlink:href=\\\"#MJX-28-TEX-I-1D465\\\"></use></g></g></g></svg>.</span></p>\"},\"conditional-expectation\":{\"title\":\"Conditional expectation\",\"text\":\"<p>The <strong>conditional expectation</strong> of <svg style=\\\"vertical-align: 0\\\" width=\\\"1.726ex\\\" height=\\\"1.545ex\\\" class=\\\"mathjax\\\" viewBox=\\\"0 -683 763 683\\\"><title>Y</title><defs><path id=\\\"MJX-233-TEX-I-1D44C\\\" d=\\\"M66 637Q54 637 49 637T39 638T32 641T30 647T33 664T42 682Q44 683 56 683Q104 680 165 680Q288 680 306 683H316Q322 677 322 674T320 656Q316 643 310 637H298Q242 637 242 624Q242 619 292 477T343 333L346 336Q350 340 358 349T379 373T411 410T454 461Q546 568 561 587T577 618Q577 634 545 637Q528 637 528 647Q528 649 530 661Q533 676 535 679T549 683Q551 683 578 682T657 680Q684 680 713 681T746 682Q763 682 763 673Q763 669 760 657T755 643Q753 637 734 637Q662 632 617 587Q608 578 477 424L348 273L322 169Q295 62 295 57Q295 46 363 46Q379 46 384 45T390 35Q390 33 388 23Q384 6 382 4T366 1Q361 1 324 1T232 2Q170 2 138 2T102 1Q84 1 84 9Q84 14 87 24Q88 27 89 30T90 35T91 39T93 42T96 44T101 45T107 45T116 46T129 46Q168 47 180 50T198 63Q201 68 227 171L252 274L129 623Q128 624 127 625T125 627T122 629T118 631T113 633T105 634T96 635T83 636T66 637Z\\\"></path></defs><g stroke=\\\"currentColor\\\" fill=\\\"currentColor\\\" stroke-width=\\\"0\\\" transform=\\\"matrix(1 0 0 -1 0 0)\\\"><g data-mml-node=\\\"math\\\"><g data-mml-node=\\\"mi\\\"><use xlink:href=\\\"#MJX-233-TEX-I-1D44C\\\"></use></g></g></g></svg> given <svg style=\\\"vertical-align: -0.566ex\\\" width=\\\"8.501ex\\\" height=\\\"2.262ex\\\" class=\\\"mathjax\\\" viewBox=\\\"0 -750 3757.6 1000\\\"><title>\\\\{X=x\\\\}</title><defs><path id=\\\"MJX-268-TEX-N-7B\\\" d=\\\"M434 -231Q434 -244 428 -250H410Q281 -250 230 -184Q225 -177 222 -172T217 -161T213 -148T211 -133T210 -111T209 -84T209 -47T209 0Q209 21 209 53Q208 142 204 153Q203 154 203 155Q189 191 153 211T82 231Q71 231 68 234T65 250T68 266T82 269Q116 269 152 289T203 345Q208 356 208 377T209 529V579Q209 634 215 656T244 698Q270 724 324 740Q361 748 377 749Q379 749 390 749T408 750H428Q434 744 434 732Q434 719 431 716Q429 713 415 713Q362 710 332 689T296 647Q291 634 291 499V417Q291 370 288 353T271 314Q240 271 184 255L170 250L184 245Q202 239 220 230T262 196T290 137Q291 131 291 1Q291 -134 296 -147Q306 -174 339 -192T415 -213Q429 -213 431 -216Q434 -219 434 -231Z\\\"></path><path id=\\\"MJX-268-TEX-I-1D44B\\\" d=\\\"M42 0H40Q26 0 26 11Q26 15 29 27Q33 41 36 43T55 46Q141 49 190 98Q200 108 306 224T411 342Q302 620 297 625Q288 636 234 637H206Q200 643 200 645T202 664Q206 677 212 683H226Q260 681 347 681Q380 681 408 681T453 682T473 682Q490 682 490 671Q490 670 488 658Q484 643 481 640T465 637Q434 634 411 620L488 426L541 485Q646 598 646 610Q646 628 622 635Q617 635 609 637Q594 637 594 648Q594 650 596 664Q600 677 606 683H618Q619 683 643 683T697 681T738 680Q828 680 837 683H845Q852 676 852 672Q850 647 840 637H824Q790 636 763 628T722 611T698 593L687 584Q687 585 592 480L505 384Q505 383 536 304T601 142T638 56Q648 47 699 46Q734 46 734 37Q734 35 732 23Q728 7 725 4T711 1Q708 1 678 1T589 2Q528 2 496 2T461 1Q444 1 444 10Q444 11 446 25Q448 35 450 39T455 44T464 46T480 47T506 54Q523 62 523 64Q522 64 476 181L429 299Q241 95 236 84Q232 76 232 72Q232 53 261 47Q262 47 267 47T273 46Q276 46 277 46T280 45T283 42T284 35Q284 26 282 19Q279 6 276 4T261 1Q258 1 243 1T201 2T142 2Q64 2 42 0Z\\\"></path><path id=\\\"MJX-268-TEX-N-3D\\\" d=\\\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\\\"></path><path id=\\\"MJX-268-TEX-I-1D465\\\" d=\\\"M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z\\\"></path><path id=\\\"MJX-268-TEX-N-7D\\\" d=\\\"M65 731Q65 745 68 747T88 750Q171 750 216 725T279 670Q288 649 289 635T291 501Q292 362 293 357Q306 312 345 291T417 269Q428 269 431 266T434 250T431 234T417 231Q380 231 345 210T298 157Q293 143 292 121T291 -28V-79Q291 -134 285 -156T256 -198Q202 -250 89 -250Q71 -250 68 -247T65 -230Q65 -224 65 -223T66 -218T69 -214T77 -213Q91 -213 108 -210T146 -200T183 -177T207 -139Q208 -134 209 3L210 139Q223 196 280 230Q315 247 330 250Q305 257 280 270Q225 304 212 352L210 362L209 498Q208 635 207 640Q195 680 154 696T77 713Q68 713 67 716T65 731Z\\\"></path></defs><g stroke=\\\"currentColor\\\" fill=\\\"currentColor\\\" stroke-width=\\\"0\\\" transform=\\\"matrix(1 0 0 -1 0 0)\\\"><g data-mml-node=\\\"math\\\"><g data-mml-node=\\\"mo\\\"><use xlink:href=\\\"#MJX-268-TEX-N-7B\\\"></use></g><g data-mml-node=\\\"mi\\\" transform=\\\"translate(500, 0)\\\"><use xlink:href=\\\"#MJX-268-TEX-I-1D44B\\\"></use></g><g data-mml-node=\\\"mo\\\" transform=\\\"translate(1629.8, 0)\\\"><use xlink:href=\\\"#MJX-268-TEX-N-3D\\\"></use></g><g data-mml-node=\\\"mi\\\" transform=\\\"translate(2685.6, 0)\\\"><use xlink:href=\\\"#MJX-268-TEX-I-1D465\\\"></use></g><g data-mml-node=\\\"mo\\\" transform=\\\"translate(3257.6, 0)\\\"><use xlink:href=\\\"#MJX-268-TEX-N-7D\\\"></use></g></g></g></svg> is defined to be the expectation of <svg style=\\\"vertical-align: 0\\\" width=\\\"1.726ex\\\" height=\\\"1.545ex\\\" class=\\\"mathjax\\\" viewBox=\\\"0 -683 763 683\\\"><title>Y</title><defs><path id=\\\"MJX-233-TEX-I-1D44C\\\" d=\\\"M66 637Q54 637 49 637T39 638T32 641T30 647T33 664T42 682Q44 683 56 683Q104 680 165 680Q288 680 306 683H316Q322 677 322 674T320 656Q316 643 310 637H298Q242 637 242 624Q242 619 292 477T343 333L346 336Q350 340 358 349T379 373T411 410T454 461Q546 568 561 587T577 618Q577 634 545 637Q528 637 528 647Q528 649 530 661Q533 676 535 679T549 683Q551 683 578 682T657 680Q684 680 713 681T746 682Q763 682 763 673Q763 669 760 657T755 643Q753 637 734 637Q662 632 617 587Q608 578 477 424L348 273L322 169Q295 62 295 57Q295 46 363 46Q379 46 384 45T390 35Q390 33 388 23Q384 6 382 4T366 1Q361 1 324 1T232 2Q170 2 138 2T102 1Q84 1 84 9Q84 14 87 24Q88 27 89 30T90 35T91 39T93 42T96 44T101 45T107 45T116 46T129 46Q168 47 180 50T198 63Q201 68 227 171L252 274L129 623Q128 624 127 625T125 627T122 629T118 631T113 633T105 634T96 635T83 636T66 637Z\\\"></path></defs><g stroke=\\\"currentColor\\\" fill=\\\"currentColor\\\" stroke-width=\\\"0\\\" transform=\\\"matrix(1 0 0 -1 0 0)\\\"><g data-mml-node=\\\"math\\\"><g data-mml-node=\\\"mi\\\"><use xlink:href=\\\"#MJX-233-TEX-I-1D44C\\\"></use></g></g></g></svg> calculated with respect to its conditional distribution given <svg style=\\\"vertical-align: -0.566ex\\\" width=\\\"8.501ex\\\" height=\\\"2.262ex\\\" class=\\\"mathjax\\\" viewBox=\\\"0 -750 3757.6 1000\\\"><title>\\\\{X=x\\\\}</title><defs><path id=\\\"MJX-268-TEX-N-7B\\\" d=\\\"M434 -231Q434 -244 428 -250H410Q281 -250 230 -184Q225 -177 222 -172T217 -161T213 -148T211 -133T210 -111T209 -84T209 -47T209 0Q209 21 209 53Q208 142 204 153Q203 154 203 155Q189 191 153 211T82 231Q71 231 68 234T65 250T68 266T82 269Q116 269 152 289T203 345Q208 356 208 377T209 529V579Q209 634 215 656T244 698Q270 724 324 740Q361 748 377 749Q379 749 390 749T408 750H428Q434 744 434 732Q434 719 431 716Q429 713 415 713Q362 710 332 689T296 647Q291 634 291 499V417Q291 370 288 353T271 314Q240 271 184 255L170 250L184 245Q202 239 220 230T262 196T290 137Q291 131 291 1Q291 -134 296 -147Q306 -174 339 -192T415 -213Q429 -213 431 -216Q434 -219 434 -231Z\\\"></path><path id=\\\"MJX-268-TEX-I-1D44B\\\" d=\\\"M42 0H40Q26 0 26 11Q26 15 29 27Q33 41 36 43T55 46Q141 49 190 98Q200 108 306 224T411 342Q302 620 297 625Q288 636 234 637H206Q200 643 200 645T202 664Q206 677 212 683H226Q260 681 347 681Q380 681 408 681T453 682T473 682Q490 682 490 671Q490 670 488 658Q484 643 481 640T465 637Q434 634 411 620L488 426L541 485Q646 598 646 610Q646 628 622 635Q617 635 609 637Q594 637 594 648Q594 650 596 664Q600 677 606 683H618Q619 683 643 683T697 681T738 680Q828 680 837 683H845Q852 676 852 672Q850 647 840 637H824Q790 636 763 628T722 611T698 593L687 584Q687 585 592 480L505 384Q505 383 536 304T601 142T638 56Q648 47 699 46Q734 46 734 37Q734 35 732 23Q728 7 725 4T711 1Q708 1 678 1T589 2Q528 2 496 2T461 1Q444 1 444 10Q444 11 446 25Q448 35 450 39T455 44T464 46T480 47T506 54Q523 62 523 64Q522 64 476 181L429 299Q241 95 236 84Q232 76 232 72Q232 53 261 47Q262 47 267 47T273 46Q276 46 277 46T280 45T283 42T284 35Q284 26 282 19Q279 6 276 4T261 1Q258 1 243 1T201 2T142 2Q64 2 42 0Z\\\"></path><path id=\\\"MJX-268-TEX-N-3D\\\" d=\\\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\\\"></path><path id=\\\"MJX-268-TEX-I-1D465\\\" d=\\\"M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z\\\"></path><path id=\\\"MJX-268-TEX-N-7D\\\" d=\\\"M65 731Q65 745 68 747T88 750Q171 750 216 725T279 670Q288 649 289 635T291 501Q292 362 293 357Q306 312 345 291T417 269Q428 269 431 266T434 250T431 234T417 231Q380 231 345 210T298 157Q293 143 292 121T291 -28V-79Q291 -134 285 -156T256 -198Q202 -250 89 -250Q71 -250 68 -247T65 -230Q65 -224 65 -223T66 -218T69 -214T77 -213Q91 -213 108 -210T146 -200T183 -177T207 -139Q208 -134 209 3L210 139Q223 196 280 230Q315 247 330 250Q305 257 280 270Q225 304 212 352L210 362L209 498Q208 635 207 640Q195 680 154 696T77 713Q68 713 67 716T65 731Z\\\"></path></defs><g stroke=\\\"currentColor\\\" fill=\\\"currentColor\\\" stroke-width=\\\"0\\\" transform=\\\"matrix(1 0 0 -1 0 0)\\\"><g data-mml-node=\\\"math\\\"><g data-mml-node=\\\"mo\\\"><use xlink:href=\\\"#MJX-268-TEX-N-7B\\\"></use></g><g data-mml-node=\\\"mi\\\" transform=\\\"translate(500, 0)\\\"><use xlink:href=\\\"#MJX-268-TEX-I-1D44B\\\"></use></g><g data-mml-node=\\\"mo\\\" transform=\\\"translate(1629.8, 0)\\\"><use xlink:href=\\\"#MJX-268-TEX-N-3D\\\"></use></g><g data-mml-node=\\\"mi\\\" transform=\\\"translate(2685.6, 0)\\\"><use xlink:href=\\\"#MJX-268-TEX-I-1D465\\\"></use></g><g data-mml-node=\\\"mo\\\" transform=\\\"translate(3257.6, 0)\\\"><use xlink:href=\\\"#MJX-268-TEX-N-7D\\\"></use></g></g></g></svg>.</p>\"},\"geron\":{\"title\":\"Hands-on ML\",\"text\":\"<p>This section draws some ideas from chapter <em>End-to-End Machine Learning Project</em> in the (highly recommended) book <em>Hands on Machine Learning with Scikit-Learn and TensorFlow</em> by Aurélien Geron. In that chapter, California housing prices are considered.</p>\"}}","hintsJSON":"{\"welcome\":\"<p>Welcome to Data Gymnasia! I’m Bruno, your personal tutor. <img class=\\\"emoji\\\" width=\\\"20\\\" height=\\\"20\\\" src=\\\"https://static.mathigon.org/emoji/graduation-cap.png\\\" alt=\\\"graduation-cap\\\"></p>\",\"account\":\"<p>You can <x-target class=\\\"step-target pill\\\" to=\\\".nav-link.popup-target\\\">create a free account</x-target> to save your progress.</p>\",\"tutorial1\":\"<p>Our content is divided into small steps. You have to complete the activities to reveal what’s next.</p>\",\"tutorial2\":\"<p>We will save all your progress, so you can come back later and continue right where you left off.</p>\",\"correct\":[\"<p>Well done <img class=\\\"emoji\\\" width=\\\"20\\\" height=\\\"20\\\" src=\\\"https://static.mathigon.org/emoji/smiling-face.png\\\" alt=\\\"smiling-face\\\"></p>\",\"<p>Great Work! <img class=\\\"emoji\\\" width=\\\"20\\\" height=\\\"20\\\" src=\\\"https://static.mathigon.org/emoji/relieved-face.png\\\" alt=\\\"relieved-face\\\"></p>\",\"<p>Awesome <img class=\\\"emoji\\\" width=\\\"20\\\" height=\\\"20\\\" src=\\\"https://static.mathigon.org/emoji/grinning-face.png\\\" alt=\\\"grinning-face\\\"></p>\",\"<p>Brilliant <img class=\\\"emoji\\\" width=\\\"20\\\" height=\\\"20\\\" src=\\\"https://static.mathigon.org/emoji/thumbs-up.png\\\" alt=\\\"thumbs-up\\\"></p>\",\"<p>Excellent! <img class=\\\"emoji\\\" width=\\\"20\\\" height=\\\"20\\\" src=\\\"https://static.mathigon.org/emoji/ok-hand.png\\\" alt=\\\"ok-hand\\\"></p>\",\"<p>Cool <img class=\\\"emoji\\\" width=\\\"20\\\" height=\\\"20\\\" src=\\\"https://static.mathigon.org/emoji/smiling-face-with-sunglasses.png\\\" alt=\\\"smiling-face-with-sunglasses\\\"></p>\",\"<p>Nice! <img class=\\\"emoji\\\" width=\\\"20\\\" height=\\\"20\\\" src=\\\"https://static.mathigon.org/emoji/victory-hand.png\\\" alt=\\\"victory-hand\\\"></p>\",\"<p>Way to go! <img class=\\\"emoji\\\" width=\\\"20\\\" height=\\\"20\\\" src=\\\"https://static.mathigon.org/emoji/smiling-face-with-smiling-eyes.png\\\" alt=\\\"smiling-face-with-smiling-eyes\\\"></p>\",\"<p>Sweet <img class=\\\"emoji\\\" width=\\\"20\\\" height=\\\"20\\\" src=\\\"https://static.mathigon.org/emoji/smiling-face.png\\\" alt=\\\"smiling-face\\\"></p>\",\"<p>Impressive! <img class=\\\"emoji\\\" width=\\\"20\\\" height=\\\"20\\\" src=\\\"https://static.mathigon.org/emoji/trophy.png\\\" alt=\\\"trophy\\\"></p>\",\"<p>Outstanding <img class=\\\"emoji\\\" width=\\\"20\\\" height=\\\"20\\\" src=\\\"https://static.mathigon.org/emoji/grinning-face.png\\\" alt=\\\"grinning-face\\\"></p>\",\"<p>Superb! <img class=\\\"emoji\\\" width=\\\"20\\\" height=\\\"20\\\" src=\\\"https://static.mathigon.org/emoji/star.png\\\" alt=\\\"star\\\"></p>\",\"<p>Wonderful! <img class=\\\"emoji\\\" width=\\\"20\\\" height=\\\"20\\\" src=\\\"https://static.mathigon.org/emoji/smiling-face.png\\\" alt=\\\"smiling-face\\\"></p>\"],\"incorrect\":[\"<p>That’s not quite right <img class=\\\"emoji\\\" width=\\\"20\\\" height=\\\"20\\\" src=\\\"https://static.mathigon.org/emoji/frowning-face.png\\\" alt=\\\"frowning-face\\\"></p>\",\"<p>Are you sure about that? <img class=\\\"emoji\\\" width=\\\"20\\\" height=\\\"20\\\" src=\\\"https://static.mathigon.org/emoji/thinking-face.png\\\" alt=\\\"thinking-face\\\"></p>\",\"<p>That doesn’t look right. <img class=\\\"emoji\\\" width=\\\"20\\\" height=\\\"20\\\" src=\\\"https://static.mathigon.org/emoji/hushed-face.png\\\" alt=\\\"hushed-face\\\"></p>\",\"<p>Try again! <img class=\\\"emoji\\\" width=\\\"20\\\" height=\\\"20\\\" src=\\\"https://static.mathigon.org/emoji/confused-face.png\\\" alt=\\\"confused-face\\\"></p>\"],\"welcomeMorning\":\"<p>Good morning!</p>\",\"welcomeAfternoon\":\"<p>Good afternoon!</p>\",\"welcomeEvening\":\"<p>Good evening!</p>\",\"welcomeMorningNamed\":\"<p>Good morning, $name!</p>\",\"welcomeAfternoonNamed\":\"<p>Good afternoon, $name!</p>\",\"welcomeEveningNamed\":\"<p>Good evening, $name!</p>\",\"overfit\":\"<p>Looks too curvy to me!</p>\",\"underfit\":\"<p>There seems to be some overall curve to the data which is not explained by the line.</p>\"}"}