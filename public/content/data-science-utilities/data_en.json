{"id":"data-science-utilities","locale":"en","nextCourse":"data-and-society","prevCourse":"data-and-society","title":"Utilities","description":"Learn about Unix, Git, Conda, Jupyter, VS Code and Markdown.","color":"a53a5b","author":"Samuel S. Watson","hero":"\\content\\data-science-utilities\\hero.jpg","goals":236,"sections":[{"id":"introduction","title":"Introduction","url":"/course/data-science-utilities/introduction","steps":["intro","step-1","step-2","step-3","goals","step-correctness","step-reproducibility","step-clarity","open-source-data-science","step-community","step-integration","step-accessibility","step-dominate-industry","step-intro-exercises"],"goals":15,"duration":20},{"id":"unix","title":"Unix","url":"/course/data-science-utilities/unix","steps":["unix","unix-like","shells","follow-along-binder","unix-navigation","home-directory","step-unix-path","step-root-directory","step-cd-solution","exercise-list-bin-files","step-ls-bin-directories","step-mkdir","tab-completion","bash-history-command","cursor-position","bash-escape","bash-other-important-commands","bash-options","step-grep-solution","vim","vim-modes","step-vim-navigating-modes","escape-vim-exercise","variables","step-bash-special-variables","step-bash-profile","step-exporting-PATH","path-exercise","piping","step-difference-between-file-operators","piping-2","pipe-sol-1","glob-patterns","glob-exercise-solution"],"goals":41,"duration":55},{"id":"git","title":"Git","url":"/course/data-science-utilities/git","steps":["git","step-tracking-history","step-managing-version","step-facilitating-teamwork","step-version-control","git-concepts","step-dot-git","step-git-vs-drive","step-git-concepts","step-git-zones","step-why-git-so-many-zones","git-zone-exercises","git-branches","git-branch-pointer-exercise","step-git-ff-merge","step-git-merge","step-git-ff-exercise","configuring-git","core-git-workflow","step-git-initial-commit","step-git-status","step-git-commit-message","step-long-hex-string","git-lol","step-git-create-GitHub","step-git-pull-habit","command-exercises","git-branching-commands","step-add-content-new-branch","git-merge-dragons","echo-merge-dragons","step-git-merge-command-exercise","undoing-changes","step-alternative-git-show","step-git-diff","step-checkout-single-file","step-git-checkout-file-exercise","git-checkout-file-solution","git-diff-exercise"],"goals":53,"duration":60},{"id":"latex","title":"LaTeX","url":"/course/data-science-utilities/latex","steps":["latex","step-pdflatex","latex-expression-markup","step-latex-superscripts","latex-fractions","step-greek-symbols-latex","step-latex-styling-text","step-latex-delimiters","step-latex-displayed-equations","step-latex-arrays"],"goals":9,"duration":15},{"id":"conda","title":"Conda","url":"/course/data-science-utilities/conda","steps":["Conda","step-code-distribution-challenges","step-install-anaconda","step-virtual-environments-idea","step-anaconda-binaries","step-sometimes-use-pip","virtual-environments","step-virtual-env-numpy-example","step-set-up-conda","step-conda-create","step-check-numpy-conda","step-conda-env-list","step-conda-install","step-conda-export","other-reproducibility-solutions","docker"],"goals":19,"duration":25},{"id":"markdown","title":"Markdown","url":"/course/data-science-utilities/markdown","steps":["markdown","step-markdown-invented","step-markdown-lingua-franca","markdown-rules","step-markdown-italics","step-markdown-headers","step-markdown-links","step-markdown-images","step-markdown-blockquotes","step-markdown-bullet-lists","step-markdown-numbered-lists","step-markdown-inline-code","step-markdown-line-break","step-markdown-exercise"],"goals":30,"duration":25},{"id":"jupyter","title":"Jupyter","url":"/course/data-science-utilities/jupyter","steps":["jupyter","step-project-jupyter","step-rich-jupyter-output","step-jupyter-lab-explanation","magic-commands","step-magic-timeit","step-magic-debug","step-magic-autoreload","keyboard-shortcuts","step-jupyter-modes","step-jupyter-cell-operations","step-jupyter-execute-cells","step-jupyter-command-palette","notebook-consoles","step-jupyter-library-code","step-jupyter-scratch-code","step-jupyter-three-types"],"goals":22,"duration":30},{"id":"vs-code","title":"VS Code","url":"/course/data-science-utilities/vs-code","steps":["vs-code","step-vs-code-introduction","vs-code-main-features","step-command-palette","step-integrated-terminal","step-marketplace","step-vscode-bookmarks","step-vscode-git-integration","step-vscode-snippets","python-ide","step-vscode-python-extension"],"goals":22,"duration":35},{"id":"make","title":"Make","url":"/course/data-science-utilities/make","steps":["gnu-make","step-target-and-source-files","step-makefile","step-example-makefile","step-makefile-entry-formula","step-make-phony-targets","step-specific-targets"],"goals":7,"duration":10},{"id":"docker","title":"Docker","url":"/course/data-science-utilities/docker","steps":["docker-section","step-docker-overview","docker-no-assumptions","docker-desktop-example","docker-disadvantages","step-docker-example","step-docker-our-own-Dockerfile","step-docker-broken-build","step-docker-makefile","step-docker-extract-file","step-docker-cp","step-docker-volumes","step-all-done"],"goals":18,"duration":35}],"steps":{"intro":{"id":"intro","title":"Intro","html":"<x-step id=\"intro\" goals=\"blank-0\"><p>When it comes to data science, <strong>tools matter</strong>. Some workflows facilitate efficiency and insight, while others can leave you spending most of your time putting out fires. To borrow a familiar example from document editing, it might take 15 minutes to go through a report and capitalize every instance of a particular word, but your editor's find-and-replace feature can do the job with no errors and in less than <x-blank-mc goal=\"blank-0\"><button class=\"choice\">10</button><button class=\"choice\">100</button><button class=\"choice\">1000</button></x-blank-mc> seconds. Merely being aware of the find-and-replace concept leads to significant time savings, because you can look up how to do it if you don't remember.</p></x-step>","goals":["blank-0"],"keywords":[]},"step-1":{"id":"step-1","title":"Step  ","html":"<x-step id=\"step-1\" goals=\"blank-0\"><p>In a similar way, taking advantage of the collective wisdom of the statistical and software development communities is a major productivity multiplier. Learning a reasonably complete set of tools and techniques up front spares you the inefficiency of trying out lots of possibilities and inevitably developing some <x-blank-mc goal=\"blank-0\"><button class=\"choice\">bad</button><button class=\"choice\">good</button></x-blank-mc> habits along the way.</p></x-step>","goals":["blank-0"],"keywords":[]},"step-2":{"id":"step-2","title":"Step  ","html":"<x-step id=\"step-2\" goals=\"next-0\"><p>The set of programs and formats we will cover in the course aspires to be as close as possible to a canonical open source data science toolkit. In particular, all of the tools are widely used in industry or academia and have large user bases.</p><p><button class=\"next-step\">Continue</button></p></x-step>","goals":["next-0"],"keywords":[]},"step-3":{"id":"step-3","title":"Step  ","html":"<x-step id=\"step-3\" goals=\"next-0\"><p>On the other hand, some toolkit roles are filled by more than one popular program, so assembling a complete software suite does require making choices. You should feel free to substitute other tools when they meet the same needs and have comparable benefits to the ones we will discuss in this course. On the other hand, don't be too reluctant to appreciate the benefits of switching to something new. You can be surprisingly productive surprisingly quickly with a well-designed interface.</p><p><button class=\"next-step\">Continue</button></p></x-step>","goals":["next-0"],"keywords":[]},"goals":{"id":"goals","title":"Goals","html":"<x-step id=\"goals\" goals=\"next-0\"><h2>Goals</h2><p>Learning from the principles of best practice offers several advantages to the data science practitioner:</p><ol> <li><strong>Efficiency</strong>. It's preferable avoid taking far longer than necessary to perform common, often mundane tasks.</li></ol> <p><button class=\"next-step\">Continue</button></p></x-step>","goals":["next-0"],"keywords":[]},"step-correctness":{"id":"step-correctness","title":"Step Correctness","html":"<x-step id=\"step-correctness\" goals=\"next-0\"><ol start=\"2\"> <li><strong>Correctness</strong>. Getting incorrect results is harmful and potentially quite dangerous. Building good habits for organizing your work and avoiding common pitfalls can help you consistently achieve correct results.</li></ol> <p><button class=\"next-step\">Continue</button></p></x-step>","goals":["next-0"],"keywords":[]},"step-reproducibility":{"id":"step-reproducibility","title":"Step Reproducibility","html":"<x-step id=\"step-reproducibility\" goals=\"next-0\"><ol start=\"3\"> <li><strong>Reproducibility</strong>. A key component of transparency and confidence in your results is the ability for you and others to verify the analysis by re-running it. A workflow with <em>even one</em> non-reproducible step is not compatible with this goal, so it's important to prioritize reproducibility throughout the learning process.</li></ol> <p><button class=\"next-step\">Continue</button></p></x-step>","goals":["next-0"],"keywords":[]},"step-clarity":{"id":"step-clarity","title":"Step Clarity","html":"<x-step id=\"step-clarity\" goals=\"next-0\"><ol start=\"4\"> <li><strong>Clarity</strong>. Workflows that incorporate opaque, ad-hoc elements or obscure the reasoning involved in each step make it more difficult to re-use your work, reproduce it, and place confidence in it. Best practices can help you highlight your reasoning and make your steps easily navigable.</li></ol> <p><button class=\"next-step\">Continue</button></p></x-step>","goals":["next-0"],"keywords":[]},"open-source-data-science":{"id":"open-source-data-science","title":"Open Source Data Science","html":"<x-step id=\"open-source-data-science\" goals=\"next-0\"><h2>Open Source Data Science</h2><p>All of the software introduced in this course is <strong>free</strong> and <strong>open-source</strong>. This means that source code is available for anyone to inspect, alter, and extend. Using open-source software has many advantages for companies and individuals, even if they have access to commercial software.</p><ol> <li><strong>Agility</strong>. If you need to change tools or try something out, you can just do it. There's no need to make a hasty decision just because a license renewal is coming up, or to negotiate with a representative from the software provider about something novel you want to do.</li></ol> <p><button class=\"next-step\">Continue</button></p></x-step>","goals":["next-0"],"keywords":[]},"step-community":{"id":"step-community","title":"Step Community","html":"<x-step id=\"step-community\" goals=\"next-0\"><ol start=\"2\"> <li><strong>Community</strong>. Open source development has become popular enough that the scrutiny on a given piece of code is often larger for an open-source project than for a closed-source one. This has implications for code quality, and it makes it easier to search the internet for solutions and ideas. Similarly, the number of third-party packages available for open source software is typically orders of magnitude larger than for proprietary software. This can make it easier to customize a solution for a particular set of needs.</li></ol> <p><button class=\"next-step\">Continue</button></p></x-step>","goals":["next-0"],"keywords":[]},"step-integration":{"id":"step-integration","title":"Step Integration","html":"<x-step id=\"step-integration\" goals=\"next-0\"><ol start=\"3\"> <li><strong>Integration</strong>. Because open-source projects are a joint effort of the global scientific and development communities, significant effort has gone into making them work with one another. This often allows the user to use to choose the best tool for each aspect of the job at hand, transitioning between tools as necessary.</li></ol> <p><button class=\"next-step\">Continue</button></p></x-step>","goals":["next-0"],"keywords":[]},"step-accessibility":{"id":"step-accessibility","title":"Step Accessibility","html":"<x-step id=\"step-accessibility\" goals=\"next-0\"><ol start=\"4\"> <li><strong>Accessibility</strong>. If you want to make your work available to others, you can take advantage of services like <a href=\"https://cocalc.com\" target=\"_blank\">CoCalc</a> or <a href=\"https://mybinder.org\" target=\"_blank\">Binder</a> or ask that people download the necessary software to their machines. If your work requires an expensive license to reproduce, your target audience is less likely to engage.</li></ol> <p><button class=\"next-step\">Continue</button></p></x-step>","goals":["next-0"],"keywords":[]},"step-dominate-industry":{"id":"step-dominate-industry","title":"Step Dominate Industry","html":"<x-step id=\"step-dominate-industry\" goals=\"next-0\"><p>Because of their advantages as open-source programming languages with large and committed user bases, Python and R dominate data science in industry (although several proprietary systems also enjoy widespread usage). Many of the other tools we will discuss in this course are the <x-gloss xid=\"de-facto\">de facto</x-gloss> standard tool for their <x-gloss xid=\"use-case\">use case</x-gloss> and have no real competition from commercial offerings.</p><p><button class=\"next-step\">Continue</button></p></x-step>","goals":["next-0"],"keywords":[]},"step-intro-exercises":{"id":"step-intro-exercises","title":"Step Intro Exercises","html":"<x-step id=\"step-intro-exercises\" goals=\"picker-1 picker-2\"><div class=\"exercise\"> <p><strong>Exercise</strong><br>Select the true statements.</p><x-picker class=\"list\" goal=\"picker\"><div class=\"item pill bblue\" data-error=\"incorrect\">Python and R require expensive licenses to use.</div><div class=\"item pill bblue\"><em>Reproducibility</em> refers to the ability to reliably get the same results for a given data analysis.</div><div class=\"item pill bblue\">Learning appropriate software for solving challenges faced by data scientists can help save time in the long run.</div><div class=\"item pill bblue\" data-error=\"incorrect\">All of the programs we will discuss in this course are used by all data scientists.</div></x-picker></div> </x-step>","goals":["picker-1","picker-2"],"keywords":[]},"unix":{"id":"unix","title":"Unix","html":"<x-step id=\"unix\" goals=\"next-0\"><p>Unix is an operating system invented in the early 1970s at AT&amp;T Bell Labs. Today there are many variants of Unix in wide use around the world, including the Linux operating systems and macOS.</p><p><button class=\"next-step\">Continue</button></p></x-step>","goals":["next-0"],"keywords":[]},"unix-like":{"id":"unix-like","title":"Unix Like","html":"<x-step id=\"unix-like\" goals=\"blank-0\"><p>The key elements provided by a Unix-like operating system are</p><ol> <li>a file system, consisting of folders which can nest and store <span class=\"nowrap\"><x-blank-mc goal=\"blank-0\"><button class=\"choice\">files</button><button class=\"choice\">websites</button><button class=\"choice\">phone calls</button></x-blank-mc>,</span></li><li>a set of programs, each serving a limited function,</li><li>a <strong>shell</strong> which provides mechanisms for constructing workflows involving multiple programs and files.</li></ol> </x-step>","goals":["blank-0"],"keywords":[]},"shells":{"id":"shells","title":"Shells","html":"<x-step id=\"shells\" goals=\"next-0\"><p>Several Unix shells are available, but the most popular ones provide approximately the same functionality and interface. The most popular shell is called <strong>bash</strong>. Bash is the default shell in macOS (Mojave and earlier) and some Linux distributions. As of 2016, you can also run bash <a href=\"https://docs.microsoft.com/en-us/windows/wsl/install-win10\" target=\"_blank\">natively on Windows</a>. If you are a Windows user, it is recommended that you go ahead and install the Windows Subsystem for Linux so you can use the same commands as Linux and Mac users.</p><p><button class=\"next-step\">Continue</button></p></x-step>","goals":["next-0"],"keywords":[]},"follow-along-binder":{"id":"follow-along-binder","title":"Follow Along Binder","html":"<x-step id=\"follow-along-binder\" goals=\"next-0\"><p>If you want to follow along below before you figure out your local setup, you can use the executable cells you see in this page (which are <em>bash</em> cells, not Python cells) or launch a <a href=\"https://mybinder.org/v2/gh/jovyan/simple-python-stack/master\" target=\"_blank\">Binder instance</a> (select Terminal or bash from the <em>New</em> pull-down menu in the top right). The latter approach is recommended, because that environment provides some shortcuts that will be helpful to practice (like completing commands and file names when you hit the tab key).</p><p><button class=\"next-step\">Continue</button></p></x-step>","goals":["next-0"],"keywords":[]},"unix-navigation":{"id":"unix-navigation","title":"Unix Navigation","html":"<x-step id=\"unix-navigation\" goals=\"next-0\"><h2>Navigation</h2><p>When you first open the shell, you'll be in your <strong>home <x-gloss xid=\"directory\">directory</x-gloss></strong>. You can check this by <x-gloss xid=\"unix-run\">running</x-gloss> the command <code class=\"language-bash\">pwd</code> (which stands for <em>print working directory</em>).</p><pre bash-executable=\"bash-executable\">pwd</pre><p><button class=\"next-step\">Continue</button></p></x-step>","goals":["next-0"],"keywords":[]},"home-directory":{"id":"home-directory","title":"Home Directory","html":"<x-step id=\"home-directory\" goals=\"blank-0 blank-1 next-0 next-1\"><p>On Linux, the users' home directories are in a directory called <span class=\"nowrap\"><code class=\"language-bash\">/home/</code>,</span> while on macOS they're in <span class=\"nowrap\"><code class=\"language-bash\">/Users/</code>.</span> Since your user name on Binder is <code class=\"language-bash\">jovyan</code> (a sci-fi reference to a <a href=\"https://en.wikipedia.org/wiki/Jovian_(fiction)\" target=\"_blank\">term</a> that means <em>an inhabitant of Jupiter</em>), the directory printed when you run the cell above is called <span class=\"nowrap\"><code class=\"language-bash\">/home/jovyan</code>.</span> The character <code class=\"language-bash\">~</code> has a special meaning: it is automatically expanded to the path for your home directory.</p><p><button class=\"next-step\">Continue</button></p><div class=\"exercise\"> <p><strong>Exercise</strong> </p><ol> <li><code class=\"language-bash\">~</code> refers to the user's home directory <x-blank-mc goal=\"blank-0\"><button class=\"choice\">True</button><button class=\"choice\">False</button></x-blank-mc></li><li><code class=\"language-bash\">pwd</code> prints the contents of the current working directory <x-blank-mc goal=\"blank-1\"><button class=\"choice\">False</button><button class=\"choice\">True</button></x-blank-mc></li></ol> </div> <p><button class=\"next-step\">Continue</button></p></x-step>","goals":["blank-0","blank-1","next-0","next-1"],"keywords":[]},"step-unix-path":{"id":"step-unix-path","title":"Step Unix Path","html":"<x-step id=\"step-unix-path\" goals=\"blank-0 blank-1 next-0\"><p>The string <code class=\"language-bash\">/home/jovyan</code> is called a <strong>path</strong>. The forward slashes in a path separate directories, and each directory or file in the path is in the directory immediately to its left. For example, <x-blank-mc goal=\"blank-0\"><button class=\"choice\"><code class=\"language-bash\">jovyan</code></button><button class=\"choice\"><code class=\"language-bash\">home</code></button></x-blank-mc> is a subdirectory of <span class=\"nowrap\"><x-blank-mc goal=\"blank-1\"><button class=\"choice\"><code class=\"language-bash\">home</code></button><button class=\"choice\"><code class=\"language-bash\">jovyan</code></button></x-blank-mc>.</span></p><p><button class=\"next-step\">Continue</button></p></x-step>","goals":["blank-0","blank-1","next-0"],"keywords":[]},"step-root-directory":{"id":"step-root-directory","title":"Step Root Directory","html":"<x-step id=\"step-root-directory\" goals=\"quill\"><p>The very first slash is the <strong>root</strong> directory, and all of the files and directories on the machine are nested in this directory.</p><p>You can view the contents of directory with <span class=\"nowrap\"><code class=\"language-bash\">ls</code>,</span> and you can change directory using the <code class=\"language-bash\">cd</code> command. If the initial slash is omitted in a directory name, the name is interpreted <em>relative</em> to the current directory. For example, you can navigate to <code class=\"language-bash\">/Users/jovyan</code> from the <code class=\"language-bash\">/Users</code> directory by running <span class=\"nowrap\"><code class=\"language-bash\">cd jovyan</code>.</span> Note that arguments are supplied to Unix commands by separating them with spaces following the name of the command. You can also navigate to containing folders using <span class=\"nowrap\"><code class=\"language-bash\">..</code>.</span> For example, <code class=\"language-bash\">cd ../../</code> navigates to the grandparent directory of the current directory.</p><div class=\"exercise\"> <p><strong>Exercise</strong><br>Write three lines of Unix code in the cell below which change directory into <span class=\"nowrap\"><code class=\"language-bash\">my-data-science-project</code>,</span> list the contents of that directory, and then change back to the original directory.</p></div> <pre bash-executable=\"bash-executable\"></pre><x-quill goal=\"quill\"></x-quill></x-step>","goals":["quill"],"keywords":[]},"step-cd-solution":{"id":"step-cd-solution","title":"Step Cd Solution","html":"<x-step id=\"step-cd-solution\" goals=\"next-0\"><p><em>Solution.</em> Here's an example solution</p><pre bash-executable=\"bash-executable\">cd my-data-science-project\nls\ncd ../</pre><p>Since the original directory was the user's home directory, we could have used <code class=\"language-bash\">cd ~</code> instead in the last step.</p><p><button class=\"next-step\">Continue</button></p></x-step>","goals":["next-0"],"keywords":[]},"exercise-list-bin-files":{"id":"exercise-list-bin-files","title":"Exercise List Bin Files","html":"<x-step id=\"exercise-list-bin-files\" goals=\"quill\"><div class=\"exercise\"> <p><strong>Exercise</strong><br>List the files in the subdirectory <code class=\"language-bash\">bin</code> of the root directory.</p></div> <pre bash-executable=\"bash-executable\"></pre><x-quill goal=\"quill\"></x-quill></x-step>","goals":["quill"],"keywords":[]},"step-ls-bin-directories":{"id":"step-ls-bin-directories","title":"Step Ls Bin Directories","html":"<x-step id=\"step-ls-bin-directories\" goals=\"next-0\"><p><em>Solution.</em> The simplest way to do it in one line is <span class=\"nowrap\"><code class=\"language-bash\">ls /bin</code>.</span></p><p><button class=\"next-step\">Continue</button></p></x-step>","goals":["next-0"],"keywords":[]},"step-mkdir":{"id":"step-mkdir","title":"Step Mkdir","html":"<x-step id=\"step-mkdir\" goals=\"next-0\"><p>The <code class=\"language-bash\">mkdir</code> command makes a new directory. So we can make a new directory, check that it's there, and navigate into it as follows:</p><pre bash-executable=\"bash-executable\">mkdir example-directory # won't return anything!</pre><pre bash-executable=\"bash-executable\">ls</pre><pre bash-executable=\"bash-executable\">cd example-directory # won't return anything!</pre><p><button class=\"next-step\">Continue</button></p></x-step>","goals":["next-0"],"keywords":[]},"tab-completion":{"id":"tab-completion","title":"Tab Completion","html":"<x-step id=\"tab-completion\" goals=\"blank-0 next-0\"><p>One extremely useful shortcut is to type an initial part of the file or directory name and hit the tab key to get the rest to pop up (note that this does not work in the cells above, but it will work on your own computer or on mybinder.org). You can also hit the tab key twice to get a list of possible completions. Using this tab completion feature is advised, for two reasons: (1) it saves typing time, and (2) it reduces spelling errors. If the shell is still completing directory names in your path as you type it, you can be sure that those directories are actually present in the operating system. If you insist on typing out the path in full, it takes significantly <x-blank-mc goal=\"blank-0\"><button class=\"choice\">longer</button><button class=\"choice\">less time</button></x-blank-mc> to catch mistakes.</p><p><button class=\"next-step\">Continue</button></p></x-step>","goals":["blank-0","next-0"],"keywords":[]},"bash-history-command":{"id":"bash-history-command","title":"Bash History Command","html":"<x-step id=\"bash-history-command\" goals=\"next-0\"><p>Another time-saving device is the use of the up and down arrow keys to access previously used commands. You can see a list of what you've run in the shell with the <code class=\"language-bash\">history</code> command.</p><p><button class=\"next-step\">Continue</button></p></x-step>","goals":["next-0"],"keywords":[]},"cursor-position":{"id":"cursor-position","title":"Cursor Position","html":"<x-step id=\"cursor-position\" goals=\"next-0\"><p>The position of the cursor in the shell cannot be controlled with your mouse or trackpad. Therefore, it is essential to master a few keyboard shortcuts to avoid having to press the forward and backward arrow keys dozens of times when you need to navigate the text at the prompt.</p><ul> <li><code class=\"language-bash\">ctrl-a</code> Move the cursor to the beginning of the line</li><li><code class=\"language-bash\">ctrl-e</code> Move the cursor to the end of the line</li><li><code class=\"language-bash\">ctrl-l</code> Clear the screen</li><li><code class=\"language-bash\">ctrl-c</code> Quit the command that is currently running</li><li><code class=\"language-bash\">alt-f</code> Move the cursor forward one word (<code class=\"language-bash\">esc-f</code> on macOS)</li><li><code class=\"language-bash\">alt-b</code> Move the cursor backward one word (<code class=\"language-bash\">esc-b</code> on macOS)</li></ul> <p><button class=\"next-step\">Continue</button></p></x-step>","goals":["next-0"],"keywords":[]},"bash-escape":{"id":"bash-escape","title":"Bash Escape","html":"<x-step id=\"bash-escape\" goals=\"next-0\"><p>Note that you can't directly use a space character in a Unix path name, because it would be interpreted by bash as an argument separator. To accommodate a file with a space in its name, <em>escape</em> the space by putting a backslash in front of it. For example, <code class=\"language-bash\">cd My&nbsp;Essays</code> changes directory into a folder called \"My Essays\".</p><p><button class=\"next-step\">Continue</button></p></x-step>","goals":["next-0"],"keywords":[]},"bash-other-important-commands":{"id":"bash-other-important-commands","title":"Bash Other Important Commands","html":"<x-step id=\"bash-other-important-commands\" goals=\"next-0\"><p>Here are some other important commands:</p><ul> <li><code class=\"language-bash\">mv</code> Move a file from one directory to another</li><li><code class=\"language-bash\">rm</code> Remove a file</li><li><code class=\"language-bash\">cp</code> Copy a file from one directory to another</li><li><code class=\"language-bash\">touch</code> Create a file or update its last-modified time</li><li><code class=\"language-bash\">open</code> Open a file (<code class=\"language-bash\">xdg-open</code> on Linux)</li><li><code class=\"language-bash\">cat</code> Print the contents of a file to the terminal</li><li><code class=\"language-bash\">less</code> View the contents of a file in a viewer</li><li><code class=\"language-bash\">man</code> Show the documentation for a command</li><li><code class=\"language-bash\">head</code> Print the first 10 lines of a file</li><li><code class=\"language-bash\">tail</code> Print the last 10 lines of a file</li><li><code class=\"language-bash\">wc</code> Count the number of words, lines, and characters in a file</li><li><code class=\"language-bash\">grep</code> Find specific text in file contents</li><li><code class=\"language-bash\">vim</code> Open an editor for making changes to a file</li></ul> <p><button class=\"next-step\">Continue</button></p></x-step>","goals":["next-0"],"keywords":[]},"bash-options":{"id":"bash-options","title":"Bash Options","html":"<x-step id=\"bash-options\" goals=\"quill\"><p>Many commands in bash take <x-gloss xid=\"bash-options\"><em>options</em></x-gloss> (analogous to keyword arguments in Python) which modify how they run. For example, <code class=\"language-bash\">rm -i</code> gives you an interactive session where you can say for each file whether you want to delete it. Some options can themselves take arguments, in which case those arguments are listed directly after the option. For example, <code class=\"language-bash\">head -n 20 data.txt</code> prints the first 20 lines of the file <span class=\"nowrap\"><code class=\"language-bash\">data.txt</code>.</span> You can read about the options a command takes by viewing its man page (for example, <code class=\"language-bash\">man head</code>).</p><div class=\"exercise\"> <p><strong>Exercise</strong><br>Navigate into the <code class=\"language-bash\">my-data-science-project</code> directory and the use the <code class=\"language-bash\">grep</code> command to figure out which file contains the text <span class=\"nowrap\"><code class=\"language-bash\">find_packages</code>.</span></p><p>Some helpful information: (i) <code class=\"language-bash\">grep -r text directory</code> searches recursively for <code class=\"language-bash\">text</code> in the <span class=\"nowrap\"><code class=\"language-bash\">directory</code>,</span> and (ii) <code class=\"language-bash\">.</code> is an alias for the current directory.</p></div> <pre bash-executable=\"bash-executable\"></pre><x-quill goal=\"quill\"></x-quill></x-step>","goals":["quill"],"keywords":[]},"step-grep-solution":{"id":"step-grep-solution","title":"Step Grep Solution","html":"<x-step id=\"step-grep-solution\" goals=\"next-0\"><p><em>Solution.</em> Running the commands below, we find that <code class=\"language-bash\">setup.py</code> contains the <code class=\"language-bash\">find_packages</code> function. </p><pre bash-executable=\"bash-executable\">cd my-data-science-project\ngrep -r find_packages .</pre><p><button class=\"next-step\">Continue</button></p></x-step>","goals":["next-0"],"keywords":[]},"vim":{"id":"vim","title":"Vim","html":"<x-step id=\"vim\" goals=\"next-0\"><h2>Vim</h2><p>Vim is the command line text editor which most consistently available on Unix systems. As a result, you will sometimes find yourself needing some basic familiarity with it, even if you use another editor for the bulk of your work. Furthermore, vim is designed to prioritize efficiency over intuitiveness, so it's really helpful to learn a few vim ideas <em>before</em> you need them. To practice with Vim, open this course's <a href=\"https://mybinder.org/v2/gh/sswatson/utilities-course/master\" target=\"_blank\">Binder page</a>, open a new Terminal (\"New\", top right), and run <span class=\"nowrap\"><code class=\"language-bash\">vim tmp.txt</code>.</span> Alternatively, you can run vim in your own Terminal if you have macOS or Linux, or you can download it for Windows.</p><p><button class=\"next-step\">Continue</button></p></x-step>","goals":["next-0"],"keywords":[]},"vim-modes":{"id":"vim-modes","title":"Vim Modes","html":"<x-step id=\"vim-modes\" goals=\"next-0\"><p>The most important distinction between vim and most other text editors is that it has multiple <strong>modes</strong>, the main ones being <em>insert</em> mode and <em>command</em> mode. Insert mode is similar to what other editors provide: keystrokes you type appear as characters in the file. Command mode is for performing various actions on the file.</p><p><button class=\"next-step\">Continue</button></p></x-step>","goals":["next-0"],"keywords":[]},"step-vim-navigating-modes":{"id":"step-vim-navigating-modes","title":"Step Vim Navigating Modes","html":"<x-step id=\"step-vim-navigating-modes\" goals=\"quill\"><p>A vim session often opens to command mode by default. To activate insert mode, press <span class=\"nowrap\"><code class=\"language-bash\">i</code>.</span> To get back to command mode, press the escape key. To save a file, type <code class=\"language-bash\">:w</code> while in command mode and press enter. To close the file, type <code class=\"language-bash\">:q</code> from command mode and press enter. To force-exit vim, type <code class=\"language-bash\">:q!</code> while in command mode and press enter.</p><p>To undo and redo, use <code class=\"language-bash\">u</code> and <span class=\"nowrap\"><code class=\"language-bash\">ctrl-r</code>.</span> Copy and paste are <code class=\"language-bash\">yy</code> and <code class=\"language-bash\">p</code>; Page up and page down are <code class=\"language-bash\">ctrl-u</code> and <span class=\"nowrap\"><code class=\"language-bash\">ctrl-d</code>.</span></p><div class=\"exercise\"> <p><strong>Exercise</strong><br>The single most important vim command is the one for force-exiting, because sometimes a vim editor opens automatically when you run some other command, and all you want to do is get out. If you are in insert mode, what key sequence must you enter to force-exit vim?</p></div> <x-quill goal=\"quill\"></x-quill></x-step>","goals":["quill"],"keywords":[]},"escape-vim-exercise":{"id":"escape-vim-exercise","title":"Escape Vim Exercise","html":"<x-step id=\"escape-vim-exercise\" goals=\"next-0\"><p><em>Solution.</em> The correct key sequence is <span class=\"nowrap\"><code class=\"language-bash\">[esc]:q!</code>:</span> the escape button switches to command mode, and then <code class=\"language-bash\">:q!</code> force-exits.</p><p><button class=\"next-step\">Continue</button></p></x-step>","goals":["next-0"],"keywords":[]},"variables":{"id":"variables","title":"Variables","html":"<x-step id=\"variables\" goals=\"next-0\"><h2>Variables</h2><p>Bash supports variable definition using similar syntax to Python. The main differences are (1) spaces <em>cannot</em> be used around the equals sign, and (2) variable names are conventionally all upper case. Another distinction from Python is that a dollar sign is required to access a variable's value:</p><pre bash-executable=\"bash-executable\">MY_FAVORITE_NUMBER=3\necho $MY_FAVORITE_NUMBER</pre><p>The command <code class=\"language-bash\">echo</code> simply prints its arguments.</p><p><button class=\"next-step\">Continue</button></p></x-step>","goals":["next-0"],"keywords":[]},"step-bash-special-variables":{"id":"step-bash-special-variables","title":"Step Bash Special Variables","html":"<x-step id=\"step-bash-special-variables\" goals=\"next-0\"><p>Some special variables are available in a bash session without you having to define them yourself. For example, if you run <span class=\"nowrap\"><code class=\"language-bash\">echo $PATH</code>,</span> you'll see a colon-separated list of directories. These are the directories where <code class=\"language-bash\">bash</code> searches for <x-gloss xid=\"executable\">executable</x-gloss> files when you run a command. You can see which executable is being run for a given command name using the <code class=\"language-bash\">which</code> command. For example <code class=\"language-bash\">which echo</code> prints <span class=\"nowrap\"><code class=\"language-bash\">/bin/echo</code>.</span> If you look in the <code class=\"language-bash\">/bin</code> directory, you'll see that many of the bash commands we've discussed so far are actually executables in that directory.</p><p><button class=\"next-step\">Continue</button></p></x-step>","goals":["next-0"],"keywords":[]},"step-bash-profile":{"id":"step-bash-profile","title":"Step Bash Profile","html":"<x-step id=\"step-bash-profile\" goals=\"blank-0 next-0\"><p>Utilities you install on your computer often make their <x-gloss xid=\"executable\">executables</x-gloss> available at the command line by modifying <span class=\"nowrap\"><code class=\"language-bash\">PATH</code>.</span> This is done by inserting a line of code in your <strong>bash profile</strong>, which is a file with a special name that is read by bash every time you start a bash session. For example, if you have a directory, say <span class=\"nowrap\"><code class=\"language-bash\">Users/jovyan/anaconda3/bin</code>,</span> which contains executables that you want to be able to run from the command line, you can add the line</p><pre bash-executable=\"bash-executable\">export PATH=\"/Users/jovyan/anaconda3/bin:$PATH\"</pre><p>to <code class=\"language-bash\">~/.bash_profile</code> (the <code class=\"language-bash\">~</code> refers to your <x-blank-mc goal=\"blank-0\"><button class=\"choice\">home directory</button><button class=\"choice\">root directory</button><button class=\"choice\">current directory</button></x-blank-mc>).</p><p><button class=\"next-step\">Continue</button></p></x-step>","goals":["blank-0","next-0"],"keywords":[]},"step-exporting-PATH":{"id":"step-exporting-PATH","title":"Step Exporting PATH","html":"<x-step id=\"step-exporting-PATH\" goals=\"next-0\"><p>In the command <span class=\"nowrap\"><code class=\"language-bash\">export PATH=\"/Users/jovyan/anaconda3/bin:$PATH\"</code>,</span> the dollar sign is used to access the original value of <code class=\"language-bash\">PATH</code> (so that you're adding to the set of <code class=\"language-bash\">PATH</code> directories, not replacing all of the ones that were stored in <code class=\"language-bash\">PATH</code> previously), and the <code class=\"language-bash\">export</code> command makes the new value of <code class=\"language-bash\">PATH</code> available to the bash session (rather than just the <code class=\"language-bash\">~/.bash_profile</code> script).</p><p>If you try to run a command and bash says <span class=\"nowrap\"><code class=\"language-bash\">command not found</code>,</span> one strong possibility is that the executable file that should run that command is \"not on your PATH\" (a phrase you will see often on StackOverflow!). The solution to this problem is to locate the executable's directory—usually by searching the internet to figure out where the installer puts the executable by default—and edit your <code class=\"language-bash\">~/.bash_profile</code> accordingly.</p><div class=\"exercise\"> <p><strong>Exercise</strong><br>Write a line of bash code that adds <code class=\"language-bash\">/Library/Frameworks/R.framework/Resources</code> to the <strong>end</strong> of <span class=\"nowrap\"><code class=\"language-bash\">PATH</code>,</span> so that directory is searched for executables <em>last</em> when a command is run in bash. Where should that line of code be placed?</p></div> <p><button class=\"next-step\">Continue</button></p></x-step>","goals":["next-0"],"keywords":[]},"path-exercise":{"id":"path-exercise","title":"Path Exercise","html":"<x-step id=\"path-exercise\" goals=\"next-0\"><p><em>Solution.</em> The appropriate bash command is <span class=\"nowrap\"><code class=\"language-bash\">export PATH=\"$PATH:/Library/Frameworks/R.framework\"</code>,</span> and it should go in <span class=\"nowrap\"><code class=\"language-bash\">~/.bash_profile</code>.</span></p><p><button class=\"next-step\">Continue</button></p></x-step>","goals":["next-0"],"keywords":[]},"piping":{"id":"piping","title":"Piping","html":"<x-step id=\"piping\" goals=\"next-0\"><h2>Piping</h2><p>The output of a command like <span class=\"nowrap\"><code class=\"language-bash\">echo $PATH</code>,</span> which prints to the screen by default, may be redirected to a file using the operators <code class=\"language-bash\">&gt;</code> or <code class=\"language-bash\">&gt;&gt;</code> or fed as input to another bash command on the same line using the <strong>pipe</strong> operator <span class=\"nowrap\"><code class=\"language-bash\">|</code>.</span> The use of such operators in Unix is called <em>piping</em>, and it's a key element of bash's design.</p><p><button class=\"next-step\">Continue</button></p></x-step>","goals":["next-0"],"keywords":[]},"step-difference-between-file-operators":{"id":"step-difference-between-file-operators","title":"Step Difference Between File Operators","html":"<x-step id=\"step-difference-between-file-operators\" goals=\"blank-0\"><p>The difference between <code class=\"language-bash\">&gt;</code> and <code class=\"language-bash\">&gt;&gt;</code> is that the former eliminates whatever might have been in the file previously, and the latter appends to the end of the target file's current contents.</p><p>For example, <code class=\"language-bash\">tmp.txt</code> will contain two lines of text after these two commands are run:</p><pre bash-executable=\"bash-executable\">echo \"This is the first line\" &gt; tmp.txt\necho \"This is the second line\" &gt;&gt; tmp.txt</pre><p>You can check that this worked as expected by running <span class=\"nowrap\"><x-blank-mc goal=\"blank-0\"><button class=\"choice\"><code class=\"language-bash\">cat tmp.txt</code></button><button class=\"choice\"><code class=\"language-bash\">touch tmp.txt</code></button><button class=\"choice\"><code class=\"language-bash\">ls tmp.txt</code></button></x-blank-mc>:</span></p><pre bash-executable=\"bash-executable\"></pre></x-step>","goals":["blank-0"],"keywords":[]},"piping-2":{"id":"piping-2","title":"Piping  ","html":"<x-step id=\"piping-2\" goals=\"quill\"><p>The pipe operator is the mechanism for <em>composing</em> commands in Unix. For example,</p><pre bash-executable=\"bash-executable\">echo \"The quick brown fox jumped over the lazy dog\" | wc</pre><p>forwards the text returned by the first command to the <code class=\"language-bash\">wc</code> command, thereby counting the number of lines, words, and characters in the sentence <span class=\"nowrap\"><code class=\"language-bash\">\"The quick brown fox jumped over the lazy dog\"</code>.</span></p><div class=\"exercise\"> <p><strong>Exercise</strong><br>Write a three-command pipe, using <span class=\"nowrap\"><code class=\"language-bash\">cat</code>,</span> <code class=\"language-bash\">head</code> and <span class=\"nowrap\"><code class=\"language-bash\">tail</code>,</span> prints the portion of a document <code class=\"language-bash\">mydoc.txt</code> between lines 100 and 110.</p></div> <pre bash-executable=\"bash-executable\"></pre><x-quill goal=\"quill\"></x-quill></x-step>","goals":["quill"],"keywords":[]},"pipe-sol-1":{"id":"pipe-sol-1","title":"Pipe Sol  ","html":"<x-step id=\"pipe-sol-1\" goals=\"next-0\"><p><em>Solution.</em> If we select the first 110 lines, then the desired lines are the last 11 lines of that selection. So we can do</p><pre bash-executable=\"bash-executable\">cat mydoc.txt | head -n 110 | tail -n 11</pre><p><button class=\"next-step\">Continue</button></p></x-step>","goals":["next-0"],"keywords":[]},"glob-patterns":{"id":"glob-patterns","title":"Glob Patterns","html":"<x-step id=\"glob-patterns\" goals=\"picker-0 picker-2\"><h2>Glob Patterns</h2><p>Performing actions on a single file at a time can get pretty time-consuming if there are many files involved. Consider, for example, a directory with 1000 images files, one for each frame of a short video. Suppose the images are named <span class=\"nowrap\"><code class=\"language-bash\">img000.png</code>,</span> <span class=\"nowrap\"><code class=\"language-bash\">img001.png</code>,</span> and so on. If you want to move all of these files into a subdirectory called <span class=\"nowrap\"><code class=\"language-bash\">frames</code>,</span> you can do the third and fourth lines of this block:</p><pre bash-executable=\"bash-executable\">touch img000.png # make sure there are actually\ntouch img001.png # image files to move\nmkdir frames\nmv img*.png frames/</pre><p>The asterisk in the file name is telling the command to act on every file whose name looks like <span class=\"nowrap\"><code class=\"language-bash\">img</code>,</span> followed by any number of other characters, followed by <code class=\"language-bash\">.png</code>\". We call <code class=\"language-bash\">img*.png</code> a <strong>glob</strong> pattern (short for <em>global</em>). The asterisk is a <strong>wild card</strong>. The other common wildcards are <span class=\"nowrap\"><code class=\"language-bash\">?</code>,</span> which matches any <em>single</em> character, and expressions like <code class=\"language-bash\">[a-e]</code> which match any single character in a given range of characters. You can also list out the characters to match: <code class=\"language-bash\">[aeiou]</code> matches any lowercase vowel.</p><div class=\"exercise\"> <p><strong>Exercise</strong><br>Which of the following names match the glob pattern <span class=\"nowrap\"><code class=\"language-bash\">[aA]nswer.*</code>?</span></p><x-picker class=\"list\" goal=\"picker\"><div class=\"item pill bblue\"><code class=\"language-bash\">answer.1.txt</code></div><div class=\"item pill bblue\" data-error=\"incorrect\"><code class=\"language-bash\">my-answer.py</code></div><div class=\"item pill bblue\"><code class=\"language-bash\">Answer.tex</code></div></x-picker></div> </x-step>","goals":["picker-0","picker-2"],"keywords":[]},"glob-exercise-solution":{"id":"glob-exercise-solution","title":"Glob Exercise Solution","html":"<x-step id=\"glob-exercise-solution\" goals=\"\"><p><em>Solution.</em> The first and third options match. The second one doesn't because the pattern specifies that the first character must be uppercase or lowercase <span class=\"nowrap\"><code class=\"language-bash\">a</code>.</span></p></x-step>","goals":[],"keywords":[]},"git":{"id":"git","title":"Git","html":"<x-step id=\"git\" goals=\"next-0\"><p>Managing your files by simply saving them in folders on a hard drive runs afoul of some core concerns of anyone working on a computer for a living:</p><ol> <li><strong>Preserving your work</strong>. It's easy to accidentally overwrite a file containing significant amounts of work. Depending on how much work is lost, this can be devastating. Pixar, for example, deleted nearly all of <em>Toy Story 2</em> when an errant <code class=\"language-bash\">rm -r -f *</code> command was executed (the <code class=\"language-bash\">-r</code> and <code class=\"language-bash\">-f</code> flags mean \"recursive\" and \"force\", respectively). They were saved by the Supervising Technical Director, who had made a copy of the file tree so she could work from home after giving birth to her son.</li></ol> <p><button class=\"next-step\">Continue</button></p></x-step>","goals":["next-0"],"keywords":[]},"step-tracking-history":{"id":"step-tracking-history","title":"Step Tracking History","html":"<x-step id=\"step-tracking-history\" goals=\"next-0\"><ol start=\"2\"> <li><strong>Tracking history</strong>. If you have a way to know what you did and when you did it, you can perform more dynamic operations on your content. For example, suppose you recently made two rounds of edits on a document, and you decide that the first round should be discarded, because the circumstances that motivated those edits has changed. If you have a way to isolate the first-round edits, it's possible you'll be able to do that in an automated way. Otherwise, you'll have to do it manually.</li></ol> <p><button class=\"next-step\">Continue</button></p></x-step>","goals":["next-0"],"keywords":[]},"step-managing-version":{"id":"step-managing-version","title":"Step Managing Version","html":"<x-step id=\"step-managing-version\" goals=\"next-0\"><ol start=\"3\"> <li><strong>Managing versions</strong>. Slightly different use cases often require you to maintain different versions of a given codebase. For example, clients might have different requirements that require custom modifications. If you choose to maintain these versions in separate directories, you have to deal with transferring any changes to the common part of the codebase to all of the different copies. This quickly becomes a major maintenance headache.</li></ol> <p><button class=\"next-step\">Continue</button></p></x-step>","goals":["next-0"],"keywords":[]},"step-facilitating-teamwork":{"id":"step-facilitating-teamwork","title":"Step Facilitating Teamwork","html":"<x-step id=\"step-facilitating-teamwork\" goals=\"next-0\"><ol start=\"4\"> <li><strong>Facilitating teamwork</strong>. Each team member should have maximum flexibility to work on a project and have that work reflected in their teammates' copies of the project. Some care must be taken to achieve this, because if two people make changes to the same file at the same time, their new versions must be merged.</li></ol> <p><button class=\"next-step\">Continue</button></p></x-step>","goals":["next-0"],"keywords":[]},"step-version-control":{"id":"step-version-control","title":"Step Version Control","html":"<x-step id=\"step-version-control\" goals=\"next-0\"><p>Software designed to address these concerns is called <strong>version control</strong>. We will be working with a specific version control system called <code class=\"language-bash\">git</code> which was created by <x-gloss xid=\"linus\">Linus Torvalds</x-gloss> in 2005 and has since grabbed a plurality of the version control market share among software developers.</p><p><button class=\"next-step\">Continue</button></p></x-step>","goals":["next-0"],"keywords":[]},"git-concepts":{"id":"git-concepts","title":"Git Concepts","html":"<x-step id=\"git-concepts\" goals=\"blank-0 next-0\"><h2>Git main concepts</h2><p>Git keeps a record, called a <strong>repository</strong>, of the history and versions of the contents of a particular directory (including its subdirectories, their subdirectories, and so on). The typical setup is to create a single directory for all of the files relevant to a given project and initialize a repository in <span class=\"nowrap\"><x-blank-mc goal=\"blank-0\"><button class=\"choice\">that directory</button><button class=\"choice\">your home directory</button></x-blank-mc>.</span></p><p><button class=\"next-step\">Continue</button></p></x-step>","goals":["blank-0","next-0"],"keywords":[]},"step-dot-git":{"id":"step-dot-git","title":"Step Dot Git","html":"<x-step id=\"step-dot-git\" goals=\"next-0\"><p>Git uses two components to manage a repository in a given directory: a command-line program called <code class=\"language-bash\">git</code> and a <x-gloss xid=\"hidden-directory\">hidden subdirectory</x-gloss> called <span class=\"nowrap\"><code class=\"language-bash\">.git</code>.</span> Commands are issued to <code class=\"language-bash\">git</code> to manipulate the contents of <span class=\"nowrap\"><code class=\"language-bash\">.git</code>.</span></p><p><button class=\"next-step\">Continue</button></p></x-step>","goals":["next-0"],"keywords":[]},"step-git-vs-drive":{"id":"step-git-vs-drive","title":"Step Git Vs Drive","html":"<x-step id=\"step-git-vs-drive\" goals=\"next-0\"><p>Unlike syncing services like Dropbox or Google Drive, Git doesn't do anything automatically. All interactions are deliberate. This is helpful, because it means that changes made by a colleague won't be uninvitedly pushed to your machine where they might break your environment.</p><p><button class=\"next-step\">Continue</button></p></x-step>","goals":["next-0"],"keywords":[]},"step-git-concepts":{"id":"step-git-concepts","title":"Step Git Concepts","html":"<x-step id=\"step-git-concepts\" goals=\"blank-0 blank-1 blank-2 blank-3 next-0\"><p>Conceptually, a git repository consists a collection of complete snapshots of the directory contents. These snapshots are called <strong>commits</strong>. The commit immediately preceding a given commit is called its <strong>parent</strong>. Commits and parent-child relationships between commits are the fundamental constructs of a Git repository.</p><p><button class=\"next-step\">Continue</button></p><div class=\"exercise\"> <p><strong>Exercise</strong> </p><ol> <li>The name of the hidden subdirectory containing the files Git uses to maintain a repository is <span class=\"nowrap\"><x-blank solution=\".git\" goal=\"blank-0\"></x-blank>.</span></li><li>Git keeps your folder synced to the cloud at all times <span class=\"nowrap\"><x-blank-mc goal=\"blank-1\"><button class=\"choice\">False</button><button class=\"choice\">True</button></x-blank-mc>.</span></li><li>Commits in a Git repository are organized using parent-child relationships between commits <span class=\"nowrap\"><x-blank-mc goal=\"blank-2\"><button class=\"choice\">True</button><button class=\"choice\">False</button></x-blank-mc>.</span></li><li>A commit corresponds most closely to a <span class=\"nowrap\"><x-blank-mc goal=\"blank-3\"><button class=\"choice\">directory state</button><button class=\"choice\">difference between two directory states</button></x-blank-mc>.</span></li></ol> </div> </x-step>","goals":["blank-0","blank-1","blank-2","blank-3","next-0"],"keywords":[]},"step-git-zones":{"id":"step-git-zones","title":"Step Git Zones","html":"<x-step id=\"step-git-zones\" goals=\"next-0\"><p>Changes in a Git project migrate through a series of zones. When you make changes in your directory, Git initially knows nothing about them. You <strong>stage</strong> your changes to a staging area, then <strong>commit</strong> them to the repository. A project involving multiple contributors typically has a remote copy of the repository on a website like GitHub. When you are ready for your colleagues to get your changes, you <strong>push</strong> your local repository to the remote repository.</p><figure><img src=\"/content/data-science-utilities/images/git-sections.svg\" alt=\"\"><p class=\"caption\">Changes in a Git project are staged, committed, and pushed to a remote repository.</p></figure><p><button class=\"next-step\">Continue</button></p></x-step>","goals":["next-0"],"keywords":[]},"step-why-git-so-many-zones":{"id":"step-why-git-so-many-zones","title":"Step Why Git So Many Zones","html":"<x-step id=\"step-why-git-so-many-zones\" goals=\"next-0\"><p>Why does Git have so many zones? The staging area is necessary to help you distinguish files you want Git to track from files you don't want Git to track, and to provide an area to prepare for a well-organized commit. Having both local and remote copies of the repository allows you to make commits even when you don't have network access. Although this workflow might seem at first to be overly complicated, its benefits for flexibility and organization are often regarded as a positive distinguishing feature of Git (as compared to version control systems with fewer such zones).</p><p><button class=\"next-step\">Continue</button></p></x-step>","goals":["next-0"],"keywords":[]},"git-zone-exercises":{"id":"git-zone-exercises","title":"Git Zone Exercises","html":"<x-step id=\"git-zone-exercises\" goals=\"blank-0 blank-1 next-0\"><div class=\"exercise\"> <p><strong>Exercise</strong> </p><ol> <li>Removing changes that have been prepared to be included in the next commit is called <x-blank-mc goal=\"blank-0\"><button class=\"choice\">unstaging</button><button class=\"choice\">uncommiting</button><button class=\"choice\">unpushing</button></x-blank-mc> those changes.</li><li>In a typical Git project with 4 zones, <x-blank solution=\"3\" goal=\"blank-1\"></x-blank> of them are stored on your computer (as opposed to the cloud).</li></ol> </div> <p><button class=\"next-step\">Continue</button></p><h2>Branches</h2></x-step>","goals":["blank-0","blank-1","next-0"],"keywords":[]},"git-branches":{"id":"git-branches","title":"Git Branches","html":"<x-step id=\"git-branches\" goals=\"\"><p>Suppose that you and a colleague begin working on different parts of a project at the same time. The commits you make and the commits they make might share a parent (namely, the latest commit at the time when you begin working). If we visualize the set of commits as a graph, this corresponds to a split in the graph.</p><figure><img src=\"/content/data-science-utilities/images/git-split-1.svg\" alt=\"\"><p class=\"caption\">A fork in the commit graph.</p></figure><p>You can maintain these two separate lines of development in the same repository by labeling them as new <strong>branches</strong>, as illustrated in the figure above. The most common convention is to have a main branch called <code class=\"language-md\">master</code> and label other branches descriptively. A branch is a pointer to a particular commit. When a commit is added to a given branch, the pointer moves to the new commit:</p><figure><img src=\"/content/data-science-utilities/images/git-split-2.svg\" alt=\"\"><p class=\"caption\">A branch is a pointer to the latest commit in a given line of development. When a commit as added to a branch, the pointer moves to that new commit.</p></figure></x-step>","goals":[],"keywords":[]},"git-branch-pointer-exercise":{"id":"git-branch-pointer-exercise","title":"Git Branch Pointer Exercise","html":"<x-step id=\"git-branch-pointer-exercise\" goals=\"blank-0 next-0\"><div class=\"exercise\"> <p><strong>Exercise</strong><br>A branch is a <span class=\"nowrap\"><x-blank-mc goal=\"blank-0\"><button class=\"choice\">pointer to a commit</button><button class=\"choice\">a sequence of commits</button></x-blank-mc>.</span></p></div> <p><button class=\"next-step\">Continue</button></p></x-step>","goals":["blank-0","next-0"],"keywords":[]},"step-git-ff-merge":{"id":"step-git-ff-merge","title":"Step Git Ff Merge","html":"<x-step id=\"step-git-ff-merge\" goals=\"next-0\"><p>Typically you will want to <strong>merge</strong> the changes from your branch back into master. In the example above, the <code class=\"language-md\">mybranch</code> commit is a descendant of the <code class=\"language-md\">master</code> commit. In this case, there is no potential for conflicts, and the merge can be performed by simplying pointing <code class=\"language-md\">master</code> to the same commit as <span class=\"nowrap\"><code class=\"language-md\">mybranch</code>.</span> This is called a <strong>fast-forward</strong> merge. After merging, it's safe to delete the <code class=\"language-md\">mybranch</code> pointer.</p><figure><img src=\"/content/data-science-utilities/images/git-split-ff.svg\" alt=\"\"><p class=\"caption\">If no commits have been added to <code class=\"language-md\">master</code>, the changes in <code class=\"language-md\">mybranch</code> can be merged into master by simplying moving the <code class=\"language-md\">master</code> pointer forward. This is called a <strong>fast-forward</strong> merge.</p></figure><p><button class=\"next-step\">Continue</button></p></x-step>","goals":["next-0"],"keywords":[]},"step-git-merge":{"id":"step-git-merge","title":"Step Git Merge","html":"<x-step id=\"step-git-merge\" goals=\"next-0\"><p>After your branch is merged into master, your colleague wants to merge their branch as well. If you edited the same parts of the same files as your colleague, a decision will have to be made about what version of those sections to incorporate into master. Git handles this by putting markings in the file which look like:</p><pre class=\"language-markup\"><code>&lt;&lt;&lt;&lt;&lt;&lt;&lt; master\nThe quick brown fox jumped over the lazy dog\n=======\nThe brown fox jumped over the quick lazy dog\n&gt;&gt;&gt;&gt;&gt;&gt;&gt; mybranch</code></pre><p>Your colleague will have to locate and remove these conflict markers one-by-one, and then stage and commit the resulting files. This commit will have <em>two</em> parents, indicating the two commits which were merged.</p><figure><img src=\"/content/data-science-utilities/images/git-split-merge.svg\" alt=\"\"><p class=\"caption\">If two branches have diverged, then changes from one branch (<code class=\"language-md\">theirbranch</code>) can be merged into the other (<code class=\"language-md\">master</code>). The result is a new <em>merge commit</em>.</p></figure><p>We will discuss the commands for performing these operations in the <em>Core Git workflow</em> section below.</p><p><button class=\"next-step\">Continue</button></p></x-step>","goals":["next-0"],"keywords":[]},"step-git-ff-exercise":{"id":"step-git-ff-exercise","title":"Step Git Ff Exercise","html":"<x-step id=\"step-git-ff-exercise\" goals=\"blank-0 next-0\"><div class=\"exercise\"> <p><strong>Exercise</strong><br>Suppose that you make a copy of a popular repository on GitHub (called a <em>fork</em>), and you spend a couple of months working on a new feature in a new branch you create. If you propose to merge your new branch back into the master branch of the project (this is called a <em>pull request</em>), it's likely that the merge <x-blank-mc goal=\"blank-0\"><button class=\"choice\">will not</button><button class=\"choice\">will</button></x-blank-mc> be a fast-forward merge.</p></div> <p><button class=\"next-step\">Continue</button></p></x-step>","goals":["blank-0","next-0"],"keywords":[]},"configuring-git":{"id":"configuring-git","title":"Configuring Git","html":"<x-step id=\"configuring-git\" goals=\"next-0\"><h2>Configuring Git</h2><p>When you first set up Git on your machine, there are a few configuration steps you want to take. The first is to let Git know about your name and email address.</p><pre bash-executable=\"bash-executable\">git config --global user.name \"Jane Doe\"\ngit config --global user.email \"jdoe@gmail.com\"</pre><p>You might also want to turn on colors:</p><pre bash-executable=\"bash-executable\">git config --global color.ui true</pre><p><button class=\"next-step\">Continue</button></p></x-step>","goals":["next-0"],"keywords":[]},"core-git-workflow":{"id":"core-git-workflow","title":"Core Git Workflow","html":"<x-step id=\"core-git-workflow\" goals=\"next-0\"><h2>Core Git workflow</h2><p>In this section, we'll work through all of the commands necessary to carry out the most common Git operations. We'll begin by creating a directory and initializing a Git repository inside it.</p><pre bash-executable=\"bash-executable\">mkdir our-novel\ncd our-novel\ngit init\nls -a</pre><p>We can see that <code class=\"language-bash\">git init</code> did create a <code class=\"language-md\">.git</code> directory. The other way to get a Git repository is to <x-gloss xid=\"git-clone\">clone</x-gloss> one from a website like GitHub.</p><p><button class=\"next-step\">Continue</button></p></x-step>","goals":["next-0"],"keywords":[]},"step-git-initial-commit":{"id":"step-git-initial-commit","title":"Step Git Initial Commit","html":"<x-step id=\"step-git-initial-commit\" goals=\"next-0\"><p>Next, let's create a file for our initial commit. The git command for staging a file is <span class=\"nowrap\"><code class=\"language-bash\">git add</code>.</span> The <code class=\"language-bash\">--all</code> option stages all of the files in the current working directory.</p><pre bash-executable=\"bash-executable\">echo 'Once upon a time,' &gt; chapter-1.txt\ngit add chapter-1.txt # or git add --all</pre><p><button class=\"next-step\">Continue</button></p></x-step>","goals":["next-0"],"keywords":[]},"step-git-status":{"id":"step-git-status","title":"Step Git Status","html":"<x-step id=\"step-git-status\" goals=\"next-0\"><p>We can inspect the status of our working directory and repository using <span class=\"nowrap\"><code class=\"language-bash\">git status</code>.</span></p><pre bash-executable=\"bash-executable\">git status</pre><p>The contents of the staging area are indented under the heading <span class=\"nowrap\"><code class=\"language-bash\">Changes to be committed</code>.</span></p><p><button class=\"next-step\">Continue</button></p></x-step>","goals":["next-0"],"keywords":[]},"step-git-commit-message":{"id":"step-git-commit-message","title":"Step Git Commit Message","html":"<x-step id=\"step-git-commit-message\" goals=\"next-0\"><p>Now we can commit the staged changes, including a descriptive <strong>commit message</strong> with <span class=\"nowrap\"><code class=\"language-bash\">-m</code>:</span></p><pre bash-executable=\"bash-executable\">git commit -m 'Initial commit'</pre><p>We can display a record of commits using <span class=\"nowrap\"><code class=\"language-bash\">git log</code>.</span></p><pre bash-executable=\"bash-executable\">git log</pre><p><button class=\"next-step\">Continue</button></p></x-step>","goals":["next-0"],"keywords":[]},"step-long-hex-string":{"id":"step-long-hex-string","title":"Step Long Hex String","html":"<x-step id=\"step-long-hex-string\" goals=\"next-0\"><p>You'll notice that commits are identified by a long hexadecimal string like <span class=\"nowrap\"><code class=\"language-md\">d9599305d257a40c0b394a1af78dfe995f0010c7</code>.</span> This string is a <x-gloss xid=\"hash\">hash</x-gloss> of all of the data relevant to the commit. The name <code class=\"language-bash\">HEAD</code> is a pointer to the branch you're currently on, so <code class=\"language-bash\">HEAD -&gt; master</code> indicates that the <code class=\"language-bash\">master</code> branch is the currently <strong>checked out</strong> branch.</p><p><button class=\"next-step\">Continue</button></p></x-step>","goals":["next-0"],"keywords":[]},"git-lol":{"id":"git-lol","title":"Git Lol","html":"<x-step id=\"git-lol\" goals=\"next-0\"><p>The output of the <code class=\"language-bash\">git log</code> command is more helpful with a few of its options set to a non-default state. Let's go ahead and make a git alias so we don't have to type all of these options out every time. We'll use the name <span class=\"nowrap\"><code class=\"language-bash\">lol</code>,</span> which is a customary choice for this alias.</p><pre bash-executable=\"bash-executable\">git config --global alias.lol \"log --graph --decorate --all --oneline\"\ngit lol</pre><p><button class=\"next-step\">Continue</button></p></x-step>","goals":["next-0"],"keywords":[]},"step-git-create-GitHub":{"id":"step-git-create-GitHub","title":"Step Git Create GitHub","html":"<x-step id=\"step-git-create-GitHub\" goals=\"next-0\"><p>Finally, if we want to store a copy of the repository on GitHub, we visit github.com and create a new repository. Then we connect our local Git repository to the remote one we just created.</p><pre bash-executable=\"bash-executable\">git remote add origin git@github.com:jovyan/MyRepo.git\ngit push --set-upstream origin master</pre><p>where <code class=\"language-bash\">jovyan</code> is replaced by your actual GitHub name, and <code class=\"language-bash\">MyRepo</code> is replaced by your repository's name. The first line makes the connection to the remote repository and names it <span class=\"nowrap\"><code class=\"language-bash\">origin</code>,</span> while the second line sets the default remote repository to <code class=\"language-bash\">origin</code> and pushes to GitHub. Note that the <code class=\"language-bash\">--set-upstream origin master</code> part is only necessary on the first push; subsequent pushes can be done with <span class=\"nowrap\"><code class=\"language-bash\">git push</code>.</span></p><p><button class=\"next-step\">Continue</button></p></x-step>","goals":["next-0"],"keywords":[]},"step-git-pull-habit":{"id":"step-git-pull-habit","title":"Step Git Pull Habit","html":"<x-step id=\"step-git-pull-habit\" goals=\"next-0\"><p>It's a good habit to begin each work session by running <code class=\"language-bash\">git pull</code> to fetch any changes that have been pushed by collaborators to the remote repository and merge those changes into your working directory. This operation aborts if you have changes in your working directory that conflict with the changes from the remote repository. One good way to resolve this issue is to <code class=\"language-bash\">stash</code> your local changes and then <code class=\"language-bash\">apply</code> them after you <span class=\"nowrap\"><code class=\"language-bash\">pull</code>.</span></p><pre bash-executable=\"bash-executable\">git stash\ngit pull\ngit stash apply</pre><p>The command <code class=\"language-bash\">git stash</code> creates a new commit which is not on any branch, and <code class=\"language-bash\">git stash apply</code> merges the latest stash into the current branch.</p><p><button class=\"next-step\">Continue</button></p></x-step>","goals":["next-0"],"keywords":[]},"command-exercises":{"id":"command-exercises","title":"Command Exercises","html":"<x-step id=\"command-exercises\" goals=\"blank-0 blank-1 blank-2 blank-3 blank-4 next-0\"><div class=\"exercise\"> <p><strong>Exercise</strong> </p><ol> <li>The command for initializing a new Git repository is <span class=\"nowrap\"><x-blank solution=\"git init\" goal=\"blank-0\"></x-blank>.</span></li><li>The command for checking which files are staged is <span class=\"nowrap\"><x-blank solution=\"git status\" goal=\"blank-1\"></x-blank>.</span></li><li>The command for staging a file is <x-blank solution=\"git add\" goal=\"blank-2\"></x-blank></li><li>The command for committing is <x-blank solution=\"git commit\" goal=\"blank-3\"></x-blank></li><li>The command for showing a decorated history of commits is <x-blank solution=\"git lol\" goal=\"blank-4\"></x-blank></li></ol> </div> <p><button class=\"next-step\">Continue</button></p></x-step>","goals":["blank-0","blank-1","blank-2","blank-3","blank-4","next-0"],"keywords":[]},"git-branching-commands":{"id":"git-branching-commands","title":"Git Branching Commands","html":"<x-step id=\"git-branching-commands\" goals=\"next-0\"><h2>Git Branching Commands</h2><p>Suppose we want to experiment with dragons in the novel's storyline. We can make a new branch called <code class=\"language-bash\">dragons</code> for working on this idea.</p><pre bash-executable=\"bash-executable\">git branch dragons\ngit lol</pre><p>We've created a new branch called <span class=\"nowrap\"><code class=\"language-bash\">dragons</code>,</span> but we still have the <code class=\"language-bash\">master</code> branch checked out (you can tell because <code class=\"language-bash\">HEAD</code> still points to <code class=\"language-bash\">master</code>). Let's switch to the new branch:</p><pre bash-executable=\"bash-executable\">git checkout dragons\ngit lol</pre><p><button class=\"next-step\">Continue</button></p></x-step>","goals":["next-0"],"keywords":[]},"step-add-content-new-branch":{"id":"step-add-content-new-branch","title":"Step Add Content New Branch","html":"<x-step id=\"step-add-content-new-branch\" goals=\"blank-0\"><p>We can now add some dragon content and commit it:</p><pre bash-executable=\"bash-executable\">echo '\\n\\nthere be dragons!' &gt;&gt; chapter-1.txt\ngit add chapter-1.txt\ngit commit -m 'Add some dragons'</pre><p>Now let's switch back to the master branch and commit some different changes:</p><pre bash-executable=\"bash-executable\">git checkout master\necho '\\n\\nin a galaxy far away' &gt;&gt; chapter-1.txt\ngit add chapter-1.txt\ngit commit -m 'Write another line'\ngit lol</pre><p>Suppose we decide we do want to incorporate the dragons into the story. We want to <x-blank solution=\"merge\" goal=\"blank-0\"></x-blank> the dragon branch into master.</p></x-step>","goals":["blank-0"],"keywords":[]},"git-merge-dragons":{"id":"git-merge-dragons","title":"Git Merge Dragons","html":"<x-step id=\"git-merge-dragons\" goals=\"next-0\"><p>While we have the master branch checked out, we do</p><pre bash-executable=\"bash-executable\">git merge dragons</pre><p>Git tells us that this merge led to conflicts, and we'll have to resolve them before making merge commits. Let's look at the new contents of <span class=\"nowrap\"><code class=\"language-bash\">chapter-1.txt</code>:</span></p><pre bash-executable=\"bash-executable\">cat chapter-1.txt</pre><p><button class=\"next-step\">Continue</button></p></x-step>","goals":["next-0"],"keywords":[]},"echo-merge-dragons":{"id":"echo-merge-dragons","title":"Echo Merge Dragons","html":"<x-step id=\"echo-merge-dragons\" goals=\"next-0\"><p>The next step is to edit the file and commit it. Typically you would edit the file in a text editor (we'll see a particularly good way to do it later in this course when we cover VS Code), but here we'll just use <span class=\"nowrap\"><code class=\"language-bash\">echo</code>.</span></p><pre bash-executable=\"bash-executable\">echo 'Once upon a time..., in a galaxy far away..., there be dragons!' &gt; chapter-1.txt\ngit commit -m \"Merge the dragons into the story\"\ngit lol</pre><p>Now we can delete the <code class=\"language-bash\">dragons</code> branch. Since branches are just pointers to commits, this operation does not result in the loss of any snapshots in our project history.</p><pre bash-executable=\"bash-executable\">git branch -d dragons</pre><p><button class=\"next-step\">Continue</button></p></x-step>","goals":["next-0"],"keywords":[]},"step-git-merge-command-exercise":{"id":"step-git-merge-command-exercise","title":"Step Git Merge Command Exercise","html":"<x-step id=\"step-git-merge-command-exercise\" goals=\"quill\"><div class=\"exercise\"> <p><strong>Exercise</strong><br>Write a sequence of Git commands to create two new branches, one with dragons in the story and one with wizards in the story. Commit a change to each branch, then merge the wizard branch into the dragons branch, and finally merge the dragons branch into <span class=\"nowrap\"><code class=\"language-bash\">master</code>.</span> Use <code class=\"language-bash\">git lol</code> to confirm that your repository log reflects the wizards to dragons to master merging sequence.</p></div> <pre bash-executable=\"bash-executable\"></pre><x-quill goal=\"quill\"></x-quill></x-step>","goals":["quill"],"keywords":[]},"undoing-changes":{"id":"undoing-changes","title":"Undoing Changes","html":"<x-step id=\"undoing-changes\" goals=\"next-0\"><h2>Undoing changes</h2><p>Suppose you want to have a look at the state of your novel one commit ago. You refer to the commit which is any number of commits back using a tilde followed by the desired number of commits, as in <span class=\"nowrap\"><code class=\"language-bash\">HEAD~1</code>.</span> The <code class=\"language-bash\">git show</code> command lets us extract a single file from a given commit:</p><pre bash-executable=\"bash-executable\">git show HEAD~1:chapter-1.txt</pre><p><button class=\"next-step\">Continue</button></p></x-step>","goals":["next-0"],"keywords":[]},"step-alternative-git-show":{"id":"step-alternative-git-show","title":"Step Alternative Git Show","html":"<x-step id=\"step-alternative-git-show\" goals=\"next-0\"><p>Alternatively, you can refer to a particular commit by a distinguishing initial segment of its hash (note that you'll have to <code class=\"language-bash\">git lol</code> to get an appropriate commit identifier for your session before you can run this cell):</p><pre bash-executable=\"bash-executable\">git show 06d23b9:chapter-1.txt</pre><p><button class=\"next-step\">Continue</button></p></x-step>","goals":["next-0"],"keywords":[]},"step-git-diff":{"id":"step-git-diff","title":"Step Git Diff","html":"<x-step id=\"step-git-diff\" goals=\"next-0\"><p>We can see just the changes between two commits with a <span class=\"nowrap\"><code class=\"language-bash\">diff</code>:</span></p><pre bash-executable=\"bash-executable\">git diff HEAD HEAD~1 chapter-1.txt</pre><p><button class=\"next-step\">Continue</button></p></x-step>","goals":["next-0"],"keywords":[]},"step-checkout-single-file":{"id":"step-checkout-single-file","title":"Step Checkout Single File","html":"<x-step id=\"step-checkout-single-file\" goals=\"next-0\"><p>Let's say you decide you want to go back to the version of a file two commits ago. You can <code class=\"language-bash\">checkout</code> a single file.</p><pre bash-executable=\"bash-executable\">git checkout HEAD~2 chapter-1.txt\ngit status</pre><p>This operation changes the file in the local working directory. You can then stage and commit that change, or edit the file further and then stage and commit.</p><p><button class=\"next-step\">Continue</button></p></x-step>","goals":["next-0"],"keywords":[]},"step-git-checkout-file-exercise":{"id":"step-git-checkout-file-exercise","title":"Step Git Checkout File Exercise","html":"<x-step id=\"step-git-checkout-file-exercise\" goals=\"quill\"><div class=\"exercise\"> <p><strong>Exercise</strong><br>Write a Git command to replace the contents of <code class=\"language-md\">main.py</code> with their contents four commits ago.</p></div> <x-quill goal=\"quill\"></x-quill></x-step>","goals":["quill"],"keywords":[]},"git-checkout-file-solution":{"id":"git-checkout-file-solution","title":"Git Checkout File Solution","html":"<x-step id=\"git-checkout-file-solution\" goals=\"next-0\"><p><em>Solution.</em> We checkout the file at that commit: <span class=\"nowrap\"><code class=\"language-md\">git checkout HEAD~4 main.py</code>.</span></p><p><button class=\"next-step\">Continue</button></p></x-step>","goals":["next-0"],"keywords":[]},"git-diff-exercise":{"id":"git-diff-exercise","title":"Git Diff Exercise","html":"<x-step id=\"git-diff-exercise\" goals=\"next-0 quill\"><div class=\"exercise\"> <p><strong>Exercise</strong><br>Write a Git command to show the changes in the file <code class=\"language-bash\">main.py</code> from four commits ago to two commits ago.</p></div> <x-quill goal=\"quill\"></x-quill><p><em>Solution.</em> We use <code class=\"language-bash\">git diff</code> and specify the two revisions: <span class=\"nowrap\"><code class=\"language-bash\">git diff HEAD~4 HEAD~2 main.py</code>.</span></p><p><button class=\"next-step\">Continue</button></p></x-step>","goals":["next-0","quill"],"keywords":[]},"latex":{"id":"latex","title":"Latex","html":"<x-step id=\"latex\" goals=\"next-0\"><p>TeX (pronounced <em>tech</em>) is an open-source typesetting engine for technical documents. It was created in the late 1970s by Donald Knuth, and it has since become almost universally adopted in the mathematical research community and widely adopted in other scientific communities. The most common way to use TeX is through <em>LaTeX</em> (<em>lay-tex</em> or <em>lah-tex;</em> both pronunciations are common), which provides extra tools that make TeX easier to use.</p><p><button class=\"next-step\">Continue</button></p></x-step>","goals":["next-0"],"keywords":[]},"step-pdflatex":{"id":"step-pdflatex","title":"Step Pdflatex","html":"<x-step id=\"step-pdflatex\" goals=\"next-0\"><p>A LaTeX document consists of a plain text file which is processed by a command-line utility called <code class=\"language-bash\">pdflatex</code> to produce a PDF. Here's a snippet of a TeX source file followed by the corresponding page in the resulting PDF (this is from a real project; the full source and PDF for which are available <a href=\"https://github.com/sswatson/MultivariableCalculus.tex\" target=\"_blank\">here</a>):</p><figure><img src=\"/content/data-science-utilities/images/latex-input.png\" alt=\"\"><img src=\"/content/data-science-utilities/images/latex-output.png\" alt=\"\"></figure><p>In this course, we will not learn to typeset documents in LaTeX, because we will use more dynamic alternatives which are built on web technologies. However, these alternatives do rely on LaTeX's legacy for one important purpose: <em>rendering mathematical expressions</em>. For example, the text</p><pre class=\"language-md\"><code>\\operatorname{KL}(p\\|q) =\n  \\int_{\\mathbb{R}^n}p(x) \\log \\frac{p(x)}{q(x)} \\, \\mathrm{d}x.</code></pre><p>renders as</p><p class=\"text-center\"><svg style=\"vertical-align: -2.172ex\" width=\"31.507ex\" height=\"5.475ex\" class=\"mathjax\" viewBox=\"0 -1460 13926.1 2420\"><title>\\begin{align*}\\operatorname{KL}(p\\|q) = \\int_{\\mathbb{R}^n}p(x) \\log \\frac{p(x)}{q(x)} \\, \\mathrm{d}x.\\end{align*}</title><defs><path id=\"MJX-296-TEX-N-4B\" d=\"M128 622Q121 629 117 631T101 634T58 637H25V683H36Q57 680 180 680Q315 680 324 683H335V637H313Q235 637 233 620Q232 618 232 462L233 307L379 449Q425 494 479 546Q518 584 524 591T531 607V608Q531 630 503 636Q501 636 498 636T493 637H489V683H499Q517 680 630 680Q704 680 716 683H722V637H708Q633 633 589 597Q584 592 495 506T406 419T515 254T631 80Q644 60 662 54T715 46H736V0H728Q719 3 615 3Q493 3 472 0H461V46H469Q515 46 515 72Q515 78 512 84L336 351Q332 348 278 296L232 251V156Q232 62 235 58Q243 47 302 46H335V0H324Q303 3 180 3Q45 3 36 0H25V46H58Q100 47 109 49T128 61V622Z\"></path><path id=\"MJX-296-TEX-N-4C\" d=\"M128 622Q121 629 117 631T101 634T58 637H25V683H36Q48 680 182 680Q324 680 348 683H360V637H333Q273 637 258 635T233 622L232 342V129Q232 57 237 52Q243 47 313 47Q384 47 410 53Q470 70 498 110T536 221Q536 226 537 238T540 261T542 272T562 273H582V268Q580 265 568 137T554 5V0H25V46H58Q100 47 109 49T128 61V622Z\"></path><path id=\"MJX-296-TEX-N-2061\" d=\"\"></path><path id=\"MJX-296-TEX-N-28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"></path><path id=\"MJX-296-TEX-I-1D45D\" d=\"M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z\"></path><path id=\"MJX-296-TEX-N-2225\" d=\"M133 736Q138 750 153 750Q164 750 170 739Q172 735 172 250T170 -239Q164 -250 152 -250Q144 -250 138 -244L137 -243Q133 -241 133 -179T132 250Q132 731 133 736ZM329 739Q334 750 346 750Q353 750 361 744L362 743Q366 741 366 679T367 250T367 -178T362 -243L361 -244Q355 -250 347 -250Q335 -250 329 -239Q327 -235 327 250T329 739Z\"></path><path id=\"MJX-296-TEX-I-1D45E\" d=\"M33 157Q33 258 109 349T280 441Q340 441 372 389Q373 390 377 395T388 406T404 418Q438 442 450 442Q454 442 457 439T460 434Q460 425 391 149Q320 -135 320 -139Q320 -147 365 -148H390Q396 -156 396 -157T393 -175Q389 -188 383 -194H370Q339 -192 262 -192Q234 -192 211 -192T174 -192T157 -193Q143 -193 143 -185Q143 -182 145 -170Q149 -154 152 -151T172 -148Q220 -148 230 -141Q238 -136 258 -53T279 32Q279 33 272 29Q224 -10 172 -10Q117 -10 75 30T33 157ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z\"></path><path id=\"MJX-296-TEX-N-29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"></path><path id=\"MJX-296-TEX-N-3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"></path><path id=\"MJX-296-TEX-LO-222B\" d=\"M114 -798Q132 -824 165 -824H167Q195 -824 223 -764T275 -600T320 -391T362 -164Q365 -143 367 -133Q439 292 523 655T645 1127Q651 1145 655 1157T672 1201T699 1257T733 1306T777 1346T828 1360Q884 1360 912 1325T944 1245Q944 1220 932 1205T909 1186T887 1183Q866 1183 849 1198T832 1239Q832 1287 885 1296L882 1300Q879 1303 874 1307T866 1313Q851 1323 833 1323Q819 1323 807 1311T775 1255T736 1139T689 936T633 628Q574 293 510 -5T410 -437T355 -629Q278 -862 165 -862Q125 -862 92 -831T55 -746Q55 -711 74 -698T112 -685Q133 -685 150 -700T167 -741Q167 -789 114 -798Z\"></path><path id=\"MJX-296-TEX-D-211D\" d=\"M17 665Q17 672 28 683H221Q415 681 439 677Q461 673 481 667T516 654T544 639T566 623T584 607T597 592T607 578T614 565T618 554L621 548Q626 530 626 497Q626 447 613 419Q578 348 473 326L455 321Q462 310 473 292T517 226T578 141T637 72T686 35Q705 30 705 16Q705 7 693 -1H510Q503 6 404 159L306 310H268V183Q270 67 271 59Q274 42 291 38Q295 37 319 35Q344 35 353 28Q362 17 353 3L346 -1H28Q16 5 16 16Q16 35 55 35Q96 38 101 52Q106 60 106 341T101 632Q95 645 55 648Q17 648 17 665ZM241 35Q238 42 237 45T235 78T233 163T233 337V621L237 635L244 648H133Q136 641 137 638T139 603T141 517T141 341Q141 131 140 89T134 37Q133 36 133 35H241ZM457 496Q457 540 449 570T425 615T400 634T377 643Q374 643 339 648Q300 648 281 635Q271 628 270 610T268 481V346H284Q327 346 375 352Q421 364 439 392T457 496ZM492 537T492 496T488 427T478 389T469 371T464 361Q464 360 465 360Q469 360 497 370Q593 400 593 495Q593 592 477 630L457 637L461 626Q474 611 488 561Q492 537 492 496ZM464 243Q411 317 410 317Q404 317 401 315Q384 315 370 312H346L526 35H619L606 50Q553 109 464 243Z\"></path><path id=\"MJX-296-TEX-I-1D45B\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"></path><path id=\"MJX-296-TEX-I-1D465\" d=\"M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z\"></path><path id=\"MJX-296-TEX-N-6C\" d=\"M42 46H56Q95 46 103 60V68Q103 77 103 91T103 124T104 167T104 217T104 272T104 329Q104 366 104 407T104 482T104 542T103 586T103 603Q100 622 89 628T44 637H26V660Q26 683 28 683L38 684Q48 685 67 686T104 688Q121 689 141 690T171 693T182 694H185V379Q185 62 186 60Q190 52 198 49Q219 46 247 46H263V0H255L232 1Q209 2 183 2T145 3T107 3T57 1L34 0H26V46H42Z\"></path><path id=\"MJX-296-TEX-N-6F\" d=\"M28 214Q28 309 93 378T250 448Q340 448 405 380T471 215Q471 120 407 55T250 -10Q153 -10 91 57T28 214ZM250 30Q372 30 372 193V225V250Q372 272 371 288T364 326T348 362T317 390T268 410Q263 411 252 411Q222 411 195 399Q152 377 139 338T126 246V226Q126 130 145 91Q177 30 250 30Z\"></path><path id=\"MJX-296-TEX-N-67\" d=\"M329 409Q373 453 429 453Q459 453 472 434T485 396Q485 382 476 371T449 360Q416 360 412 390Q410 404 415 411Q415 412 416 414V415Q388 412 363 393Q355 388 355 386Q355 385 359 381T368 369T379 351T388 325T392 292Q392 230 343 187T222 143Q172 143 123 171Q112 153 112 133Q112 98 138 81Q147 75 155 75T227 73Q311 72 335 67Q396 58 431 26Q470 -13 470 -72Q470 -139 392 -175Q332 -206 250 -206Q167 -206 107 -175Q29 -140 29 -75Q29 -39 50 -15T92 18L103 24Q67 55 67 108Q67 155 96 193Q52 237 52 292Q52 355 102 398T223 442Q274 442 318 416L329 409ZM299 343Q294 371 273 387T221 404Q192 404 171 388T145 343Q142 326 142 292Q142 248 149 227T179 192Q196 182 222 182Q244 182 260 189T283 207T294 227T299 242Q302 258 302 292T299 343ZM403 -75Q403 -50 389 -34T348 -11T299 -2T245 0H218Q151 0 138 -6Q118 -15 107 -34T95 -74Q95 -84 101 -97T122 -127T170 -155T250 -167Q319 -167 361 -139T403 -75Z\"></path><path id=\"MJX-296-TEX-N-64\" d=\"M376 495Q376 511 376 535T377 568Q377 613 367 624T316 637H298V660Q298 683 300 683L310 684Q320 685 339 686T376 688Q393 689 413 690T443 693T454 694H457V390Q457 84 458 81Q461 61 472 55T517 46H535V0Q533 0 459 -5T380 -11H373V44L365 37Q307 -11 235 -11Q158 -11 96 50T34 215Q34 315 97 378T244 442Q319 442 376 393V495ZM373 342Q328 405 260 405Q211 405 173 369Q146 341 139 305T131 211Q131 155 138 120T173 59Q203 26 251 26Q322 26 373 103V342Z\"></path><path id=\"MJX-296-TEX-N-2E\" d=\"M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z\"></path></defs><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\"><g data-mml-node=\"math\"><g data-mml-node=\"mtable\"><g data-mml-node=\"mtr\"><g data-mml-node=\"mtd\"><g data-mml-node=\"mi\"><use xlink:href=\"#MJX-296-TEX-N-4B\"></use><use xlink:href=\"#MJX-296-TEX-N-4C\" transform=\"translate(778, 0)\"></use></g><g data-mml-node=\"mo\" transform=\"translate(1403, 0)\"><use xlink:href=\"#MJX-296-TEX-N-2061\"></use></g><g data-mml-node=\"mo\" transform=\"translate(1403, 0)\"><use xlink:href=\"#MJX-296-TEX-N-28\"></use></g><g data-mml-node=\"mi\" transform=\"translate(1792, 0)\"><use xlink:href=\"#MJX-296-TEX-I-1D45D\"></use></g><g data-mml-node=\"mo\" transform=\"translate(2295, 0)\"><use xlink:href=\"#MJX-296-TEX-N-2225\"></use></g><g data-mml-node=\"mi\" transform=\"translate(2795, 0)\"><use xlink:href=\"#MJX-296-TEX-I-1D45E\"></use></g><g data-mml-node=\"mo\" transform=\"translate(3255, 0)\"><use xlink:href=\"#MJX-296-TEX-N-29\"></use></g><g data-mml-node=\"mo\" transform=\"translate(3921.8, 0)\"><use xlink:href=\"#MJX-296-TEX-N-3D\"></use></g><g data-mml-node=\"msub\" transform=\"translate(4977.6, 0)\"><g data-mml-node=\"mo\"><use xlink:href=\"#MJX-296-TEX-LO-222B\"></use></g><g data-mml-node=\"TeXAtom\" transform=\"translate(556, -896.4) scale(0.707)\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"msup\"><g data-mml-node=\"TeXAtom\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"mi\"><use xlink:href=\"#MJX-296-TEX-D-211D\"></use></g></g><g data-mml-node=\"mi\" transform=\"translate(722, 410.1) scale(0.707)\"><use xlink:href=\"#MJX-296-TEX-I-1D45B\"></use></g></g></g></g><g data-mml-node=\"mi\" transform=\"translate(6596.1, 0)\"><use xlink:href=\"#MJX-296-TEX-I-1D45D\"></use></g><g data-mml-node=\"mo\" transform=\"translate(7099.1, 0)\"><use xlink:href=\"#MJX-296-TEX-N-28\"></use></g><g data-mml-node=\"mi\" transform=\"translate(7488.1, 0)\"><use xlink:href=\"#MJX-296-TEX-I-1D465\"></use></g><g data-mml-node=\"mo\" transform=\"translate(8060.1, 0)\"><use xlink:href=\"#MJX-296-TEX-N-29\"></use></g><g data-mml-node=\"mi\" transform=\"translate(8615.8, 0)\"><use xlink:href=\"#MJX-296-TEX-N-6C\"></use><use xlink:href=\"#MJX-296-TEX-N-6F\" transform=\"translate(278, 0)\"></use><use xlink:href=\"#MJX-296-TEX-N-67\" transform=\"translate(778, 0)\"></use></g><g data-mml-node=\"mo\" transform=\"translate(9893.8, 0)\"><use xlink:href=\"#MJX-296-TEX-N-2061\"></use></g><g data-mml-node=\"mfrac\" transform=\"translate(10060.4, 0)\"><g data-mml-node=\"mrow\" transform=\"translate(220, 710)\"><g data-mml-node=\"mi\"><use xlink:href=\"#MJX-296-TEX-I-1D45D\"></use></g><g data-mml-node=\"mo\" transform=\"translate(503, 0)\"><use xlink:href=\"#MJX-296-TEX-N-28\"></use></g><g data-mml-node=\"mi\" transform=\"translate(892, 0)\"><use xlink:href=\"#MJX-296-TEX-I-1D465\"></use></g><g data-mml-node=\"mo\" transform=\"translate(1464, 0)\"><use xlink:href=\"#MJX-296-TEX-N-29\"></use></g></g><g data-mml-node=\"mrow\" transform=\"translate(241.5, -710)\"><g data-mml-node=\"mi\"><use xlink:href=\"#MJX-296-TEX-I-1D45E\"></use></g><g data-mml-node=\"mo\" transform=\"translate(460, 0)\"><use xlink:href=\"#MJX-296-TEX-N-28\"></use></g><g data-mml-node=\"mi\" transform=\"translate(849, 0)\"><use xlink:href=\"#MJX-296-TEX-I-1D465\"></use></g><g data-mml-node=\"mo\" transform=\"translate(1421, 0)\"><use xlink:href=\"#MJX-296-TEX-N-29\"></use></g></g><rect width=\"2053\" height=\"60\" x=\"120\" y=\"220\"></rect></g><g data-mml-node=\"mstyle\" transform=\"translate(12353.4, 0)\"><g data-mml-node=\"mspace\"></g></g><g data-mml-node=\"TeXAtom\" data-mjx-texclass=\"ORD\" transform=\"translate(12520.1, 0)\"><g data-mml-node=\"mi\"><use xlink:href=\"#MJX-296-TEX-N-64\"></use></g></g><g data-mml-node=\"mi\" transform=\"translate(13076.1, 0)\"><use xlink:href=\"#MJX-296-TEX-I-1D465\"></use></g><g data-mml-node=\"mo\" transform=\"translate(13648.1, 0)\"><use xlink:href=\"#MJX-296-TEX-N-2E\"></use></g></g></g></g></g></g></svg></p><p>We will discuss some basics of specifying math expressions in LaTeX, but recent developments have made it easy to produce LaTeX source code without having to type it out directly. You can produce a math expression using a graphical user interphase like <a href=\"https://www.symbolab.com\" target=\"_blank\">SymboLab</a> and then use <a href=\"https://mathpix.com\" target=\"_blank\">MathPix</a> to snip the resulting expression on your screen and convert it to LaTeX. MathPix works directly from the taskbar, so the whole process is quite efficient. Alternatively, if you have an iPhone, you can use install a handwriting-input keyboard for LaTeX by installing the app <a href=\"https://mathkey-app.com\" target=\"_blank\">MathKey</a>.</p><center><figure><video src=\"/content/data-science-utilities/images/mathkey.mp4\" width=\"75%\" controls=\"controls\"></video></figure></center><p><button class=\"next-step\">Continue</button></p></x-step>","goals":["next-0"],"keywords":[]},"latex-expression-markup":{"id":"latex-expression-markup","title":"Latex Expression Markup","html":"<x-step id=\"latex-expression-markup\" goals=\"next-0\"><h2>LaTeX expression markup</h2><h3>Superscripts and subscripts</h3><p>Inline mathematical expressions in LaTeX are delimited by dollar signs. For example:</p><pre class=\"language-md\"><code>The Pythagorean theorem says that $a^2 + b^2 = c^2$, where\n$a$ and $b$ are the lengths of the legs and $c$ is the\nlength of the hypotenuse of a right triangle.</code></pre><p>renders as:</p><p>The Pythagorean theorem says that <span class=\"nowrap\"><svg style=\"vertical-align: -0.186ex\" width=\"11.669ex\" height=\"2.072ex\" class=\"mathjax\" viewBox=\"0 -833.9 5157.7 915.9\"><title>a^2 + b^2 = c^2</title><defs><path id=\"MJX-297-TEX-I-1D44E\" d=\"M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z\"></path><path id=\"MJX-297-TEX-N-32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"></path><path id=\"MJX-297-TEX-N-2B\" d=\"M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z\"></path><path id=\"MJX-297-TEX-I-1D44F\" d=\"M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z\"></path><path id=\"MJX-297-TEX-N-3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"></path><path id=\"MJX-297-TEX-I-1D450\" d=\"M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z\"></path></defs><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\"><g data-mml-node=\"math\"><g data-mml-node=\"msup\"><g data-mml-node=\"mi\"><use xlink:href=\"#MJX-297-TEX-I-1D44E\"></use></g><g data-mml-node=\"mn\" transform=\"translate(529, 363) scale(0.707)\"><use xlink:href=\"#MJX-297-TEX-N-32\"></use></g></g><g data-mml-node=\"mo\" transform=\"translate(1154.8, 0)\"><use xlink:href=\"#MJX-297-TEX-N-2B\"></use></g><g data-mml-node=\"msup\" transform=\"translate(2155, 0)\"><g data-mml-node=\"mi\"><use xlink:href=\"#MJX-297-TEX-I-1D44F\"></use></g><g data-mml-node=\"mn\" transform=\"translate(429, 363) scale(0.707)\"><use xlink:href=\"#MJX-297-TEX-N-32\"></use></g></g><g data-mml-node=\"mo\" transform=\"translate(3265.3, 0)\"><use xlink:href=\"#MJX-297-TEX-N-3D\"></use></g><g data-mml-node=\"msup\" transform=\"translate(4321.1, 0)\"><g data-mml-node=\"mi\"><use xlink:href=\"#MJX-297-TEX-I-1D450\"></use></g><g data-mml-node=\"mn\" transform=\"translate(433, 363) scale(0.707)\"><use xlink:href=\"#MJX-297-TEX-N-32\"></use></g></g></g></g></svg>,</span> where <svg style=\"vertical-align: -0.023ex\" width=\"1.197ex\" height=\"1.02ex\" class=\"mathjax\" viewBox=\"0 -441 529 451\"><title>a</title><defs><path id=\"MJX-32-TEX-I-1D44E\" d=\"M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z\"></path></defs><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><use xlink:href=\"#MJX-32-TEX-I-1D44E\"></use></g></g></g></svg> and <svg style=\"vertical-align: -0.025ex\" width=\"0.971ex\" height=\"1.595ex\" class=\"mathjax\" viewBox=\"0 -694 429 705\"><title>b</title><defs><path id=\"MJX-15-TEX-I-1D44F\" d=\"M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z\"></path></defs><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><use xlink:href=\"#MJX-15-TEX-I-1D44F\"></use></g></g></g></svg> are the lengths of the legs and <svg style=\"vertical-align: -0.025ex\" width=\"0.98ex\" height=\"1.025ex\" class=\"mathjax\" viewBox=\"0 -442 433 453\"><title>c</title><defs><path id=\"MJX-66-TEX-I-1D450\" d=\"M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z\"></path></defs><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><use xlink:href=\"#MJX-66-TEX-I-1D450\"></use></g></g></g></svg> is the length of the hypotenuse of a right triangle.</p><p><button class=\"next-step\">Continue</button></p></x-step>","goals":["next-0"],"keywords":[]},"step-latex-superscripts":{"id":"step-latex-superscripts","title":"Step Latex Superscripts","html":"<x-step id=\"step-latex-superscripts\" goals=\"next-0\"><p>As demonstrated in the example above, superscripts are indicated with carats. Subscripts are indicated with underscores:</p><pre class=\"language-md\"><code>a_1, a_2, a_3, \\ldots, a_{100}</code></pre><p>becomes</p><p class=\"text-center\"><svg style=\"vertical-align: -0.566ex\" width=\"17.092ex\" height=\"2.262ex\" class=\"mathjax\" viewBox=\"0 -750 7554.7 1000\"><title>\\begin{align*}a_1, a_2, a_3, \\ldots, a_{100}\\end{align*}</title><defs><path id=\"MJX-298-TEX-I-1D44E\" d=\"M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z\"></path><path id=\"MJX-298-TEX-N-31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path><path id=\"MJX-298-TEX-N-2C\" d=\"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z\"></path><path id=\"MJX-298-TEX-N-32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"></path><path id=\"MJX-298-TEX-N-33\" d=\"M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z\"></path><path id=\"MJX-298-TEX-N-2026\" d=\"M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60ZM525 60Q525 84 542 102T585 120Q609 120 627 104T646 61Q646 36 629 18T586 0T543 17T525 60ZM972 60Q972 84 989 102T1032 120Q1056 120 1074 104T1093 61Q1093 36 1076 18T1033 0T990 17T972 60Z\"></path><path id=\"MJX-298-TEX-N-30\" d=\"M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z\"></path></defs><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\"><g data-mml-node=\"math\"><g data-mml-node=\"mtable\"><g data-mml-node=\"mtr\"><g data-mml-node=\"mtd\"><g data-mml-node=\"msub\"><g data-mml-node=\"mi\"><use xlink:href=\"#MJX-298-TEX-I-1D44E\"></use></g><g data-mml-node=\"mn\" transform=\"translate(529, -150) scale(0.707)\"><use xlink:href=\"#MJX-298-TEX-N-31\"></use></g></g><g data-mml-node=\"mo\" transform=\"translate(932.6, 0)\"><use xlink:href=\"#MJX-298-TEX-N-2C\"></use></g><g data-mml-node=\"msub\" transform=\"translate(1377.2, 0)\"><g data-mml-node=\"mi\"><use xlink:href=\"#MJX-298-TEX-I-1D44E\"></use></g><g data-mml-node=\"mn\" transform=\"translate(529, -150) scale(0.707)\"><use xlink:href=\"#MJX-298-TEX-N-32\"></use></g></g><g data-mml-node=\"mo\" transform=\"translate(2309.8, 0)\"><use xlink:href=\"#MJX-298-TEX-N-2C\"></use></g><g data-mml-node=\"msub\" transform=\"translate(2754.4, 0)\"><g data-mml-node=\"mi\"><use xlink:href=\"#MJX-298-TEX-I-1D44E\"></use></g><g data-mml-node=\"mn\" transform=\"translate(529, -150) scale(0.707)\"><use xlink:href=\"#MJX-298-TEX-N-33\"></use></g></g><g data-mml-node=\"mo\" transform=\"translate(3687, 0)\"><use xlink:href=\"#MJX-298-TEX-N-2C\"></use></g><g data-mml-node=\"mo\" transform=\"translate(4131.7, 0)\"><use xlink:href=\"#MJX-298-TEX-N-2026\"></use></g><g data-mml-node=\"mo\" transform=\"translate(5470.3, 0)\"><use xlink:href=\"#MJX-298-TEX-N-2C\"></use></g><g data-mml-node=\"msub\" transform=\"translate(5915, 0)\"><g data-mml-node=\"mi\"><use xlink:href=\"#MJX-298-TEX-I-1D44E\"></use></g><g data-mml-node=\"TeXAtom\" transform=\"translate(529, -150) scale(0.707)\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"mn\"><use xlink:href=\"#MJX-298-TEX-N-31\"></use><use xlink:href=\"#MJX-298-TEX-N-30\" transform=\"translate(500, 0)\"></use><use xlink:href=\"#MJX-298-TEX-N-30\" transform=\"translate(1000, 0)\"></use></g></g></g></g></g></g></g></g></svg></p><p>Curly braces are used for grouping and do not appear in the rendered expression. If you want a literal curly brace, it must be escaped with a backslash:</p><pre class=\"language-md\"><code>\\{1,2,3\\}</code></pre><p>is the LaTeX code for</p><p class=\"text-center\"><svg style=\"vertical-align: -0.566ex\" width=\"7.668ex\" height=\"2.262ex\" class=\"mathjax\" viewBox=\"0 -750 3389.3 1000\"><title>\\begin{align*}\\{1,2,3\\}\\end{align*}</title><defs><path id=\"MJX-305-TEX-N-7B\" d=\"M434 -231Q434 -244 428 -250H410Q281 -250 230 -184Q225 -177 222 -172T217 -161T213 -148T211 -133T210 -111T209 -84T209 -47T209 0Q209 21 209 53Q208 142 204 153Q203 154 203 155Q189 191 153 211T82 231Q71 231 68 234T65 250T68 266T82 269Q116 269 152 289T203 345Q208 356 208 377T209 529V579Q209 634 215 656T244 698Q270 724 324 740Q361 748 377 749Q379 749 390 749T408 750H428Q434 744 434 732Q434 719 431 716Q429 713 415 713Q362 710 332 689T296 647Q291 634 291 499V417Q291 370 288 353T271 314Q240 271 184 255L170 250L184 245Q202 239 220 230T262 196T290 137Q291 131 291 1Q291 -134 296 -147Q306 -174 339 -192T415 -213Q429 -213 431 -216Q434 -219 434 -231Z\"></path><path id=\"MJX-305-TEX-N-31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path><path id=\"MJX-305-TEX-N-2C\" d=\"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z\"></path><path id=\"MJX-305-TEX-N-32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"></path><path id=\"MJX-305-TEX-N-33\" d=\"M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z\"></path><path id=\"MJX-305-TEX-N-7D\" d=\"M65 731Q65 745 68 747T88 750Q171 750 216 725T279 670Q288 649 289 635T291 501Q292 362 293 357Q306 312 345 291T417 269Q428 269 431 266T434 250T431 234T417 231Q380 231 345 210T298 157Q293 143 292 121T291 -28V-79Q291 -134 285 -156T256 -198Q202 -250 89 -250Q71 -250 68 -247T65 -230Q65 -224 65 -223T66 -218T69 -214T77 -213Q91 -213 108 -210T146 -200T183 -177T207 -139Q208 -134 209 3L210 139Q223 196 280 230Q315 247 330 250Q305 257 280 270Q225 304 212 352L210 362L209 498Q208 635 207 640Q195 680 154 696T77 713Q68 713 67 716T65 731Z\"></path></defs><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\"><g data-mml-node=\"math\"><g data-mml-node=\"mtable\"><g data-mml-node=\"mtr\"><g data-mml-node=\"mtd\"><g data-mml-node=\"mo\"><use xlink:href=\"#MJX-305-TEX-N-7B\"></use></g><g data-mml-node=\"mn\" transform=\"translate(500, 0)\"><use xlink:href=\"#MJX-305-TEX-N-31\"></use></g><g data-mml-node=\"mo\" transform=\"translate(1000, 0)\"><use xlink:href=\"#MJX-305-TEX-N-2C\"></use></g><g data-mml-node=\"mn\" transform=\"translate(1444.7, 0)\"><use xlink:href=\"#MJX-305-TEX-N-32\"></use></g><g data-mml-node=\"mo\" transform=\"translate(1944.7, 0)\"><use xlink:href=\"#MJX-305-TEX-N-2C\"></use></g><g data-mml-node=\"mn\" transform=\"translate(2389.3, 0)\"><use xlink:href=\"#MJX-305-TEX-N-33\"></use></g><g data-mml-node=\"mo\" transform=\"translate(2889.3, 0)\"><use xlink:href=\"#MJX-305-TEX-N-7D\"></use></g></g></g></g></g></g></svg></p><p><button class=\"next-step\">Continue</button></p></x-step>","goals":["next-0"],"keywords":[]},"latex-fractions":{"id":"latex-fractions","title":"Latex Fractions","html":"<x-step id=\"latex-fractions\" goals=\"next-0\"><h3>Fractions</h3><p>The syntax for fractions in LaTeX is <span class=\"nowrap\"><code class=\"language-md\">\\frac{numerator}{denominator}</code>.</span> For example, <code class=\"language-md\">\\frac{x^3}{3}</code> renders as <span class=\"nowrap\"><svg style=\"vertical-align: -0.816ex\" width=\"2.556ex\" height=\"3.04ex\" class=\"mathjax\" viewBox=\"0 -983.2 1129.8 1343.7\"><title>\\frac{x^3}{3}</title><defs><path id=\"MJX-299-TEX-I-1D465\" d=\"M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z\"></path><path id=\"MJX-299-TEX-N-33\" d=\"M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z\"></path></defs><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\"><g data-mml-node=\"math\"><g data-mml-node=\"mfrac\"><g data-mml-node=\"msup\" transform=\"translate(220, 394) scale(0.707)\"><g data-mml-node=\"mi\"><use xlink:href=\"#MJX-299-TEX-I-1D465\"></use></g><g data-mml-node=\"mn\" transform=\"translate(572, 363) scale(0.707)\"><use xlink:href=\"#MJX-299-TEX-N-33\"></use></g></g><g data-mml-node=\"mn\" transform=\"translate(388.1, -345) scale(0.707)\"><use xlink:href=\"#MJX-299-TEX-N-33\"></use></g><rect width=\"889.8\" height=\"60\" x=\"120\" y=\"220\"></rect></g></g></g></svg>.</span> Fractions can be nested:</p><pre class=\"language-md\"><code>\\frac{1}{1+\\frac{2}{3}}</code></pre><p>looks like</p><p class=\"text-center\"><svg style=\"vertical-align: -2.294ex\" width=\"6.688ex\" height=\"5.718ex\" class=\"mathjax\" viewBox=\"0 -1513.7 2956 2527.5\"><title>\\begin{align*}\\frac{1}{1+\\frac{2}{3}}\\end{align*}</title><defs><path id=\"MJX-306-TEX-N-31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path><path id=\"MJX-306-TEX-N-2B\" d=\"M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z\"></path><path id=\"MJX-306-TEX-N-32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"></path><path id=\"MJX-306-TEX-N-33\" d=\"M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z\"></path></defs><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\"><g data-mml-node=\"math\"><g data-mml-node=\"mtable\"><g data-mml-node=\"mtr\" transform=\"translate(0, 171.7)\"><g data-mml-node=\"mtd\"><g data-mml-node=\"mfrac\"><g data-mml-node=\"mn\" transform=\"translate(1228, 676)\"><use xlink:href=\"#MJX-306-TEX-N-31\"></use></g><g data-mml-node=\"mrow\" transform=\"translate(220, -824.9)\"><g data-mml-node=\"mn\"><use xlink:href=\"#MJX-306-TEX-N-31\"></use></g><g data-mml-node=\"mo\" transform=\"translate(722.2, 0)\"><use xlink:href=\"#MJX-306-TEX-N-2B\"></use></g><g data-mml-node=\"mfrac\" transform=\"translate(1722.4, 0)\"><g data-mml-node=\"mn\" transform=\"translate(220, 394) scale(0.707)\"><use xlink:href=\"#MJX-306-TEX-N-32\"></use></g><g data-mml-node=\"mn\" transform=\"translate(220, -345) scale(0.707)\"><use xlink:href=\"#MJX-306-TEX-N-33\"></use></g><rect width=\"553.6\" height=\"60\" x=\"120\" y=\"220\"></rect></g></g><rect width=\"2716\" height=\"60\" x=\"120\" y=\"220\"></rect></g></g></g></g></g></g></svg></p><p><button class=\"next-step\">Continue</button></p></x-step>","goals":["next-0"],"keywords":[]},"step-greek-symbols-latex":{"id":"step-greek-symbols-latex","title":"Step Greek Symbols Latex","html":"<x-step id=\"step-greek-symbols-latex\" goals=\"next-0\"><h3>Greek symbols and math symbols</h3><p>Greek letters may be typeset by putting a backslash in front of the letter name. For example, <code class=\"language-md\">\\alpha, \\beta, \\gamma</code> becomes <span class=\"nowrap\"><svg style=\"vertical-align: -0.489ex\" width=\"5.969ex\" height=\"2.084ex\" class=\"mathjax\" viewBox=\"0 -705 2638.3 921\"><title>\\alpha, \\beta, \\gamma</title><defs><path id=\"MJX-300-TEX-I-1D6FC\" d=\"M34 156Q34 270 120 356T309 442Q379 442 421 402T478 304Q484 275 485 237V208Q534 282 560 374Q564 388 566 390T582 393Q603 393 603 385Q603 376 594 346T558 261T497 161L486 147L487 123Q489 67 495 47T514 26Q528 28 540 37T557 60Q559 67 562 68T577 70Q597 70 597 62Q597 56 591 43Q579 19 556 5T512 -10H505Q438 -10 414 62L411 69L400 61Q390 53 370 41T325 18T267 -2T203 -11Q124 -11 79 39T34 156ZM208 26Q257 26 306 47T379 90L403 112Q401 255 396 290Q382 405 304 405Q235 405 183 332Q156 292 139 224T121 120Q121 71 146 49T208 26Z\"></path><path id=\"MJX-300-TEX-N-2C\" d=\"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z\"></path><path id=\"MJX-300-TEX-I-1D6FD\" d=\"M29 -194Q23 -188 23 -186Q23 -183 102 134T186 465Q208 533 243 584T309 658Q365 705 429 705H431Q493 705 533 667T573 570Q573 465 469 396L482 383Q533 332 533 252Q533 139 448 65T257 -10Q227 -10 203 -2T165 17T143 40T131 59T126 65L62 -188Q60 -194 42 -194H29ZM353 431Q392 431 427 419L432 422Q436 426 439 429T449 439T461 453T472 471T484 495T493 524T501 560Q503 569 503 593Q503 611 502 616Q487 667 426 667Q384 667 347 643T286 582T247 514T224 455Q219 439 186 308T152 168Q151 163 151 147Q151 99 173 68Q204 26 260 26Q302 26 349 51T425 137Q441 171 449 214T457 279Q457 337 422 372Q380 358 347 358H337Q258 358 258 389Q258 396 261 403Q275 431 353 431Z\"></path><path id=\"MJX-300-TEX-I-1D6FE\" d=\"M31 249Q11 249 11 258Q11 275 26 304T66 365T129 418T206 441Q233 441 239 440Q287 429 318 386T371 255Q385 195 385 170Q385 166 386 166L398 193Q418 244 443 300T486 391T508 430Q510 431 524 431H537Q543 425 543 422Q543 418 522 378T463 251T391 71Q385 55 378 6T357 -100Q341 -165 330 -190T303 -216Q286 -216 286 -188Q286 -138 340 32L346 51L347 69Q348 79 348 100Q348 257 291 317Q251 355 196 355Q148 355 108 329T51 260Q49 251 47 251Q45 249 31 249Z\"></path></defs><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><use xlink:href=\"#MJX-300-TEX-I-1D6FC\"></use></g><g data-mml-node=\"mo\" transform=\"translate(640, 0)\"><use xlink:href=\"#MJX-300-TEX-N-2C\"></use></g><g data-mml-node=\"mi\" transform=\"translate(1084.7, 0)\"><use xlink:href=\"#MJX-300-TEX-I-1D6FD\"></use></g><g data-mml-node=\"mo\" transform=\"translate(1650.7, 0)\"><use xlink:href=\"#MJX-300-TEX-N-2C\"></use></g><g data-mml-node=\"mi\" transform=\"translate(2095.3, 0)\"><use xlink:href=\"#MJX-300-TEX-I-1D6FE\"></use></g></g></g></svg>.</span></p><p><a href=\"https://www.overleaf.com/learn/latex/List_of_Greek_letters_and_math_symbols\" target=\"_blank\">Many common math symbols</a> have built-in support in LaTeX:</p><pre class=\"language-md\"><code>\\sum_{i=1}^{10} i^2 = 385 + 0 \\times \\int_1^\\infty dx/x^2</code></pre><p class=\"text-center\"><svg style=\"vertical-align: -2.791ex\" width=\"28.603ex\" height=\"6.712ex\" class=\"mathjax\" viewBox=\"0 -1733.4 12642.4 2966.8\"><title>\\begin{align*}\\sum_{i=1}^{10} i^2 = 385 + 0 \\times \\int_1^\\infty dx/x^2\\end{align*}</title><defs><path id=\"MJX-307-TEX-LO-2211\" d=\"M60 948Q63 950 665 950H1267L1325 815Q1384 677 1388 669H1348L1341 683Q1320 724 1285 761Q1235 809 1174 838T1033 881T882 898T699 902H574H543H251L259 891Q722 258 724 252Q725 250 724 246Q721 243 460 -56L196 -356Q196 -357 407 -357Q459 -357 548 -357T676 -358Q812 -358 896 -353T1063 -332T1204 -283T1307 -196Q1328 -170 1348 -124H1388Q1388 -125 1381 -145T1356 -210T1325 -294L1267 -449L666 -450Q64 -450 61 -448Q55 -446 55 -439Q55 -437 57 -433L590 177Q590 178 557 222T452 366T322 544L56 909L55 924Q55 945 60 948Z\"></path><path id=\"MJX-307-TEX-I-1D456\" d=\"M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z\"></path><path id=\"MJX-307-TEX-N-3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"></path><path id=\"MJX-307-TEX-N-31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path><path id=\"MJX-307-TEX-N-30\" d=\"M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z\"></path><path id=\"MJX-307-TEX-N-32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"></path><path id=\"MJX-307-TEX-N-33\" d=\"M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z\"></path><path id=\"MJX-307-TEX-N-38\" d=\"M70 417T70 494T124 618T248 666Q319 666 374 624T429 515Q429 485 418 459T392 417T361 389T335 371T324 363L338 354Q352 344 366 334T382 323Q457 264 457 174Q457 95 399 37T249 -22Q159 -22 101 29T43 155Q43 263 172 335L154 348Q133 361 127 368Q70 417 70 494ZM286 386L292 390Q298 394 301 396T311 403T323 413T334 425T345 438T355 454T364 471T369 491T371 513Q371 556 342 586T275 624Q268 625 242 625Q201 625 165 599T128 534Q128 511 141 492T167 463T217 431Q224 426 228 424L286 386ZM250 21Q308 21 350 55T392 137Q392 154 387 169T375 194T353 216T330 234T301 253T274 270Q260 279 244 289T218 306L210 311Q204 311 181 294T133 239T107 157Q107 98 150 60T250 21Z\"></path><path id=\"MJX-307-TEX-N-35\" d=\"M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z\"></path><path id=\"MJX-307-TEX-N-2B\" d=\"M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z\"></path><path id=\"MJX-307-TEX-N-D7\" d=\"M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z\"></path><path id=\"MJX-307-TEX-LO-222B\" d=\"M114 -798Q132 -824 165 -824H167Q195 -824 223 -764T275 -600T320 -391T362 -164Q365 -143 367 -133Q439 292 523 655T645 1127Q651 1145 655 1157T672 1201T699 1257T733 1306T777 1346T828 1360Q884 1360 912 1325T944 1245Q944 1220 932 1205T909 1186T887 1183Q866 1183 849 1198T832 1239Q832 1287 885 1296L882 1300Q879 1303 874 1307T866 1313Q851 1323 833 1323Q819 1323 807 1311T775 1255T736 1139T689 936T633 628Q574 293 510 -5T410 -437T355 -629Q278 -862 165 -862Q125 -862 92 -831T55 -746Q55 -711 74 -698T112 -685Q133 -685 150 -700T167 -741Q167 -789 114 -798Z\"></path><path id=\"MJX-307-TEX-N-221E\" d=\"M55 217Q55 305 111 373T254 442Q342 442 419 381Q457 350 493 303L507 284L514 294Q618 442 747 442Q833 442 888 374T944 214Q944 128 889 59T743 -11Q657 -11 580 50Q542 81 506 128L492 147L485 137Q381 -11 252 -11Q166 -11 111 57T55 217ZM907 217Q907 285 869 341T761 397Q740 397 720 392T682 378T648 359T619 335T594 310T574 285T559 263T548 246L543 238L574 198Q605 158 622 138T664 94T714 61T765 51Q827 51 867 100T907 217ZM92 214Q92 145 131 89T239 33Q357 33 456 193L425 233Q364 312 334 337Q285 380 233 380Q171 380 132 331T92 214Z\"></path><path id=\"MJX-307-TEX-I-1D451\" d=\"M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z\"></path><path id=\"MJX-307-TEX-I-1D465\" d=\"M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z\"></path><path id=\"MJX-307-TEX-N-2F\" d=\"M423 750Q432 750 438 744T444 730Q444 725 271 248T92 -240Q85 -250 75 -250Q68 -250 62 -245T56 -231Q56 -221 230 257T407 740Q411 750 423 750Z\"></path></defs><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\"><g data-mml-node=\"math\"><g data-mml-node=\"mtable\"><g data-mml-node=\"mtr\" transform=\"translate(0, 12.5)\"><g data-mml-node=\"mtd\"><g data-mml-node=\"munderover\"><g data-mml-node=\"mo\"><use xlink:href=\"#MJX-307-TEX-LO-2211\"></use></g><g data-mml-node=\"TeXAtom\" transform=\"translate(148.2, -1087.9) scale(0.707)\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"mi\"><use xlink:href=\"#MJX-307-TEX-I-1D456\"></use></g><g data-mml-node=\"mo\" transform=\"translate(345, 0)\"><use xlink:href=\"#MJX-307-TEX-N-3D\"></use></g><g data-mml-node=\"mn\" transform=\"translate(1123, 0)\"><use xlink:href=\"#MJX-307-TEX-N-31\"></use></g></g><g data-mml-node=\"TeXAtom\" transform=\"translate(368.4, 1150) scale(0.707)\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"mn\"><use xlink:href=\"#MJX-307-TEX-N-31\"></use><use xlink:href=\"#MJX-307-TEX-N-30\" transform=\"translate(500, 0)\"></use></g></g></g><g data-mml-node=\"msup\" transform=\"translate(1610.7, 0)\"><g data-mml-node=\"mi\"><use xlink:href=\"#MJX-307-TEX-I-1D456\"></use></g><g data-mml-node=\"mn\" transform=\"translate(345, 413) scale(0.707)\"><use xlink:href=\"#MJX-307-TEX-N-32\"></use></g></g><g data-mml-node=\"mo\" transform=\"translate(2637, 0)\"><use xlink:href=\"#MJX-307-TEX-N-3D\"></use></g><g data-mml-node=\"mn\" transform=\"translate(3692.8, 0)\"><use xlink:href=\"#MJX-307-TEX-N-33\"></use><use xlink:href=\"#MJX-307-TEX-N-38\" transform=\"translate(500, 0)\"></use><use xlink:href=\"#MJX-307-TEX-N-35\" transform=\"translate(1000, 0)\"></use></g><g data-mml-node=\"mo\" transform=\"translate(5415, 0)\"><use xlink:href=\"#MJX-307-TEX-N-2B\"></use></g><g data-mml-node=\"mn\" transform=\"translate(6415.2, 0)\"><use xlink:href=\"#MJX-307-TEX-N-30\"></use></g><g data-mml-node=\"mo\" transform=\"translate(7137.4, 0)\"><use xlink:href=\"#MJX-307-TEX-N-D7\"></use></g><g data-mml-node=\"msubsup\" transform=\"translate(8137.7, 0)\"><g data-mml-node=\"mo\"><use xlink:href=\"#MJX-307-TEX-LO-222B\"></use></g><g data-mml-node=\"mi\" transform=\"translate(1013.4, 1088.1) scale(0.707)\"><use xlink:href=\"#MJX-307-TEX-N-221E\"></use></g><g data-mml-node=\"mn\" transform=\"translate(556, -896.4) scale(0.707)\"><use xlink:href=\"#MJX-307-TEX-N-31\"></use></g></g><g data-mml-node=\"mi\" transform=\"translate(10074.8, 0)\"><use xlink:href=\"#MJX-307-TEX-I-1D451\"></use></g><g data-mml-node=\"mi\" transform=\"translate(10594.8, 0)\"><use xlink:href=\"#MJX-307-TEX-I-1D465\"></use></g><g data-mml-node=\"TeXAtom\" data-mjx-texclass=\"ORD\" transform=\"translate(11166.8, 0)\"><g data-mml-node=\"mo\"><use xlink:href=\"#MJX-307-TEX-N-2F\"></use></g></g><g data-mml-node=\"msup\" transform=\"translate(11666.8, 0)\"><g data-mml-node=\"mi\"><use xlink:href=\"#MJX-307-TEX-I-1D465\"></use></g><g data-mml-node=\"mn\" transform=\"translate(572, 413) scale(0.707)\"><use xlink:href=\"#MJX-307-TEX-N-32\"></use></g></g></g></g></g></g></g></svg></p><p><button class=\"next-step\">Continue</button></p></x-step>","goals":["next-0"],"keywords":[]},"step-latex-styling-text":{"id":"step-latex-styling-text","title":"Step Latex Styling Text","html":"<x-step id=\"step-latex-styling-text\" goals=\"next-0\"><h3>Styling text</h3><p>Math text is styled using various commands which begin with <span class=\"nowrap\"><code class=\"language-md\">\\math</code>.</span> For example, <code class=\"language-md\">\\mathrm</code> prevents letters in equations from rendering in italics, while <code class=\"language-md\">\\mathbf</code> renders letters or numbers in boldface.</p><pre class=\"language-md\"><code>|\\mathbf{a}|^2 = \\mathbf{a} \\cdot \\mathbf{a}</code></pre><p>is the code for</p><p class=\"text-center\"><svg style=\"vertical-align: -0.717ex\" width=\"10.617ex\" height=\"2.565ex\" class=\"mathjax\" viewBox=\"0 -817 4692.6 1133.9\"><title>\\begin{align*}|\\mathbf{a}|^2 = \\mathbf{a} \\cdot \\mathbf{a}\\end{align*}</title><defs><path id=\"MJX-301-TEX-N-7C\" d=\"M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z\"></path><path id=\"MJX-301-TEX-B-1D41A\" d=\"M64 349Q64 399 107 426T255 453Q346 453 402 423T473 341Q478 327 478 310T479 196V77Q493 63 529 62Q549 62 553 57T558 31Q558 9 552 5T514 0H497H481Q375 0 367 56L356 46Q300 -6 210 -6Q130 -6 81 30T32 121Q32 188 111 226T332 272H350V292Q350 313 348 327T337 361T306 391T248 402T194 399H189Q204 376 204 354Q204 327 187 306T134 284Q97 284 81 305T64 349ZM164 121Q164 89 186 67T238 45Q274 45 307 63T346 108L350 117V226H347Q248 218 206 189T164 121Z\"></path><path id=\"MJX-301-TEX-N-32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"></path><path id=\"MJX-301-TEX-N-3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"></path><path id=\"MJX-301-TEX-N-22C5\" d=\"M78 250Q78 274 95 292T138 310Q162 310 180 294T199 251Q199 226 182 208T139 190T96 207T78 250Z\"></path></defs><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\"><g data-mml-node=\"math\"><g data-mml-node=\"mtable\"><g data-mml-node=\"mtr\" transform=\"translate(0, -67)\"><g data-mml-node=\"mtd\"><g data-mml-node=\"mo\"><use xlink:href=\"#MJX-301-TEX-N-7C\"></use></g><g data-mml-node=\"TeXAtom\" data-mjx-texclass=\"ORD\" transform=\"translate(278, 0)\"><g data-mml-node=\"mi\"><use xlink:href=\"#MJX-301-TEX-B-1D41A\"></use></g></g><g data-mml-node=\"msup\" transform=\"translate(837, 0)\"><g data-mml-node=\"mo\"><use xlink:href=\"#MJX-301-TEX-N-7C\"></use></g><g data-mml-node=\"mn\" transform=\"translate(278, 413) scale(0.707)\"><use xlink:href=\"#MJX-301-TEX-N-32\"></use></g></g><g data-mml-node=\"mo\" transform=\"translate(1796.3, 0)\"><use xlink:href=\"#MJX-301-TEX-N-3D\"></use></g><g data-mml-node=\"TeXAtom\" data-mjx-texclass=\"ORD\" transform=\"translate(2852.1, 0)\"><g data-mml-node=\"mi\"><use xlink:href=\"#MJX-301-TEX-B-1D41A\"></use></g></g><g data-mml-node=\"mo\" transform=\"translate(3633.3, 0)\"><use xlink:href=\"#MJX-301-TEX-N-22C5\"></use></g><g data-mml-node=\"TeXAtom\" data-mjx-texclass=\"ORD\" transform=\"translate(4133.6, 0)\"><g data-mml-node=\"mi\"><use xlink:href=\"#MJX-301-TEX-B-1D41A\"></use></g></g></g></g></g></g></g></svg></p><p>Blackboard bold symbols like <svg style=\"vertical-align: -0.439ex\" width=\"6.788ex\" height=\"1.984ex\" class=\"mathjax\" viewBox=\"0 -683 3000.3 877\"><title>\\mathbb{R}, \\mathbb{Z}, \\mathbb{N}</title><defs><path id=\"MJX-308-TEX-D-211D\" d=\"M17 665Q17 672 28 683H221Q415 681 439 677Q461 673 481 667T516 654T544 639T566 623T584 607T597 592T607 578T614 565T618 554L621 548Q626 530 626 497Q626 447 613 419Q578 348 473 326L455 321Q462 310 473 292T517 226T578 141T637 72T686 35Q705 30 705 16Q705 7 693 -1H510Q503 6 404 159L306 310H268V183Q270 67 271 59Q274 42 291 38Q295 37 319 35Q344 35 353 28Q362 17 353 3L346 -1H28Q16 5 16 16Q16 35 55 35Q96 38 101 52Q106 60 106 341T101 632Q95 645 55 648Q17 648 17 665ZM241 35Q238 42 237 45T235 78T233 163T233 337V621L237 635L244 648H133Q136 641 137 638T139 603T141 517T141 341Q141 131 140 89T134 37Q133 36 133 35H241ZM457 496Q457 540 449 570T425 615T400 634T377 643Q374 643 339 648Q300 648 281 635Q271 628 270 610T268 481V346H284Q327 346 375 352Q421 364 439 392T457 496ZM492 537T492 496T488 427T478 389T469 371T464 361Q464 360 465 360Q469 360 497 370Q593 400 593 495Q593 592 477 630L457 637L461 626Q474 611 488 561Q492 537 492 496ZM464 243Q411 317 410 317Q404 317 401 315Q384 315 370 312H346L526 35H619L606 50Q553 109 464 243Z\"></path><path id=\"MJX-308-TEX-N-2C\" d=\"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z\"></path><path id=\"MJX-308-TEX-D-2124\" d=\"M39 -1Q29 9 29 12Q29 23 60 77T219 337L410 648H364Q261 648 210 628Q168 612 142 588T109 545T97 509T88 490Q85 489 80 489Q72 489 61 503L70 588Q72 607 75 628T79 662T81 675Q84 677 88 681Q90 683 341 683H592Q604 673 604 666Q604 662 412 348L221 37Q221 35 301 35Q406 35 446 48Q504 68 543 111T597 212Q602 239 617 239Q624 239 629 234T635 223Q635 215 621 113T604 8L597 1Q595 -1 317 -1H39ZM148 637L166 648H112V632Q111 629 110 622T108 612Q108 608 110 608T116 612T129 623T148 637ZM552 646Q552 648 504 648Q452 648 450 643Q448 639 266 343T77 37Q77 35 128 35H179L366 339L552 646ZM572 35Q581 89 581 97L561 77Q542 59 526 48L508 37L539 35H572Z\"></path><path id=\"MJX-308-TEX-D-2115\" d=\"M20 664Q20 666 31 683H142Q256 683 258 681Q259 680 279 653T342 572T422 468L582 259V425Q582 451 582 490T583 541Q583 611 573 628T522 648Q500 648 493 654Q484 665 493 679L500 683H691Q702 676 702 666Q702 657 698 652Q688 648 680 648Q633 648 627 612Q624 601 624 294V-8Q616 -20 607 -20Q601 -20 596 -15Q593 -13 371 270L156 548L153 319Q153 284 153 234T152 167Q152 103 156 78T172 44T213 34Q236 34 242 28Q253 17 242 3L236 -1H36Q24 6 24 16Q24 34 56 34Q58 35 69 36T86 40T100 50T109 72Q111 83 111 345V603L96 619Q72 643 44 648Q20 648 20 664ZM413 419L240 648H120L136 628Q137 626 361 341T587 54L589 68Q589 78 589 121V192L413 419Z\"></path></defs><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\"><g data-mml-node=\"math\"><g data-mml-node=\"TeXAtom\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"mi\"><use xlink:href=\"#MJX-308-TEX-D-211D\"></use></g></g><g data-mml-node=\"mo\" transform=\"translate(722, 0)\"><use xlink:href=\"#MJX-308-TEX-N-2C\"></use></g><g data-mml-node=\"TeXAtom\" data-mjx-texclass=\"ORD\" transform=\"translate(1166.7, 0)\"><g data-mml-node=\"mi\"><use xlink:href=\"#MJX-308-TEX-D-2124\"></use></g></g><g data-mml-node=\"mo\" transform=\"translate(1833.7, 0)\"><use xlink:href=\"#MJX-308-TEX-N-2C\"></use></g><g data-mml-node=\"TeXAtom\" data-mjx-texclass=\"ORD\" transform=\"translate(2278.3, 0)\"><g data-mml-node=\"mi\"><use xlink:href=\"#MJX-308-TEX-D-2115\"></use></g></g></g></g></svg> are typeset like <span class=\"nowrap\"><code class=\"language-md\">\\mathbb{R}, \\mathbb{Z}, \\mathbb{N}</code>.</span></p><p><button class=\"next-step\">Continue</button></p></x-step>","goals":["next-0"],"keywords":[]},"step-latex-delimiters":{"id":"step-latex-delimiters","title":"Step Latex Delimiters","html":"<x-step id=\"step-latex-delimiters\" goals=\"next-0\"><h3>Delimiters</h3><p>Delimiters (like parentheses or brackets) can be made to reach vertically as far as necessary to properly enclose the content they surround. The delimiting characters must be preceded by <code class=\"language-md\">\\left</code> and <span class=\"nowrap\"><code class=\"language-md\">right</code>.</span></p><pre class=\"language-md\"><code>\\mathrm{e}^x = \\lim_{n \\to \\infty} \\left( 1 + \\frac{x}{n} \\right)^n</code></pre><p>renders as</p><p class=\"text-center\"><svg style=\"vertical-align: -1.58ex\" width=\"19.611ex\" height=\"4.292ex\" class=\"mathjax\" viewBox=\"0 -1198.4 8667.9 1896.9\"><title>\\begin{align*}\\mathrm{e}^x = \\lim_{n \\to \\infty} \\left( 1 + \\frac{x}{n} \\right)^n\\end{align*}</title><defs><path id=\"MJX-302-TEX-N-65\" d=\"M28 218Q28 273 48 318T98 391T163 433T229 448Q282 448 320 430T378 380T406 316T415 245Q415 238 408 231H126V216Q126 68 226 36Q246 30 270 30Q312 30 342 62Q359 79 369 104L379 128Q382 131 395 131H398Q415 131 415 121Q415 117 412 108Q393 53 349 21T250 -11Q155 -11 92 58T28 218ZM333 275Q322 403 238 411H236Q228 411 220 410T195 402T166 381T143 340T127 274V267H333V275Z\"></path><path id=\"MJX-302-TEX-I-1D465\" d=\"M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z\"></path><path id=\"MJX-302-TEX-N-3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"></path><path id=\"MJX-302-TEX-N-6C\" d=\"M42 46H56Q95 46 103 60V68Q103 77 103 91T103 124T104 167T104 217T104 272T104 329Q104 366 104 407T104 482T104 542T103 586T103 603Q100 622 89 628T44 637H26V660Q26 683 28 683L38 684Q48 685 67 686T104 688Q121 689 141 690T171 693T182 694H185V379Q185 62 186 60Q190 52 198 49Q219 46 247 46H263V0H255L232 1Q209 2 183 2T145 3T107 3T57 1L34 0H26V46H42Z\"></path><path id=\"MJX-302-TEX-N-69\" d=\"M69 609Q69 637 87 653T131 669Q154 667 171 652T188 609Q188 579 171 564T129 549Q104 549 87 564T69 609ZM247 0Q232 3 143 3Q132 3 106 3T56 1L34 0H26V46H42Q70 46 91 49Q100 53 102 60T104 102V205V293Q104 345 102 359T88 378Q74 385 41 385H30V408Q30 431 32 431L42 432Q52 433 70 434T106 436Q123 437 142 438T171 441T182 442H185V62Q190 52 197 50T232 46H255V0H247Z\"></path><path id=\"MJX-302-TEX-N-6D\" d=\"M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q351 442 364 440T387 434T406 426T421 417T432 406T441 395T448 384T452 374T455 366L457 361L460 365Q463 369 466 373T475 384T488 397T503 410T523 422T546 432T572 439T603 442Q729 442 740 329Q741 322 741 190V104Q741 66 743 59T754 49Q775 46 803 46H819V0H811L788 1Q764 2 737 2T699 3Q596 3 587 0H579V46H595Q656 46 656 62Q657 64 657 200Q656 335 655 343Q649 371 635 385T611 402T585 404Q540 404 506 370Q479 343 472 315T464 232V168V108Q464 78 465 68T468 55T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z\"></path><path id=\"MJX-302-TEX-I-1D45B\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"></path><path id=\"MJX-302-TEX-N-2192\" d=\"M56 237T56 250T70 270H835Q719 357 692 493Q692 494 692 496T691 499Q691 511 708 511H711Q720 511 723 510T729 506T732 497T735 481T743 456Q765 389 816 336T935 261Q944 258 944 250Q944 244 939 241T915 231T877 212Q836 186 806 152T761 85T740 35T732 4Q730 -6 727 -8T711 -11Q691 -11 691 0Q691 7 696 25Q728 151 835 230H70Q56 237 56 250Z\"></path><path id=\"MJX-302-TEX-N-221E\" d=\"M55 217Q55 305 111 373T254 442Q342 442 419 381Q457 350 493 303L507 284L514 294Q618 442 747 442Q833 442 888 374T944 214Q944 128 889 59T743 -11Q657 -11 580 50Q542 81 506 128L492 147L485 137Q381 -11 252 -11Q166 -11 111 57T55 217ZM907 217Q907 285 869 341T761 397Q740 397 720 392T682 378T648 359T619 335T594 310T574 285T559 263T548 246L543 238L574 198Q605 158 622 138T664 94T714 61T765 51Q827 51 867 100T907 217ZM92 214Q92 145 131 89T239 33Q357 33 456 193L425 233Q364 312 334 337Q285 380 233 380Q171 380 132 331T92 214Z\"></path><path id=\"MJX-302-TEX-LO-28\" d=\"M180 96T180 250T205 541T266 770T353 944T444 1069T527 1150H555Q561 1144 561 1141Q561 1137 545 1120T504 1072T447 995T386 878T330 721T288 513T272 251Q272 133 280 56Q293 -87 326 -209T399 -405T475 -531T536 -609T561 -640Q561 -643 555 -649H527Q483 -612 443 -568T353 -443T266 -270T205 -41Z\"></path><path id=\"MJX-302-TEX-N-31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path><path id=\"MJX-302-TEX-N-2B\" d=\"M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z\"></path><path id=\"MJX-302-TEX-LO-29\" d=\"M35 1138Q35 1150 51 1150H56H69Q113 1113 153 1069T243 944T330 771T391 541T416 250T391 -40T330 -270T243 -443T152 -568T69 -649H56Q43 -649 39 -647T35 -637Q65 -607 110 -548Q283 -316 316 56Q324 133 324 251Q324 368 316 445Q278 877 48 1123Q36 1137 35 1138Z\"></path></defs><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\"><g data-mml-node=\"math\"><g data-mml-node=\"mtable\"><g data-mml-node=\"mtr\" transform=\"translate(0, 9.3)\"><g data-mml-node=\"mtd\"><g data-mml-node=\"msup\"><g data-mml-node=\"TeXAtom\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"mi\"><use xlink:href=\"#MJX-302-TEX-N-65\"></use></g></g><g data-mml-node=\"mi\" transform=\"translate(444, 413) scale(0.707)\"><use xlink:href=\"#MJX-302-TEX-I-1D465\"></use></g></g><g data-mml-node=\"mo\" transform=\"translate(1176.2, 0)\"><use xlink:href=\"#MJX-302-TEX-N-3D\"></use></g><g data-mml-node=\"munder\" transform=\"translate(2232, 0)\"><g data-mml-node=\"mo\" transform=\"translate(224.7, 0)\"><use xlink:href=\"#MJX-302-TEX-N-6C\"></use><use xlink:href=\"#MJX-302-TEX-N-69\" transform=\"translate(278, 0)\"></use><use xlink:href=\"#MJX-302-TEX-N-6D\" transform=\"translate(556, 0)\"></use></g><g data-mml-node=\"TeXAtom\" transform=\"translate(0, -600) scale(0.707)\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"mi\"><use xlink:href=\"#MJX-302-TEX-I-1D45B\"></use></g><g data-mml-node=\"mo\" transform=\"translate(600, 0)\"><use xlink:href=\"#MJX-302-TEX-N-2192\"></use></g><g data-mml-node=\"mi\" transform=\"translate(1600, 0)\"><use xlink:href=\"#MJX-302-TEX-N-221E\"></use></g></g></g><g data-mml-node=\"msup\" transform=\"translate(4237.2, 0)\"><g data-mml-node=\"mrow\"><g data-mml-node=\"mo\"><use xlink:href=\"#MJX-302-TEX-LO-28\"></use></g><g data-mml-node=\"mn\" transform=\"translate(597, 0)\"><use xlink:href=\"#MJX-302-TEX-N-31\"></use></g><g data-mml-node=\"mo\" transform=\"translate(1319.2, 0)\"><use xlink:href=\"#MJX-302-TEX-N-2B\"></use></g><g data-mml-node=\"mfrac\" transform=\"translate(2319.4, 0)\"><g data-mml-node=\"mi\" transform=\"translate(234, 676)\"><use xlink:href=\"#MJX-302-TEX-I-1D465\"></use></g><g data-mml-node=\"mi\" transform=\"translate(220, -686)\"><use xlink:href=\"#MJX-302-TEX-I-1D45B\"></use></g><rect width=\"800\" height=\"60\" x=\"120\" y=\"220\"></rect></g><g data-mml-node=\"mo\" transform=\"translate(3359.4, 0)\"><use xlink:href=\"#MJX-302-TEX-LO-29\"></use></g></g><g data-mml-node=\"mi\" transform=\"translate(3956.4, 876.6) scale(0.707)\"><use xlink:href=\"#MJX-302-TEX-I-1D45B\"></use></g></g></g></g></g></g></g></svg></p><p><button class=\"next-step\">Continue</button></p></x-step>","goals":["next-0"],"keywords":[]},"step-latex-displayed-equations":{"id":"step-latex-displayed-equations","title":"Step Latex Displayed Equations","html":"<x-step id=\"step-latex-displayed-equations\" goals=\"next-0\"><h3>Displayed equations</h3><p>Multi-line displayed equations (which are rendered in the center of the page and on their own lines) open with <code class=\"language-bash\">\\begin{align*}</code> and close with <span class=\"nowrap\"><code class=\"language-bash\">\\end{align*}</code>.</span> Lines are separated with a double backslash, and an ampersand goes in front of the character in each line that should be used for alignment (usually the equals sign):</p><pre class=\"language-md\"><code>\\begin{align*}\n(x+y)^2 &amp;= (x+y)(x+y) \\\\\\\n        &amp;= x^2 + 2xy + y^2\n\\end{align*}</code></pre><p>gives the equation</p><p class=\"text-center\"><svg style=\"vertical-align: -2.339ex\" width=\"24.716ex\" height=\"5.81ex\" class=\"mathjax\" viewBox=\"0 -1533.9 10924.4 2567.9\"><title>\\begin{align*}(x+y)^2 &amp;= (x+y)(x+y) \\\\ &amp;= x^2 + 2xy + y^2\\end{align*}</title><defs><path id=\"MJX-303-TEX-N-28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"></path><path id=\"MJX-303-TEX-I-1D465\" d=\"M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z\"></path><path id=\"MJX-303-TEX-N-2B\" d=\"M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z\"></path><path id=\"MJX-303-TEX-I-1D466\" d=\"M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z\"></path><path id=\"MJX-303-TEX-N-29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"></path><path id=\"MJX-303-TEX-N-32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"></path><path id=\"MJX-303-TEX-N-3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"></path></defs><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\"><g data-mml-node=\"math\"><g data-mml-node=\"mtable\"><g data-mml-node=\"mtr\" transform=\"translate(0, 650)\"><g data-mml-node=\"mtd\"><g data-mml-node=\"mo\"><use xlink:href=\"#MJX-303-TEX-N-28\"></use></g><g data-mml-node=\"mi\" transform=\"translate(389, 0)\"><use xlink:href=\"#MJX-303-TEX-I-1D465\"></use></g><g data-mml-node=\"mo\" transform=\"translate(1183.2, 0)\"><use xlink:href=\"#MJX-303-TEX-N-2B\"></use></g><g data-mml-node=\"mi\" transform=\"translate(2183.4, 0)\"><use xlink:href=\"#MJX-303-TEX-I-1D466\"></use></g><g data-mml-node=\"msup\" transform=\"translate(2673.4, 0)\"><g data-mml-node=\"mo\"><use xlink:href=\"#MJX-303-TEX-N-29\"></use></g><g data-mml-node=\"mn\" transform=\"translate(389, 413) scale(0.707)\"><use xlink:href=\"#MJX-303-TEX-N-32\"></use></g></g></g><g data-mml-node=\"mtd\" transform=\"translate(3466, 0)\"><g data-mml-node=\"mi\"></g><g data-mml-node=\"mo\" transform=\"translate(277.8, 0)\"><use xlink:href=\"#MJX-303-TEX-N-3D\"></use></g><g data-mml-node=\"mo\" transform=\"translate(1333.6, 0)\"><use xlink:href=\"#MJX-303-TEX-N-28\"></use></g><g data-mml-node=\"mi\" transform=\"translate(1722.6, 0)\"><use xlink:href=\"#MJX-303-TEX-I-1D465\"></use></g><g data-mml-node=\"mo\" transform=\"translate(2516.8, 0)\"><use xlink:href=\"#MJX-303-TEX-N-2B\"></use></g><g data-mml-node=\"mi\" transform=\"translate(3517, 0)\"><use xlink:href=\"#MJX-303-TEX-I-1D466\"></use></g><g data-mml-node=\"mo\" transform=\"translate(4007, 0)\"><use xlink:href=\"#MJX-303-TEX-N-29\"></use></g><g data-mml-node=\"mo\" transform=\"translate(4396, 0)\"><use xlink:href=\"#MJX-303-TEX-N-28\"></use></g><g data-mml-node=\"mi\" transform=\"translate(4785, 0)\"><use xlink:href=\"#MJX-303-TEX-I-1D465\"></use></g><g data-mml-node=\"mo\" transform=\"translate(5579.2, 0)\"><use xlink:href=\"#MJX-303-TEX-N-2B\"></use></g><g data-mml-node=\"mi\" transform=\"translate(6579.4, 0)\"><use xlink:href=\"#MJX-303-TEX-I-1D466\"></use></g><g data-mml-node=\"mo\" transform=\"translate(7069.4, 0)\"><use xlink:href=\"#MJX-303-TEX-N-29\"></use></g></g></g><g data-mml-node=\"mtr\" transform=\"translate(0, -783.9)\"><g data-mml-node=\"mtd\" transform=\"translate(3466, 0)\"></g><g data-mml-node=\"mtd\" transform=\"translate(3466, 0)\"><g data-mml-node=\"mi\"></g><g data-mml-node=\"mo\" transform=\"translate(277.8, 0)\"><use xlink:href=\"#MJX-303-TEX-N-3D\"></use></g><g data-mml-node=\"msup\" transform=\"translate(1333.6, 0)\"><g data-mml-node=\"mi\"><use xlink:href=\"#MJX-303-TEX-I-1D465\"></use></g><g data-mml-node=\"mn\" transform=\"translate(572, 413) scale(0.707)\"><use xlink:href=\"#MJX-303-TEX-N-32\"></use></g></g><g data-mml-node=\"mo\" transform=\"translate(2531.3, 0)\"><use xlink:href=\"#MJX-303-TEX-N-2B\"></use></g><g data-mml-node=\"mn\" transform=\"translate(3531.6, 0)\"><use xlink:href=\"#MJX-303-TEX-N-32\"></use></g><g data-mml-node=\"mi\" transform=\"translate(4031.6, 0)\"><use xlink:href=\"#MJX-303-TEX-I-1D465\"></use></g><g data-mml-node=\"mi\" transform=\"translate(4603.6, 0)\"><use xlink:href=\"#MJX-303-TEX-I-1D466\"></use></g><g data-mml-node=\"mo\" transform=\"translate(5315.8, 0)\"><use xlink:href=\"#MJX-303-TEX-N-2B\"></use></g><g data-mml-node=\"msup\" transform=\"translate(6316, 0)\"><g data-mml-node=\"mi\"><use xlink:href=\"#MJX-303-TEX-I-1D466\"></use></g><g data-mml-node=\"mn\" transform=\"translate(490, 413) scale(0.707)\"><use xlink:href=\"#MJX-303-TEX-N-32\"></use></g></g></g></g></g></g></g></svg></p><p><button class=\"next-step\">Continue</button></p></x-step>","goals":["next-0"],"keywords":[]},"step-latex-arrays":{"id":"step-latex-arrays","title":"Step Latex Arrays","html":"<x-step id=\"step-latex-arrays\" goals=\"\"><h3>Arrays</h3><p>The easiest way to create a matrix is to use a <code class=\"language-bash\">bmatrix</code> environment. Rows are separated with a double backslash, and entries within each row are separated by ampersands.</p><pre class=\"language-md\"><code>\\begin{bmatrix}\n1 &amp; 2 \\\\\\\n3 &amp; 4\n\\end{bmatrix}</code></pre><p>becomes</p><p class=\"text-center\"><svg style=\"vertical-align: -2.149ex\" width=\"6.914ex\" height=\"5.43ex\" class=\"mathjax\" viewBox=\"0 -1450 3056 2400\"><title>\\begin{align*}\\begin{bmatrix} 1 &amp; 2 \\\\ 3 &amp; 4 \\end{bmatrix}\\end{align*}</title><defs><path id=\"MJX-304-TEX-S3-5B\" d=\"M247 -949V1450H516V1388H309V-887H516V-949H247Z\"></path><path id=\"MJX-304-TEX-N-31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path><path id=\"MJX-304-TEX-N-32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"></path><path id=\"MJX-304-TEX-N-33\" d=\"M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z\"></path><path id=\"MJX-304-TEX-N-34\" d=\"M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z\"></path><path id=\"MJX-304-TEX-S3-5D\" d=\"M11 1388V1450H280V-949H11V-887H218V1388H11Z\"></path></defs><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\"><g data-mml-node=\"math\"><g data-mml-node=\"mtable\"><g data-mml-node=\"mtr\"><g data-mml-node=\"mtd\"><g data-mml-node=\"mrow\"><g data-mml-node=\"mo\"><use xlink:href=\"#MJX-304-TEX-S3-5B\"></use></g><g data-mml-node=\"mtable\" transform=\"translate(528, 0)\"><g data-mml-node=\"mtr\" transform=\"translate(0, 700)\"><g data-mml-node=\"mtd\"><g data-mml-node=\"mn\"><use xlink:href=\"#MJX-304-TEX-N-31\"></use></g></g><g data-mml-node=\"mtd\" transform=\"translate(1500, 0)\"><g data-mml-node=\"mn\"><use xlink:href=\"#MJX-304-TEX-N-32\"></use></g></g></g><g data-mml-node=\"mtr\" transform=\"translate(0, -700)\"><g data-mml-node=\"mtd\"><g data-mml-node=\"mn\"><use xlink:href=\"#MJX-304-TEX-N-33\"></use></g></g><g data-mml-node=\"mtd\" transform=\"translate(1500, 0)\"><g data-mml-node=\"mn\"><use xlink:href=\"#MJX-304-TEX-N-34\"></use></g></g></g></g><g data-mml-node=\"mo\" transform=\"translate(2528, 0)\"><use xlink:href=\"#MJX-304-TEX-S3-5D\"></use></g></g></g></g></g></g></g></svg></p></x-step>","goals":[],"keywords":[]},"Conda":{"id":"Conda","title":"Conda","html":"<x-step id=\"Conda\" goals=\"next-0\"><p>Suppose you've written some Python code that you want to share. Other users will have to get your code and perform some setup operations, including making their Python environment aware of your package so they can <code class=\"language-md\">import</code> it. Ideally you'd communicate information about any other modules that your module requires, so that users can make sure they have all of the requirements before they try to use your module. When you make improvements to your code, you'd like for your users to be able to get those changes as effortlessly as possible, preferably without having to go through installation steps again.</p><p><button class=\"next-step\">Continue</button></p></x-step>","goals":["next-0"],"keywords":[]},"step-code-distribution-challenges":{"id":"step-code-distribution-challenges","title":"Step Code Distribution Challenges","html":"<x-step id=\"step-code-distribution-challenges\" goals=\"next-0\"><p>These code distribution challenges are difficult to manage manually, so developers have built systems designed to automate code distribution processes. These systems are called <strong>package managers</strong>. The main package managers for Python are <strong>Pip</strong> and <strong>Anaconda</strong>. Pip is a general Python installer, installing packages from the <a href=\"https://pypi.org\" target=\"_blank\">Python Package Index</a>. Anaconda is more geared toward data science, and it installs packages from its own collection called <a href=\"https://repo.continuum.io/\" target=\"_blank\">Anaconda Repository</a>.</p><p><button class=\"next-step\">Continue</button></p></x-step>","goals":["next-0"],"keywords":[]},"step-install-anaconda":{"id":"step-install-anaconda","title":"Step Install Anaconda","html":"<x-step id=\"step-install-anaconda\" goals=\"next-0\"><p>We recommend <a href=\"https://docs.anaconda.com/anaconda/install/\" target=\"_blank\">installing Anaconda</a> and using it to manage your packages. Anaconda has a few important advantages over Pip:</p><ol> <li>Anaconda ensures that all requirements of all available packages are satisfied. Pip updates your environment when you install a package based on <em>that</em> package's requirements. Such an update might break previously installed packages, since they might depend on a different version of the same package.</li></ol> <p><button class=\"next-step\">Continue</button></p></x-step>","goals":["next-0"],"keywords":[]},"step-virtual-environments-idea":{"id":"step-virtual-environments-idea","title":"Step Virtual Environments Idea","html":"<x-step id=\"step-virtual-environments-idea\" goals=\"next-0\"><ol start=\"2\"> <li>Anaconda provides built-in support for managing multiple <em>virtual environments</em>. If Package A and Package B have incompatible versions of Package C, you can set up one virtual environment with Package A and one version Package C, and a second virtual environment with Package B and another version of Package C.</li></ol> <p><button class=\"next-step\">Continue</button></p></x-step>","goals":["next-0"],"keywords":[]},"step-anaconda-binaries":{"id":"step-anaconda-binaries","title":"Step Anaconda Binaries","html":"<x-step id=\"step-anaconda-binaries\" goals=\"next-0\"><ol start=\"3\"> <li>For packages that depend on compiled code, Anaconda directly installs <span class=\"nowrap\"><x-gloss xid=\"binary-file\"><em>binaries</em></x-gloss>.</span> This means that these dependencies are built by the package maintainers sent to you ready to run. If the build process happens on your computer, there are more opportunities for things to go wrong in the installation process.</li></ol> <p><button class=\"next-step\">Continue</button></p></x-step>","goals":["next-0"],"keywords":[]},"step-sometimes-use-pip":{"id":"step-sometimes-use-pip","title":"Step Sometimes Use Pip","html":"<x-step id=\"step-sometimes-use-pip\" goals=\"blank-0 blank-1 blank-2 next-0\"><p>Some packages are available on PyPI but not Anaconda, and in these cases we recommend that you use <span class=\"nowrap\"><code class=\"language-bash\">pip</code>.</span></p><p><button class=\"next-step\">Continue</button></p><div class=\"exercise\"> <p><strong>Exercise</strong> </p><ol> <li>Virtual environments are important for <span class=\"nowrap\"><x-blank-mc goal=\"blank-0\"><button class=\"choice\">reproducibility</button><button class=\"choice\">speed</button></x-blank-mc>.</span></li><li>Because Conda is doing <x-blank-mc goal=\"blank-1\"><button class=\"choice\">more</button><button class=\"choice\">less</button></x-blank-mc> computation to ensure all required dependencies are met, it often takes longer than Pip to install a new package.</li><li>Separate virtual environments can be used to manage incompatible dependencies between two projects. <x-blank-mc goal=\"blank-2\"><button class=\"choice\">True</button><button class=\"choice\">False</button></x-blank-mc></li></ol> </div> </x-step>","goals":["blank-0","blank-1","blank-2","next-0"],"keywords":[]},"virtual-environments":{"id":"virtual-environments","title":"Virtual Environments","html":"<x-step id=\"virtual-environments\" goals=\"next-0\"><h2>Virtual Environments</h2><p>Your Python <strong>environment</strong> is the set of packages you have available to <code class=\"language-bash\">import</code> in a Python session. For example, a user's Python environment often includes all of the packages installed on the computer. A <strong>virtual environment</strong> emulates such an environment by exposing specific packages (and specific versions of those packages) to the Python interpreter. Virtual environments are useful because they allow the user to quickly switch between different sets of available packages. They also make it possible to be confident about exactly what packages are needed for a given application and share that information so that others can reproduce an environment without interfering with other environments they might need on that machine.</p><p><button class=\"next-step\">Continue</button></p></x-step>","goals":["next-0"],"keywords":[]},"step-virtual-env-numpy-example":{"id":"step-virtual-env-numpy-example","title":"Step Virtual Env Numpy Example","html":"<x-step id=\"step-virtual-env-numpy-example\" goals=\"next-0\"><p>For example, if you need NumPy 1.16.3 for one project and NumPy 1.16.4 for a different project, your package manager can install <em>both</em> versions and just change which one is used when you execute <span class=\"nowrap\"><code class=\"language-python\">import numpy</code>.</span> This is much more convenient than uninstalling one version and installing the other every time you need to switch between the two projects.</p><p><button class=\"next-step\">Continue</button></p></x-step>","goals":["next-0"],"keywords":[]},"step-set-up-conda":{"id":"step-set-up-conda","title":"Step Set Up Conda","html":"<x-step id=\"step-set-up-conda\" goals=\"next-0\"><p>To use conda virtual environments, we first have to set up conda to work with our shell. This requires restarting bash.</p><pre bash-executable=\"bash-executable\">conda init bash\nconda config --set changeps1 False\nexit</pre><p>The second line configures conda to refrain from its default behavior of printing the name of the current environment every time a command is run from the command line. You might find this setting preferable on your own computer, but it will be essential for us as we execute the bash cells in this section.</p><p><button class=\"next-step\">Continue</button></p></x-step>","goals":["next-0"],"keywords":[]},"step-conda-create":{"id":"step-conda-create","title":"Step Conda Create","html":"<x-step id=\"step-conda-create\" goals=\"next-0\"><p>To create a new Anaconda virtual environment, use <span class=\"nowrap\"><code class=\"language-bash\">conda create</code>.</span> To activate an environment, use <span class=\"nowrap\"><code class=\"language-bash\">conda activate</code>.</span> (Note: this cell takes a few dozen seconds to run, and it prints quite a bit of text. The <code class=\"language-bash\">--yes</code> argument automatically answers \"yes\" when conda asks us whether we want to proceed)</p><pre bash-executable=\"bash-executable\">conda create -n myenv python numpy=1.16.4 --yes\nconda activate myenv</pre><p><button class=\"next-step\">Continue</button></p></x-step>","goals":["next-0"],"keywords":[]},"step-check-numpy-conda":{"id":"step-check-numpy-conda","title":"Step Check Numpy Conda","html":"<x-step id=\"step-check-numpy-conda\" goals=\"next-0\"><p>We can check that our newly activated environment has NumPy but not Pandas. </p><pre bash-executable=\"bash-executable\">echo \"import numpy\" &gt; tmp.py\necho \"print(numpy.version.version)\" &gt;&gt; tmp.py\necho \"import pandas\" &gt;&gt; tmp.py\npython tmp.py</pre><p><button class=\"next-step\">Continue</button></p></x-step>","goals":["next-0"],"keywords":[]},"step-conda-env-list":{"id":"step-conda-env-list","title":"Step Conda Env List","html":"<x-step id=\"step-conda-env-list\" goals=\"next-0\"><p>We can view all of the environments we've set up with <span class=\"nowrap\"><code class=\"language-bash\">conda env list</code>:</span></p><pre bash-executable=\"bash-executable\">conda env list</pre><p><button class=\"next-step\">Continue</button></p></x-step>","goals":["next-0"],"keywords":[]},"step-conda-install":{"id":"step-conda-install","title":"Step Conda Install","html":"<x-step id=\"step-conda-install\" goals=\"next-0\"><p>Conda installation operations modify the current environment. For example, we can add pandas:</p><pre bash-executable=\"bash-executable\">conda install pandas --yes\npython tmp.py</pre><p><button class=\"next-step\">Continue</button></p></x-step>","goals":["next-0"],"keywords":[]},"step-conda-export":{"id":"step-conda-export","title":"Step Conda Export","html":"<x-step id=\"step-conda-export\" goals=\"blank-0 blank-1\"><p>We can get a readable version of the current environment using <span class=\"nowrap\"><code class=\"language-bash\">export</code>:</span></p><pre bash-executable=\"bash-executable\">conda env export</pre><p>The output of this command can saved to a file—customarily called <code class=\"language-bash\">environment.yml</code>— which can be used by others to replicate the environment. Just for practice, let's save the environment to a <x-gloss xid=\"YAML\">YAML</x-gloss> file, remove the environment from our system, and then re-create it from the YAML file.</p><pre bash-executable=\"bash-executable\">conda env export &gt; environment.yml\nconda remove -n myenv --all\nconda env create -f environment.yml</pre><p>Note that we used the <code class=\"language-bash\">-f</code> argument to make <code class=\"language-bash\">conda env create</code> get the package list from the <code class=\"language-bash\">environment.yml</code> file rather than directly from the command line.</p><div class=\"exercise\"> <p><strong>Exercise</strong><br>If you want a colleague to be able to reproduce the Python environment you used in a particular project, one convenient way to do that is to give them your <x-blank-mc goal=\"blank-0\"><button class=\"choice\">environment.yml</button><button class=\"choice\">contents.txt</button></x-blank-mc> file, using <span class=\"nowrap\"><x-blank-mc goal=\"blank-1\"><button class=\"choice\"><code class=\"language-md\">conda env export</code></button><button class=\"choice\"><code class=\"language-md\">conda env list</code></button></x-blank-mc>.</span></p></div> </x-step>","goals":["blank-0","blank-1"],"keywords":[]},"other-reproducibility-solutions":{"id":"other-reproducibility-solutions","title":"Other Reproducibility Solutions","html":"<x-step id=\"other-reproducibility-solutions\" goals=\"next-0\"><h2>Other reproducibility solutions</h2><p>We will close this section by mentioning two other solutions for the reproducibility problem. If you're working with a non-Conda Python installation, you can use pip together with <strong>virtualenv</strong> to reproduce the virtual environment functionality of Conda. You can also get pip to give you a list of the packages and versions available in the local virtual environment using <span class=\"nowrap\"><code class=\"language-python\">pip freeze</code>.</span></p><p><button class=\"next-step\">Continue</button></p></x-step>","goals":["next-0"],"keywords":[]},"docker":{"id":"docker","title":"Docker","html":"<x-step id=\"docker\" goals=\"\"><p>A much more general-purpose tool for achieving reproducibility is <strong>Docker</strong>. We'll discuss Docker more extensively in the final section in this course.</p></x-step>","goals":[],"keywords":[]},"markdown":{"id":"markdown","title":"Markdown","html":"<x-step id=\"markdown\" goals=\"next-0\"><p>Websites are written in HTML, which is a document specification language that supports many embellishments like boldface, italics, numbered lists, links, etc. HTML can be difficult to read directly, however, because the markers are quite obtrusive. Here's a (silly) example to illustrate the point:</p><figure><img src=\"/content/data-science-utilities/images/html-example.png\" alt=\"\"></figure><p></p><p><button class=\"next-step\">Continue</button></p></x-step>","goals":["next-0"],"keywords":[]},"step-markdown-invented":{"id":"step-markdown-invented","title":"Step Markdown Invented","html":"<x-step id=\"step-markdown-invented\" goals=\"next-0\"><p>Markdown was invented in 2004 by John Gruber and Aaron Swartz as a tool for specifying rich text (boldface, italics, links, etc.) in a plain text file that is easy to read and write. Here's the example above in Markdown:</p><pre class=\"language-markdown\"><code>The *quick* brown fox **jumped** over the lazy `dog`.</code></pre><p><button class=\"next-step\">Continue</button></p></x-step>","goals":["next-0"],"keywords":[]},"step-markdown-lingua-franca":{"id":"step-markdown-lingua-franca","title":"Step Markdown Lingua Franca","html":"<x-step id=\"step-markdown-lingua-franca\" goals=\"next-0\"><p>Markdown has since become a <x-gloss xid=\"lingua-franca\">lingua franca</x-gloss> among developers and data scientists. For example, forum content on GitHub is specified in Markdown. Rather than having a single rich-text editor, the user is presented with a plain text editor and a <em>Preview</em> tab to see how the Markdown will render in the forum:</p><figure><img src=\"/content/data-science-utilities/images/github-markdown-input.png\" alt=\"\"><img src=\"/content/data-science-utilities/images/github-markdown-output.png\" alt=\"\"></figure><p><button class=\"next-step\">Continue</button></p></x-step>","goals":["next-0"],"keywords":[]},"markdown-rules":{"id":"markdown-rules","title":"Markdown Rules","html":"<x-step id=\"markdown-rules\" goals=\"next-0\"><h2>Markdown rules</h2><p>The list of essential Markdown rules is pretty short:</p><ol> <li>Boldface is indicated with double underscores or double asterisks: <code class=\"language-md\">__This text is bold__</code> or <span class=\"nowrap\"><code class=\"language-md\">**This text is bold**</code>.</span></li></ol> <p><button class=\"next-step\">Continue</button></p></x-step>","goals":["next-0"],"keywords":[]},"step-markdown-italics":{"id":"step-markdown-italics","title":"Step Markdown Italics","html":"<x-step id=\"step-markdown-italics\" goals=\"next-0\"><ol start=\"2\"> <li>For italics, use underscores or asterisks: <code class=\"language-md\">_This text is italic_</code> or <span class=\"nowrap\"><code class=\"language-md\">*This text is italic*</code>.</span></li></ol> <p><button class=\"next-step\">Continue</button></p></x-step>","goals":["next-0"],"keywords":[]},"step-markdown-headers":{"id":"step-markdown-headers","title":"Step Markdown Headers","html":"<x-step id=\"step-markdown-headers\" goals=\"next-0\"><ol start=\"3\"> <li><p>Headers are indicated with a number of hashmarks followed by a space and the header text. Top-level headers use a single hashmark, and using more hashmarks makes the resulting font size increasingly small</p><pre class=\"language-markup\"><code># Top-level title\n## Section 1\n### Subsection\n## Section 2</code></pre></li></ol> <p><button class=\"next-step\">Continue</button></p></x-step>","goals":["next-0"],"keywords":[]},"step-markdown-links":{"id":"step-markdown-links","title":"Step Markdown Links","html":"<x-step id=\"step-markdown-links\" goals=\"next-0\"><ol start=\"4\"> <li>Links use square brackets around the text to be displayed and parentheses around the URL to be linked: <span class=\"nowrap\"><code class=\"language-md\">[Click here](http://www.google.com)</code>.</span></li></ol> <p><button class=\"next-step\">Continue</button></p></x-step>","goals":["next-0"],"keywords":[]},"step-markdown-images":{"id":"step-markdown-images","title":"Step Markdown Images","html":"<x-step id=\"step-markdown-images\" goals=\"next-0\"><ol start=\"5\"> <li><p>Images are included using the link syntax preceded by an exclamation point. The contents of the square brackets are used as alt-text (the text that appears if there's an issue loading the image).</p><pre class=\"language-markdown\"><code>![a tiger](https://upload.wikimedia.org/wikipedia/commons/5/56/Tiger.50.jpg)</code></pre></li></ol> <p><button class=\"next-step\">Continue</button></p></x-step>","goals":["next-0"],"keywords":[]},"step-markdown-blockquotes":{"id":"step-markdown-blockquotes","title":"Step Markdown Blockquotes","html":"<x-step id=\"step-markdown-blockquotes\" goals=\"next-0\"><ol start=\"6\"> <li><p><em>Blockquotes</em> are marked with a greater-than sign at the beginning of the line:</p><pre class=\"language-markdown\"><code>&gt; \"Imagination is more important than knowledge.\" -Albert Einstein</code></pre></li></ol> <p><button class=\"next-step\">Continue</button></p></x-step>","goals":["next-0"],"keywords":[]},"step-markdown-bullet-lists":{"id":"step-markdown-bullet-lists","title":"Step Markdown Bullet Lists","html":"<x-step id=\"step-markdown-bullet-lists\" goals=\"next-0\"><ol start=\"7\"> <li><p>Bullet lists are achieved with an asterisk and a space at the beginning of each line containing a list item:</p><pre class=\"language-markdown\"><code>* Limits\n* Differentiation\n* Integration</code></pre></li></ol> <p><button class=\"next-step\">Continue</button></p></x-step>","goals":["next-0"],"keywords":[]},"step-markdown-numbered-lists":{"id":"step-markdown-numbered-lists","title":"Step Markdown Numbered Lists","html":"<x-step id=\"step-markdown-numbered-lists\" goals=\"next-0\"><ol start=\"8\"> <li><p>Numbered lists use numbers instead of asterisks. Numbers are assigned sequentially when the list is rendered, so you can use 1 for every list item in the source file. For nested lists, indent two spaces:</p><pre class=\"language-markdown\"><code>1. Limits\n1. Differentiation\n  1. Power rule\n  2. Product rule\n  3. Chain rule\n1. Integration\n  1. Power rule\n  1. Substitution\n  1. Integration-by-parts</code></pre></li></ol> <p><button class=\"next-step\">Continue</button></p></x-step>","goals":["next-0"],"keywords":[]},"step-markdown-inline-code":{"id":"step-markdown-inline-code","title":"Step Markdown Inline Code","html":"<x-step id=\"step-markdown-inline-code\" goals=\"next-0\"><ol start=\"9\"> <li><p>Inline code is surrounded by backticks, as in \"<code class=\"language-md\">try the `sqrt` function</code>\". Code blocks are surrounded by three backticks, with an optional language name following the first set:</p><pre class=\"language-markdown\"><code>```python\nimport numpy as np\nnp.sqrt(3)\n```</code></pre></li></ol> <p><button class=\"next-step\">Continue</button></p></x-step>","goals":["next-0"],"keywords":[]},"step-markdown-line-break":{"id":"step-markdown-line-break","title":"Step Markdown Line Break","html":"<x-step id=\"step-markdown-line-break\" goals=\"next-0\"><ol start=\"10\"> <li>A single newline character is ignored by default, so that you can break up the lines of a paragraph however you want without affecting the output. To separarate paragraphs, put a blank line between them. To force a line break without a paragraph break, put <em>two spaces</em> just before the newline.</li></ol> <p><button class=\"next-step\">Continue</button></p></x-step>","goals":["next-0"],"keywords":[]},"step-markdown-exercise":{"id":"step-markdown-exercise","title":"Step Markdown Exercise","html":"<x-step id=\"step-markdown-exercise\" goals=\"blank-0 blank-1 blank-2 blank-3 blank-4 blank-5 blank-6 blank-7 blank-8 blank-9 blank-10 blank-11 blank-12 blank-13 blank-14 blank-15 blank-16\"><div class=\"exercise\"> <p><strong>Exercise</strong><br>Answer each of the following questions about Markdown. </p><ol> <li>Code fences are marked using <x-blank-mc goal=\"blank-0\"><button class=\"choice\">3</button><button class=\"choice\">2</button><button class=\"choice\">1</button></x-blank-mc> <span class=\"nowrap\"><x-blank-mc goal=\"blank-1\"><button class=\"choice\">backticks</button><button class=\"choice\">hyphens</button><button class=\"choice\">colons</button></x-blank-mc>.</span></li><li>Markdown will automatically correct the numbering in your numbered lists <span class=\"nowrap\"><x-blank-mc goal=\"blank-2\"><button class=\"choice\">True</button><button class=\"choice\">False</button></x-blank-mc>.</span></li><li>The syntax for inserting an image is an <x-blank-mc goal=\"blank-3\"><button class=\"choice\">exclamation point</button><button class=\"choice\">period</button><button class=\"choice\">colon</button></x-blank-mc> followed by <x-blank-mc goal=\"blank-4\"><button class=\"choice\">square brackets</button><button class=\"choice\">parentheses</button></x-blank-mc> containing the <x-blank-mc goal=\"blank-5\"><button class=\"choice\">alt text</button><button class=\"choice\">url</button></x-blank-mc> followed by <x-blank-mc goal=\"blank-6\"><button class=\"choice\">parentheses</button><button class=\"choice\">square brackets</button></x-blank-mc> containing the <span class=\"nowrap\"><x-blank-mc goal=\"blank-7\"><button class=\"choice\">url</button><button class=\"choice\">alt text</button></x-blank-mc>.</span></li><li>The syntax for inserting links is <x-blank-mc goal=\"blank-8\"><button class=\"choice\">square brackets</button><button class=\"choice\">parentheses</button></x-blank-mc> containing the <x-blank-mc goal=\"blank-9\"><button class=\"choice\">link text</button><button class=\"choice\">url</button></x-blank-mc> followed by <x-blank-mc goal=\"blank-10\"><button class=\"choice\">parentheses</button><button class=\"choice\">square brackets</button></x-blank-mc> containing the <span class=\"nowrap\"><x-blank-mc goal=\"blank-11\"><button class=\"choice\">url</button><button class=\"choice\">link text</button></x-blank-mc>.</span></li><li>Inline code is indicated using <span class=\"nowrap\"><x-blank-mc goal=\"blank-12\"><button class=\"choice\">single backticks</button><button class=\"choice\">quotation marks</button><button class=\"choice\">curly braces</button></x-blank-mc>.</span></li><li>Section headings are indicated using <x-blank-mc goal=\"blank-13\"><button class=\"choice\">hashmarks</button><button class=\"choice\">asterisks</button></x-blank-mc> followed by a <span class=\"nowrap\"><x-blank-mc goal=\"blank-14\"><button class=\"choice\">space</button><button class=\"choice\">newline</button><button class=\"choice\">tilde</button></x-blank-mc>.</span></li><li>For boldface or italics, use <x-blank-mc goal=\"blank-15\"><button class=\"choice\">double</button><button class=\"choice\">single</button></x-blank-mc> or <x-blank-mc goal=\"blank-16\"><button class=\"choice\">single</button><button class=\"choice\">double</button></x-blank-mc> underscores (or asterisks), <span class=\"nowrap\"><x-gloss xid=\"respectively\">respectively</x-gloss>.</span></li></ol> </div> </x-step>","goals":["blank-0","blank-1","blank-2","blank-3","blank-4","blank-5","blank-6","blank-7","blank-8","blank-9","blank-10","blank-11","blank-12","blank-13","blank-14","blank-15","blank-16"],"keywords":[]},"jupyter":{"id":"jupyter","title":"Jupyter","html":"<x-step id=\"jupyter\" goals=\"blank-0 next-0\"><p>Findings in quantitative disciplines have historically been communicated primarily through written reports. In many cases, accompanying code is unavailable or difficult to replicate for readers who might wish to reproduce the analysis. This dissociation of exposition and code has major drawbacks: (i) ease of replication has significant implications for the <x-blank-mc goal=\"blank-0\"><button class=\"choice\">reliability</button><button class=\"choice\">discovery</button></x-blank-mc> of the results being reported, and (ii) the code must be carefully organized and commented to document the relationship between its elements and the corresponding elements of the written report.</p><p><button class=\"next-step\">Continue</button></p></x-step>","goals":["blank-0","next-0"],"keywords":[]},"step-project-jupyter":{"id":"step-project-jupyter","title":"Step Project Jupyter","html":"<x-step id=\"step-project-jupyter\" goals=\"next-0\"><p><em>Project Jupyter</em> provides researchers with tools for combining exposition and code into a single document called a <em>Jupyter notebook.</em> Notebook files are managed by a command line program called <code class=\"language-bash\">jupyter</code> and are presented to the user for viewing and editing in their preferred web browser. A Jupyter notebook contains of a list of <em>cells</em>, each of which is either a Markdown cell for exposition or a code cell for execution. The code is passed by Jupyter to a program called a <em>kernel</em> which runs in the background. The default kernel is a Python interpreter, but kernels are available for a huge variety of languages (including Julia and R, which, along with Python, form the portmanteau <em>Jupyter</em>).</p><p><button class=\"next-step\">Continue</button></p></x-step>","goals":["next-0"],"keywords":[]},"step-rich-jupyter-output":{"id":"step-rich-jupyter-output","title":"Step Rich Jupyter Output","html":"<x-step id=\"step-rich-jupyter-output\" goals=\"next-0\"><p>Many rich code cell output types are supported, including both static and interactive graphics which appear in the notebook. Here's an example session:</p><figure><img src=\"/content/data-science-utilities/images/jupyter-example.png\" alt=\"\"></figure><p><button class=\"next-step\">Continue</button></p></x-step>","goals":["next-0"],"keywords":[]},"step-jupyter-lab-explanation":{"id":"step-jupyter-lab-explanation","title":"Step Jupyter Lab Explanation","html":"<x-step id=\"step-jupyter-lab-explanation\" goals=\"next-0\"><p>Project Jupyter is currently in a period of transition from the <em>Classic Jupyter Notebook</em> to <em>JupyterLab</em>. JupyterLab is the next-generation version of Jupyter Notebook, built from scratch using more modern web tools and years of insight gained from the development of the classic notebook. We recommend using JupyterLab, although you might occasionally come across features which are available only in the Classic Notebook. The underlying file format is the same, so you can use the two interfaces interchangeably.</p><p><button class=\"next-step\">Continue</button></p></x-step>","goals":["next-0"],"keywords":[]},"magic-commands":{"id":"magic-commands","title":"Magic Commands","html":"<x-step id=\"magic-commands\" goals=\"next-0\"><h2>Magic Commands</h2><p>You might have noticed that one line in the executable cell in the screenshot above is <em>not</em> valid Python: <span class=\"nowrap\"><code class=\"language-md\">%matplotlib inline</code>.</span> This instruction, which makes matplotlib figures appear directly in the notebook, is specific to the Jupyter interface and is not part of matplotlib itself. Such instructions are called <strong>magic commands</strong> and are indicated in Python with a leading percent sign.</p><p>Here are some handy magic commands:</p><ul> <li><span class=\"nowrap\"><code class=\"language-md\">%run</code>.</span> If you have a large or ungainly block of code that you don't want taking up space in your notebook, you can save it in a <code class=\"language-md\">.py</code> file in the current directory and use the <code class=\"language-md\">%run</code> magic to execute all of the code in that file.</li></ul> <p><button class=\"next-step\">Continue</button></p></x-step>","goals":["next-0"],"keywords":[]},"step-magic-timeit":{"id":"step-magic-timeit","title":"Step Magic Timeit","html":"<x-step id=\"step-magic-timeit\" goals=\"next-0\"><ul> <li><span class=\"nowrap\"><code class=\"language-md\">%timeit</code>.</span> Place this line in front of any line of Python code to approximate how long it takes to execute.</li></ul> <p><button class=\"next-step\">Continue</button></p></x-step>","goals":["next-0"],"keywords":[]},"step-magic-debug":{"id":"step-magic-debug","title":"Step Magic Debug","html":"<x-step id=\"step-magic-debug\" goals=\"next-0\"><ul> <li><span class=\"nowrap\"><code class=\"language-md\">%debug</code>.</span> Running this magic after a cell returns an error puts you into a debugger session with the interpreter paused at the point where the error was thrown. This allows you to inspect the values of variables, try new code, and step through the execution of your program one line at a time.</li></ul> <p><button class=\"next-step\">Continue</button></p></x-step>","goals":["next-0"],"keywords":[]},"step-magic-autoreload":{"id":"step-magic-autoreload","title":"Step Magic Autoreload","html":"<x-step id=\"step-magic-autoreload\" goals=\"next-0\"><ul> <li><span class=\"nowrap\"><code class=\"language-md\">%%load_ext autoreload</code>.</span> If the <code class=\"language-md\">autoreload</code> extension is loaded, then any changes in imported modules are automatically picked up whenever a cell is executed. This can be helpful if you want to alternate between making changes to a module and experimenting with them in a Jupyter notebook. The alternative is to re-start the kernel each time you make a change to the module, and that gets rather tedious.</li></ul> <p><button class=\"next-step\">Continue</button></p></x-step>","goals":["next-0"],"keywords":[]},"keyboard-shortcuts":{"id":"keyboard-shortcuts","title":"Keyboard Shortcuts","html":"<x-step id=\"keyboard-shortcuts\" goals=\"next-0\"><h2>Keyboard Shortcuts</h2><p>Jupyter notebooks can be navigated entirely by mouse or trackpad, but it is much more efficient to use keyboard shortcuts for common operations. Furthermore, it's worth learning many of these shortcuts before working extensively with the software, because it's easier to build good habits from the start than to replace bad habits one at a time as your frustration with inefficiencies reaches the limits of what you can tolerate.</p><p><button class=\"next-step\">Continue</button></p></x-step>","goals":["next-0"],"keywords":[]},"step-jupyter-modes":{"id":"step-jupyter-modes","title":"Step Jupyter Modes","html":"<x-step id=\"step-jupyter-modes\" goals=\"next-0\"><p>Jupyter has an <strong>edit mode</strong> for entering text in cells and a <strong>command mode</strong> for manipulating cells (for example, merging or deleting cells). If there's a blinking cursor in a cell, the current mode is <em>edit</em>, and otherwise the current mode is <em>command</em>. Switching between modes is accomplished with the escape key (edit to command mode) and the enter key (command to edit mode).</p><p><button class=\"next-step\">Continue</button></p></x-step>","goals":["next-0"],"keywords":[]},"step-jupyter-cell-operations":{"id":"step-jupyter-cell-operations","title":"Step Jupyter Cell Operations","html":"<x-step id=\"step-jupyter-cell-operations\" goals=\"next-0\"><p>Cells are deleted in command mode with two strokes of the <code class=\"language-md\">d</code> key. You can highlight cells in command mode by holding shift and using your arrow keys, and you can merge the highlighted cells into a single cell using <span class=\"nowrap\"><code class=\"language-md\">shift-m</code>.</span> Insertion of new cells is accomplished with either <code class=\"language-md\">a</code> (insert cell <em>above</em> ) or <code class=\"language-md\">b</code> (insert cell <em>below</em> ) in command mode. Cells can be switched between Markdown (<code class=\"language-md\">m</code>) and code (<code class=\"language-md\">y</code>) in command mode.</p><p><button class=\"next-step\">Continue</button></p></x-step>","goals":["next-0"],"keywords":[]},"step-jupyter-execute-cells":{"id":"step-jupyter-execute-cells","title":"Step Jupyter Execute Cells","html":"<x-step id=\"step-jupyter-execute-cells\" goals=\"next-0\"><p>The most important shortcut works the same in both modes: <code class=\"language-md\">shift-enter</code> executes the current cell or cells.</p><p><button class=\"next-step\">Continue</button></p></x-step>","goals":["next-0"],"keywords":[]},"step-jupyter-command-palette":{"id":"step-jupyter-command-palette","title":"Step Jupyter Command Palette","html":"<x-step id=\"step-jupyter-command-palette\" goals=\"blank-0 blank-1 blank-2 next-0\"><p>If you want to perform an action that you don't know a keyboard shortcut yet, you can do <code class=\"language-md\">cmd-shift-c</code> (in either mode) to activate the <em>command palette</em>. Then start typing keywords related to what you want to accomplish, selected the desired command, and run it by pressing enter. The command palette will also display the shortcut for that command (if one exists). The sequence <code class=\"language-md\">cmd-shift-f-f</code> closes the command palette.</p><div class=\"exercise\"> <p><strong>Exercise</strong> </p><ol> <li>The most efficient way to delete a cell is to find the delete operation in a menu somewhere. <x-blank-mc goal=\"blank-0\"><button class=\"choice\">False</button><button class=\"choice\">True</button></x-blank-mc></li><li>You can reminder yourself of a given keyboard shortcut by searching for that operation in the command palette. <x-blank-mc goal=\"blank-1\"><button class=\"choice\">True</button><button class=\"choice\">False</button></x-blank-mc></li><li>The enter key switches from edit mode to command mode. <x-blank-mc goal=\"blank-2\"><button class=\"choice\">False</button><button class=\"choice\">True</button></x-blank-mc></li></ol> </div> <p><button class=\"next-step\">Continue</button></p></x-step>","goals":["blank-0","blank-1","blank-2","next-0"],"keywords":[]},"notebook-consoles":{"id":"notebook-consoles","title":"Notebook Consoles","html":"<x-step id=\"notebook-consoles\" goals=\"next-0\"><h2>Notebook Consoles</h2><p>One difficulty with Jupyter notebooks is that it's easy for your workspace to get cluttered. The problem is that all code in the notebook is handled in the same way regardless of its role:</p><ol> <li><strong>Publication code</strong>. Code that contributes to the narrative should be included in the final Jupyter notebook.</li></ol> <p><button class=\"next-step\">Continue</button></p></x-step>","goals":["next-0"],"keywords":[]},"step-jupyter-library-code":{"id":"step-jupyter-library-code","title":"Step Jupyter Library Code","html":"<x-step id=\"step-jupyter-library-code\" goals=\"next-0\"><ol start=\"2\"> <li><strong>Library code</strong>. Long functions may be critical for the code in the notebook to run properly, but they occupy a lot of vertical space in the notebook and often distract from the narrative.</li></ol> <p><button class=\"next-step\">Continue</button></p></x-step>","goals":["next-0"],"keywords":[]},"step-jupyter-scratch-code":{"id":"step-jupyter-scratch-code","title":"Step Jupyter Scratch Code","html":"<x-step id=\"step-jupyter-scratch-code\" goals=\"next-0\"><ol start=\"3\"> <li><strong>Scratch code</strong>. While executing throwaway lines of scratch code is an important part of the development process, that code doesn't logically belong in the notebook.</li></ol> <p><button class=\"next-step\">Continue</button></p></x-step>","goals":["next-0"],"keywords":[]},"step-jupyter-three-types":{"id":"step-jupyter-three-types","title":"Step Jupyter Three Types","html":"<x-step id=\"step-jupyter-three-types\" goals=\"blank-0 blank-1\"><p>JupyterLab includes functionality for interacting with all three types of code in a manner appropriate to their roles. The idea is to open three tabs: a Jupyter notebook for publication code, a Python text file for library code, and a <em>console</em> linked to the notebook for scratch code. The linked console is a <x-gloss xid=\"REPL\">REPL</x-gloss> which interacts with the same kernel instance as the notebook.</p><figure><img src=\"/content/data-science-utilities/images/jupyterlab-setup.png\" alt=\"\"></figure><p>To achieve this setup in JupyterLab, begin by opening a Jupyter notebook and a text file saved with the <code class=\"language-md\">.py</code> extension. Then right-click the tab for the Jupyter notebook and select \"New console for notebook\". You can drag each tab to wherever you want it to appear on the screen, and all of them are visible at once. The combinations <code class=\"language-md\">ctrl-shift-[</code> and <code class=\"language-md\">ctrl-shift-]</code> switch between tabs.</p><div class=\"exercise\"> <p><strong>Exercise</strong><br>If you bind the value <code class=\"language-python\">7</code> to the variable <code class=\"language-bash\">x</code> in your Jupyter notebook, then the value of <code class=\"language-python\">x</code> in the linked console will be <span class=\"nowrap\"><x-blank-mc goal=\"blank-0\"><button class=\"choice\">7</button><button class=\"choice\">undefined</button></x-blank-mc>.</span> The value of <code class=\"language-python\">x</code> in a Python file in the same directory will be <span class=\"nowrap\"><x-blank-mc goal=\"blank-1\"><button class=\"choice\">defined only if it's defined in that file</button><button class=\"choice\">7</button></x-blank-mc>.</span></p></div> </x-step>","goals":["blank-0","blank-1"],"keywords":[]},"vs-code":{"id":"vs-code","title":"Vs Code","html":"<x-step id=\"vs-code\" goals=\"next-0\"><p>Jupyter is geared toward producing documents which interweave exposition, code, and visualizations. Dedicated editors provide more features for writing large codebases, and it's worth learning enough about them to make an informed decision about when to switch as a project scales beyond the sweet spot for Jupyter.</p><p><button class=\"next-step\">Continue</button></p></x-step>","goals":["next-0"],"keywords":[]},"step-vs-code-introduction":{"id":"step-vs-code-introduction","title":"Step Vs Code Introduction","html":"<x-step id=\"step-vs-code-introduction\" goals=\"next-0\"><p>The editor we will use is the free and open source Microsoft product <strong>Visual Studio Code</strong>, or <em>VS Code</em> for short. VS Code has risen sharply in popularity since its introduction in 2015, reaching the top of the ranks in the 2018 StackOverflow Developer Survey. It starts quickly and offers many powerful features, including a system for users to add their own extensions. This combination of popularity and extensibility means that extensions are available for almost everything, so users can often comfortably use VS Code for all of their editing tasks (for example, authoring in Markdown, LaTeX, etc., and doing web development, Python development, data exploration, etc.).</p><p><button class=\"next-step\">Continue</button></p></x-step>","goals":["next-0"],"keywords":[]},"vs-code-main-features":{"id":"vs-code-main-features","title":"Vs Code Main Features","html":"<x-step id=\"vs-code-main-features\" goals=\"next-0\"><h2>Main Features</h2><p>Let's do a walkthrough of some basic VS Code features. We begin a VS Code session by opening a project folder (although you can directly open specific files, we recommend opening the project folder first, because some features are designed with this workflow in mind).</p><center><figure><video src=\"/content/data-science-utilities/images/vs-code-open-folder.mp4\" width=\"75%\" controls=\"controls\"></video></figure></center><ol> <li><p><strong>File Navigation</strong>. When you open a project folder, the <em>Explorer</em> pops open on the left side of the window. In the Explorer you can navigate the directory tree and do common file operations like adding new files, moving them around, and re-naming them. Right-clicking a file or folder brings up the available options along with keyboard shortcuts so you can learn to access them without having to right-click in the future. Clicking on a file opens it in the main window to the right. You can hide the Explorer to create more space for the main window with <span class=\"nowrap\"><code class=\"language-md\">cmd-b</code>.</span></p><center><figure><video src=\"/content/data-science-utilities/images/vs-code-explorer.mp4\" width=\"75%\" controls=\"controls\"></video></figure></center></li></ol> <p><button class=\"next-step\">Continue</button></p></x-step>","goals":["next-0"],"keywords":[]},"step-command-palette":{"id":"step-command-palette","title":"Step Command Palette","html":"<x-step id=\"step-command-palette\" goals=\"next-0\"><ol start=\"2\"> <li><p><strong>Command Palette</strong>. VS Code has enough functionality that it would be inefficient to access all of it through menus and infeasible to assign and remember keyboard shortcuts for every operation. The <em>Command Palette</em> is a way to find functions quickly based on descriptive names of those functions. For example, if you want to replace one string with another throughout a file, you can do <code class=\"language-md\">cmd-shift-P</code> and start typing \"replace\". Use the arrow keys to select the desired function and hit <code class=\"language-md\">enter</code> to run it. Note that the Command Palette displays keyboard shortcuts if you want to learn them. However, the Command Palette is fast enough that you might want to use it instead of keyboard shortcuts as your primary way of accessing some functions.</p><center><figure><video src=\"/content/data-science-utilities/images/vs-code-command-palette.mp4\" width=\"75%\" controls=\"controls\"></video></figure></center></li></ol> <p><button class=\"next-step\">Continue</button></p></x-step>","goals":["next-0"],"keywords":[]},"step-integrated-terminal":{"id":"step-integrated-terminal","title":"Step Integrated Terminal","html":"<x-step id=\"step-integrated-terminal\" goals=\"next-0\"><ol start=\"3\"> <li><p><strong>Integrated Terminal</strong>. VS Code has an integrated terminal that you can pop up and down using <code class=\"language-md\">ctrl-`</code> (that's a backtick, top left corner of the keyboard).</p><center><figure><video src=\"/content/data-science-utilities/images/vs-code-terminal.mp4\" width=\"75%\" controls=\"controls\"></video></figure></center></li></ol> <p><button class=\"next-step\">Continue</button></p></x-step>","goals":["next-0"],"keywords":[]},"step-marketplace":{"id":"step-marketplace","title":"Step Marketplace","html":"<x-step id=\"step-marketplace\" goals=\"next-0\"><ol start=\"4\"> <li><p><strong>Marketplace</strong>. Much of VS Code's functionality is provided through <em>extensions</em>, which are third-party packages provided in the VS Code <em>Marketplace</em>. The Marketplace can be accessed using the square icon on the left side of the window. You can search for and install extensions with a click, and you can right-click the gear icon on an installed extension to edit the settings for that extension. You'll want to go ahead and install the Python extension.</p><center><figure><video src=\"/content/data-science-utilities/images/vs-code-marketplace.mp4\" width=\"75%\" controls=\"controls\"></video></figure></center></li></ol> <p><button class=\"next-step\">Continue</button></p></x-step>","goals":["next-0"],"keywords":[]},"step-vscode-bookmarks":{"id":"step-vscode-bookmarks","title":"Step Vscode Bookmarks","html":"<x-step id=\"step-vscode-bookmarks\" goals=\"next-0\"><ol start=\"5\"> <li><p><strong>Bookmarks</strong>. When you're working with a large file, you'll often want to save your place so you can inspect a different part of file and quickly get back to where you were. VS Code has a bookmark system to facilitate this kind of navigation: <code class=\"language-md\">cmd-opt-k</code> sets or removes a bookmark on the current line, and <code class=\"language-md\">cmd-opt-j</code> and <code class=\"language-md\">cmd-opt-l</code> navigate through the bookmarks forwards and backwards. You can also use bookmarks to highlight large blocks of text for copying or deleting; try \"Bookmarks\" in the Command Palette to see all of the available options.</p><center><figure><video src=\"/content/data-science-utilities/images/vs-code-bookmarks.mp4\" width=\"75%\" controls=\"controls\"></video></figure></center></li></ol> <p><button class=\"next-step\">Continue</button></p></x-step>","goals":["next-0"],"keywords":[]},"step-vscode-git-integration":{"id":"step-vscode-git-integration","title":"Step Vscode Git Integration","html":"<x-step id=\"step-vscode-git-integration\" goals=\"next-0\"><ol start=\"6\"> <li><strong>Git Integration</strong>. VS Code provides a graphical user interface for performing common Git operations like staging and committing changes and resolving merge conflicts.</li></ol> <p>Suppose we've just run <code class=\"language-bash\">git merge</code> from the command line, and conflicts were introduced in the file <span class=\"nowrap\"><code class=\"language-md\">setup.py</code>.</span> We can resolve these conflicts and commit the resolutions all in VS Code:</p><center><figure><video src=\"/content/data-science-utilities/images/vs-code-merge-conflicts.mp4\" width=\"75%\" controls=\"controls\"></video></figure><figure><video src=\"/content/data-science-utilities/images/vs-code-git-commit.mp4\" width=\"75%\" controls=\"controls\"></video></figure></center><p><button class=\"next-step\">Continue</button></p></x-step>","goals":["next-0"],"keywords":[]},"step-vscode-snippets":{"id":"step-vscode-snippets","title":"Step Vscode Snippets","html":"<x-step id=\"step-vscode-snippets\" goals=\"blank-0 blank-1 blank-2 blank-3 next-0 next-1\"><ol start=\"7\"> <li><p><strong>Snippets</strong>. If you want to save time writing boilerplate code or text, you can bind chunks of text to short key sequences using VS Code's <em>snippet</em> mechanism. For example, you can enter a Markdown code fence if you have a snippets file with the following entry:</p><center><figure><img src=\"/content/data-science-utilities/images/fence.png\" width=\"75%\" alt=\"\"></figure></center></li></ol> <p>The dollar-sign expressions indicate points where the user is prompted for text when the snippet is triggered. These points are visited in order starting from <span class=\"nowrap\"><code class=\"language-md\">＄1</code>,</span> with <code class=\"language-md\">＄0</code> indicating the location of the cursor when the snippet is exited.</p><center><figure><video src=\"/content/data-science-utilities/images/vs-code-snippets.mp4\" width=\"75%\" controls=\"controls\"></video></figure></center><p>Many extensions come with snippets, and you can create your own by creating a new global snippet configuration file by searching in the Command Palette for \"Configure User Snippets\".</p><p><button class=\"next-step\">Continue</button></p><div class=\"exercise\"> <p><strong>Exercise</strong> </p><ol> <li>One of the advantages of doing Git operations in VS Code is that <span class=\"nowrap\"><x-blank-mc goal=\"blank-0\"><button class=\"choice\">removing conflict markers is easier</button><button class=\"choice\">more operations are available</button></x-blank-mc>.</span></li><li>The quickest way to look for a VS Code function you want to run is usually to use <span class=\"nowrap\"><x-blank-mc goal=\"blank-1\"><button class=\"choice\">the command palette</button><button class=\"choice\">menus</button><button class=\"choice\">documentation</button></x-blank-mc>.</span></li><li>If you want to run a shell command, it's faster to <span class=\"nowrap\"><x-blank-mc goal=\"blank-2\"><button class=\"choice\">open the integrated Terminal</button><button class=\"choice\">open a separate Terminal and navigate to your project directory</button></x-blank-mc>.</span></li><li>To quickly find your place again when you have to navigate to a distant point in the file you're editing, <span class=\"nowrap\"><x-blank-mc goal=\"blank-3\"><button class=\"choice\">use bookmarks</button><button class=\"choice\">type weird strings and search for them later</button></x-blank-mc>.</span></li></ol> </div> <p><button class=\"next-step\">Continue</button></p></x-step>","goals":["blank-0","blank-1","blank-2","blank-3","next-0","next-1"],"keywords":[]},"python-ide":{"id":"python-ide","title":"Python Ide","html":"<x-step id=\"python-ide\" goals=\"next-0\"><h2>Python IDE</h2><p>An <strong>integrated development environment</strong> (or <em>IDE</em>) is a full-featured environment for writing code. Advanced features that distinguish an IDE from a plain text editor include autocompletion, variable inspection, debugging, and <x-gloss xid=\"refactoring\">refactoring</x-gloss> and <x-gloss xid=\"linting\">linting</x-gloss> tools.</p><p><button class=\"next-step\">Continue</button></p></x-step>","goals":["next-0"],"keywords":[]},"step-vscode-python-extension":{"id":"step-vscode-python-extension","title":"Step Vscode Python Extension","html":"<x-step id=\"step-vscode-python-extension\" goals=\"blank-0 blank-1 blank-2 blank-3 blank-4 blank-5 blank-6\"><p>The most popular extension in the VS Code Marketplace, the Microsoft-supported <em>Python</em> extension, effectively turns VS Code into a full-fledged IDE for Python. Let's take a tour of the most important features. Begin by opening a new buffer (<code class=\"language-md\">cmd-n</code>) and switching to Python mode (click on \"Plain Text\" in the bottom left corner and choose Python from the menu). It's important to <x-gloss xid=\"vscode-install\">install</x-gloss> Python from the Marketplace if you haven't already.</p><ol> <li><p><strong>Code execution</strong>. <code class=\"language-md\">shift-enter</code> sends the highlighted text to a kernel for execution. Lines containing <code class=\"language-python\">#%%</code> can be used to split your code into Jupyter-like cells, so you don't have to highlight the whole block you want to execute. We recommend that you <x-gloss xid=\"vscode-jupyter-option\">use a Jupyter kernel</x-gloss> rather than a Terminal for code execution.</p><center><figure><video src=\"/content/data-science-utilities/images/vs-code-code-execution.mp4\" width=\"75%\" controls=\"controls\"></video></figure></center></li><li><p><strong>Code completion</strong>. When you begin typing a name in a Python file in VS Code, you will see suggestions of Python names which begin with the letters you're typing. You can hit tab to select the top recommendation or use the arrow keys to navigate through other options. (Note also that when you open parentheses to make a function call, documentation for the function pops up to help you remember its arguments.)</p><center><figure><video src=\"/content/data-science-utilities/images/vs-code-code-completion.mp4\" width=\"75%\" controls=\"controls\"></video></figure></center></li><li><p><strong>Variable inspection</strong>. Above the Jupyter pane is a <em>variable inspector</em> where you can see the variables which are currently in scope. Arrays and other compound data structures can be opened in a special <em>Data Viewer</em> window (using the icon in the rightmost column in the variable inspector).</p><center><figure><video src=\"/content/data-science-utilities/images/vs-code-variable-inspection.mp4\" width=\"75%\" controls=\"controls\"></video></figure></center></li><li><p><strong>Debugging</strong>. VS Code provides several tools for inspecting the execution of a Python program as it runs. These tools are organized in a unified interface called a <em>debugger.</em> To debug a Python file in VS Code, begin by clicking in the gutter (the region left of the line numbers) to place red dots indicating <strong>breakpoints</strong> on specific lines where you would like to pause the interpreter. Then click the bug icon in the panel on the left. In the <em>Watch</em> section, you can any expressions whose values you would like to be able to monitor as the debugger runs. Press the green play button to begin debugging, and use the controls to navigate.</p><center><figure><video src=\"/content/data-science-utilities/images/vs-code-debugging.mp4\" width=\"75%\" controls=\"controls\"></video></figure></center></li><li><p><strong>Refactoring</strong>. Highlighting an expression and right-clicking brings up a menu which includes the option \"Extract Variable\". Selecting this option will replace the given expression with a variable name and insert a line which binds the value of the highlighted expression to the variable. Using this tool to perform the refactoringn operation makes mistakes less likely and saves you a little time.</p><center><figure><video src=\"/content/data-science-utilities/images/vs-code-refactoring.mp4\" width=\"75%\" controls=\"controls\"></video></figure></center></li><li><p><strong>Linting</strong>. When you save a Python file in VS Code, a <x-gloss xid=\"linting\">linter</x-gloss> is automatically run. Its suggestions are indicated by squiggly red underlines which you can mouse over to read the details for.</p><center><figure><video src=\"/content/data-science-utilities/images/vs-code-linting.mp4\" width=\"75%\" controls=\"controls\"></video></figure></center></li><li><p><strong>Testing</strong>. VS Code provides support for <code class=\"language-md\">pytest</code> for unit testing. The process is designed to involve minimal <span class=\"nowrap\"><x-gloss xid=\"boilerplate\">boilerplate</x-gloss>:</span> you write test functions whose names begin with <code class=\"language-md\">test_</code> in files whose names begin with <span class=\"nowrap\"><code class=\"language-md\">test_</code>,</span> and VS Code will discover them for you. From the command palette, run \"Python: Discover Tests\". The first time you run this command, you'll need to configure it. Just select \"pytest\" and follow the instructions.</p></li></ol> <p>After VS code has discovered your tests, you can run all tests with a button at the bottom of the window. You can also run individual tests using a button which appears in the editor above the function.</p><center><figure><video src=\"/content/data-science-utilities/images/vs-code-testing.mp4\" width=\"75%\" controls=\"controls\"></video></figure></center><div class=\"exercise\"> <p><strong>Exercise</strong> </p><ol> <li>If you want to understand an algorithm by implementing it in Python and watching it execute line-by-line, you can use the <x-blank-mc goal=\"blank-0\"><button class=\"choice\">debugging</button><button class=\"choice\">linting</button><button class=\"choice\">testing</button></x-blank-mc> feature of VS Code.</li><li>NumPy arrays can be difficult to read in the format in which they are printed by default at the command line in Python. To see an easier-to-read version, use <span class=\"nowrap\"><x-blank-mc goal=\"blank-1\"><button class=\"choice\">the variable inspector</button><button class=\"choice\">code completion</button><button class=\"choice\">the debugger</button></x-blank-mc>.</span></li><li>Replacing a repeated expression with a variable is an example of <span class=\"nowrap\"><x-blank-mc goal=\"blank-2\"><button class=\"choice\">refactoring</button><button class=\"choice\">linting</button><button class=\"choice\">debugging</button></x-blank-mc>.</span></li><li>To send Python code to the kernel for execution, do <span class=\"nowrap\"><x-blank-mc goal=\"blank-3\"><button class=\"choice\">shift-enter</button><button class=\"choice\">enter</button><button class=\"choice\">cmd-enter</button></x-blank-mc>.</span></li><li>Identifying style improvements in code is called <span class=\"nowrap\"><x-blank-mc goal=\"blank-4\"><button class=\"choice\">linting</button><button class=\"choice\">refactoring</button><button class=\"choice\">debugging</button></x-blank-mc>.</span></li><li>To write unit tests in Python using <span class=\"nowrap\"><code class=\"language-bash\">pytest</code>,</span> you just have to write functions that begin with <x-blank solution=\"test_\" goal=\"blank-5\"></x-blank> in files that begin with <span class=\"nowrap\"><x-blank solution=\"test_\" goal=\"blank-6\"></x-blank>.</span></li></ol> </div> </x-step>","goals":["blank-0","blank-1","blank-2","blank-3","blank-4","blank-5","blank-6"],"keywords":[]},"gnu-make":{"id":"gnu-make","title":"Gnu Make","html":"<x-step id=\"gnu-make\" goals=\"next-0\"><p>In a typical coding project, some files will be processed to produce other files as output. For example, programs written in C are compiled into <x-gloss xid=\"binary-file\">binary</x-gloss> executable files. LaTeX files are compiled to PDF files. Python files process raw data files and produce clean versions of the data. The clean versions of the data are in turn used to produce analysis and visualizations.</p><p><button class=\"next-step\">Continue</button></p></x-step>","goals":["next-0"],"keywords":[]},"step-target-and-source-files":{"id":"step-target-and-source-files","title":"Step Target And Source Files","html":"<x-step id=\"step-target-and-source-files\" goals=\"next-0\"><p>We call the output files <em>target</em> files, and the input files are called <em>source</em> files. The source-target relationships of a project are a crucial component of the structure of the project, because the processing steps are required to reproduce the analysis or update the target files to reflect changes in the source. However, this important structure is not usually apparent from the source and target files themselves.</p><p><button class=\"next-step\">Continue</button></p></x-step>","goals":["next-0"],"keywords":[]},"step-makefile":{"id":"step-makefile","title":"Step Makefile","html":"<x-step id=\"step-makefile\" goals=\"next-0\"><p>There are at least two ways to address this problem: (1) document the processing steps in a README file, or (2) write a <em>Makefile</em>, which can be processed by a command-line utility called <em>make</em> to actually carry out the processing steps. The second approach documents the source-target relationships <em>and</em> makes them executable.</p><p><button class=\"next-step\">Continue</button></p></x-step>","goals":["next-0"],"keywords":[]},"step-example-makefile":{"id":"step-example-makefile","title":"Step Example Makefile","html":"<x-step id=\"step-example-makefile\" goals=\"next-0\"><p>Suppose, for example, that we have a file called <code class=\"language-md\">raw-data.csv</code> which contains some data we are meant to analyze. We write some code in a file called <code class=\"language-md\">clean-data.py</code> to process that data and write a file called <span class=\"nowrap\"><code class=\"language-md\">clean-data.csv</code>.</span> Then we run <code class=\"language-md\">model.py</code> to do some analysis and come up with a model that we save in a file called <span class=\"nowrap\"><code class=\"language-md\">model.pkl</code>.</span> Our Makefile would look something like this:</p><pre class=\"language-makefile\"><code>\nall : model.pkl\n\nmodel.pkl : model.py clean-data.csv\n    python model.py\n\nclean-data.csv : clean-data.py raw-data.csv\n    python clean-data.py\n\nclean :\n    rm model.pkl\n    rm clean-data.csv\n\n.PHONY all\n</code></pre><p><button class=\"next-step\">Continue</button></p></x-step>","goals":["next-0"],"keywords":[]},"step-makefile-entry-formula":{"id":"step-makefile-entry-formula","title":"Step Makefile Entry Formula","html":"<x-step id=\"step-makefile-entry-formula\" goals=\"next-0\"><p>The basic formula for a Makefile entry is</p><pre class=\"language-makefile\"><code>target : dependencies\n    recipe</code></pre><p>The command-line function <code class=\"language-md\">make</code> looks at whether the dependencies have changed since the target was last built, if they have then it runs the commands in the corresponding recipe.</p><p><button class=\"next-step\">Continue</button></p></x-step>","goals":["next-0"],"keywords":[]},"step-make-phony-targets":{"id":"step-make-phony-targets","title":"Step Make Phony Targets","html":"<x-step id=\"step-make-phony-targets\" goals=\"next-0\"><p>The <code class=\"language-md\">target</code> can either be an actual target file or a <em>phony</em> target, which is a name used to refer to a given processing step. The phony targets should be declared in a line that begins <code class=\"language-md\">.PHONY</code> and lists the phony targets. It's conventional to include the phony targets <code class=\"language-md\">all</code> and <span class=\"nowrap\"><code class=\"language-md\">clean</code>.</span> These correspond to the operations \"build everything\" and \"remove the target files\".</p><p><button class=\"next-step\">Continue</button></p></x-step>","goals":["next-0"],"keywords":[]},"step-specific-targets":{"id":"step-specific-targets","title":"Step Specific Targets","html":"<x-step id=\"step-specific-targets\" goals=\"quill\"><p>Specific targets can be invoked at the command line by running <span class=\"nowrap\"><code class=\"language-md\">make targetname</code>.</span> For example, <code class=\"language-md\">make all</code> builds everything and <code class=\"language-md\">make clean</code> removes the target files. The target may be omitted, in which case it defaults to the first target in the file.</p><div class=\"exercise\"> <p><strong>Exercise</strong><br>Write a Makefile which runs <code class=\"language-md\">pdflatex my-document.tex</code> to produce <code class=\"language-md\">my-document.pdf</code> whenever <code class=\"language-md\">my-document.tex</code> changes. Include the phony targets <code class=\"language-bash\">all</code> and <span class=\"nowrap\"><code class=\"language-bash\">clean</code>.</span> Assume that <code class=\"language-md\">pdflatex</code> will produce auxiliary files <code class=\"language-md\">my-document.aux</code> and <span class=\"nowrap\"><code class=\"language-md\">my-document.log</code>.</span></p></div> <x-quill goal=\"quill\"></x-quill><p><em>Solution.</em> We remove the auxiliary files with <code class=\"language-md\">clean</code> and make <code class=\"language-md\">all</code> include just the target <span class=\"nowrap\"><code class=\"language-md\">my-document.pdf</code>:</span></p><pre class=\"language-makefile\"><code>\nall : my-document.pdf\n\nmy-document.pdf : my-document.tex\n    pdflatex my-document.tex\n\nclean :\n    rm my-document.aux\n    rm my-document.log\n\n.PHONY all clean\n</code></pre></x-step>","goals":["quill"],"keywords":[]},"docker-section":{"id":"docker-section","title":"Docker Section","html":"<x-step id=\"docker-section\" goals=\"next-0\"><p>If you've had the experience of trying to get programs and configuration files installed the same way on multiple computers, then you can appreciate the appeal of Docker: what Conda and Pip provide to Python in environment reproducibility, Docker achieves for <em>anything you can run on Linux</em>. This is a big deal in the software engineering world, because installation wrangling can suck up a lot of developer time. It's also valuable to scientists and data scientists, because research can be reproduced with rock solid reliability with the execution of a single OS-independent command. These benefits have driven the steady rise in popularity that Docker has enjoyed since it was introduced in 2013.</p><p><button class=\"next-step\">Continue</button></p></x-step>","goals":["next-0"],"keywords":[]},"step-docker-overview":{"id":"step-docker-overview","title":"Step Docker Overview","html":"<x-step id=\"step-docker-overview\" goals=\"next-0\"><p>To oversimplify a bit, using Docker involves figuring out how to build your desired computational environment by running a sequence of shell commands starting from a bare-bones Linux operating system. You store this sequence of commands in a text file called <strong>Dockerfile</strong>, and the results achieved by performing the specified installation steps are stored as a Docker <strong>image</strong>. Docker (the company) provides a free cross-platform application called Docker Desktop which allows any user to download Docker images from a repository of published Dockerfiles and run them on their own machine. These image instances, called <strong>containers</strong>, run in their own isolated filesystem on the user's computer.</p><p><button class=\"next-step\">Continue</button></p></x-step>","goals":["next-0"],"keywords":[]},"docker-no-assumptions":{"id":"docker-no-assumptions","title":"Docker No Assumptions","html":"<x-step id=\"docker-no-assumptions\" goals=\"next-0\"><p>Since no assumptions are made about anything else on the user's system, Docker applications reliably run the same way for everyone. Furthermore, Docker containers are <em>not</em> virtual machines, so they are lightweight and can run code with near-native performance. They are especially useful in cloud computing contexts, because you can debug a system on your computer and deploy it to the cloud without worrying about how to configure everything to work in the cloud the same way it works on your personal machine.</p><p><button class=\"next-step\">Continue</button></p></x-step>","goals":["next-0"],"keywords":[]},"docker-desktop-example":{"id":"docker-desktop-example","title":"Docker Desktop Example","html":"<x-step id=\"docker-desktop-example\" goals=\"next-0\"><p>To give you a sense of how profound this can be, if you install Docker Desktop and run</p><pre class=\"language-md\"><code>docker run -p 8888:8888 jupyter/datascience-notebook</code></pre><p>then several Docker images that are a part of the <code class=\"language-md\">datascience-notebook</code> stack published by the Jupyter team will be downloaded to your machine. The download takes a while, but when it's complete, you will have a running Jupyter instance accessible at <code class=\"language-md\">localhost:8888</code> in your browser (the <code class=\"language-md\">-p 8888:8888</code> part of the command connects the port 8888 in the container to the port 8888 in the host operating system). This notebook will have Python, R, and Julia kernels, each complete with curated sets of data science packages. It would take much more work to follow a list of installation instructions to achieve the same setup using native installations. Furthermore, the time cost of downloading images is incurred only the first time you run the command, because downloaded images are saved on your computer for fast loading in the future.</p><p><button class=\"next-step\">Continue</button></p></x-step>","goals":["next-0"],"keywords":[]},"docker-disadvantages":{"id":"docker-disadvantages","title":"Docker Disadvantages","html":"<x-step id=\"docker-disadvantages\" goals=\"next-0\"><p>Disadvantages of using Docker include: (1) running a given piece of software both through Docker and natively on your operating system requires having two installations of it, and (2) care must be taken to connect the container to your operating system so you can interact with it (for example, using Jupyter notebooks, or saving files from within the container and having them show up in your primary file system).</p><p><button class=\"next-step\">Continue</button></p></x-step>","goals":["next-0"],"keywords":[]},"step-docker-example":{"id":"step-docker-example","title":"Step Docker Example","html":"<x-step id=\"step-docker-example\" goals=\"next-0\"><h2>Using Docker</h2><p>To see how Docker works and how we might use it in practice, let's take a closer look at the Jupyter data-science notebook. When we run <code class=\"language-md\">docker run -p 8888:8888 jupyter/datascience-notebook</code> from the command line, we're telling Docker that we want a container running the <code class=\"language-md\">jupyter/datascience-notebook</code> image. Docker Desktop is able to find that image because it's registered on <a href=\"https://hub.docker.com/r/jupyter/datascience-notebook/\" target=\"_blank\"><strong>Docker Hub</strong></a>. If we take a look at the <a href=\"https://hub.docker.com/r/jupyter/datascience-notebook/dockerfile\" target=\"_blank\">Dockerfile</a> used to build that image, we see a sequence of Dockerfile commands beginning with all-caps instructions. The most important ones are:</p><ul> <li><strong>FROM</strong>. Specifies an image to build on top of. This can be an image from Docker Hub or one you've built locally from another Dockerfile.</li><li><strong>RUN</strong>. Executes shell commands. Useful for downloading files from the internet and performing other installation steps.</li><li><strong>COPY</strong>. Copy files from the directory containing the Dockerfile into the image. Useful for configuration files or shell scripts (so you don't have to put all of the instructions into the Dockerfile).</li><li><strong>CMD</strong>. Specifies a default command to run when executing a container. The most common default is <code class=\"language-md\">bash</code> (so running a container drops you into a shell session), but the Jupyter notebook images launch Jupyter Lab so you can connect to the container using your browser.</li><li><strong>EXPOSE</strong>. Make a container port available for the host operating system to connect to. For Jupyter, it's customary to use port <span class=\"nowrap\"><code class=\"language-md\">8888</code>.</span></li><li><strong>USER</strong>. Some installation steps require enhanced filesystem permissions; the Dockerfile solution is to switch to the root user with the line <span class=\"nowrap\"><code class=\"language-md\">USER root</code>.</span></li></ul> <p><button class=\"next-step\">Continue</button></p></x-step>","goals":["next-0"],"keywords":[]},"step-docker-our-own-Dockerfile":{"id":"step-docker-our-own-Dockerfile","title":"Step Docker Our Own Dockerfile","html":"<x-step id=\"step-docker-our-own-Dockerfile\" goals=\"next-0\"><p>Let's use some of these command to make our own Docker image for a <x-gloss xid=\"toy\">toy</x-gloss> data science project. We'll structure our project using a simplified version of the <a href=\"https://github.com/drivendata/cookiecutter-data-science\" target=\"_blank\">Data Science Cookiecutter</a>. We begin by creating a directory structure like this:</p><pre class=\"language-md\"><code>.\n├── README.md ← Explanation of the project and instructions on how to use\n├── Dockerfile ← Script to build the Docker image\n├── Makefile ← Encode project dependency structure for reproducibility\n├── data\n│   ├── raw ← stores original data (untouched)\n│   └── processed ← stores files computed from original data\n├── models ← stores Python objects for trained models\n├── reports ← final writeup\n│   ├── figures\n│   └── report.tex\n└── src ← source code for processing data and models\n    ├── features ← data processing\n    │   └── build_features.py\n    ├── models ← model training and prediction\n    │   ├── predict_model.py\n    │   └── train_model.py\n    └── visualization ← generate figures\n        └── visualize.R</code></pre><p>You can do this by cloning a Git repo prepared for this purpose:</p><pre class=\"language-md\"><code>git clone git@github.com:data-gymnasia/data-science-docker.git</code></pre><p>In our Dockerfile we begin with the following contents:</p><pre class=\"language-md\"><code>FROM jupyter/datascience-notebook\n\n# set working directory to home directory\nWORKDIR /home/jovyan\n\n# copy whole current directory into the image\nCOPY . project\n\n# Get data from GitHub\nRUN cd project/data/raw &amp;&amp; \\\n    wget https://browndsi.github.io/data/iris.csv\n\n# Enter bash session in the project directory when\n# the container is run\nWORKDIR project\nCMD /bin/bash</code></pre><p>We build on the Jupyter <code class=\"language-md\">datascience-notebook</code> image, copy our local files into the image, acquire the data from the internet, and start the container in a <code class=\"language-md\">bash</code> session. Then we build the docker image by running (from the top level of the directory)</p><pre class=\"language-md\"><code>docker build -t myproject .</code></pre><p>The <code class=\"language-md\">-t myproject</code> part <strong>tags</strong> the image with the name <span class=\"nowrap\"><code class=\"language-md\">myproject</code>,</span> and the dot means \"the current directory\" in Unix.</p><p><button class=\"next-step\">Continue</button></p></x-step>","goals":["next-0"],"keywords":[]},"step-docker-broken-build":{"id":"step-docker-broken-build","title":"Step Docker Broken Build","html":"<x-step id=\"step-docker-broken-build\" goals=\"next-0\"><p>Unfortunately, this image won't build, because of permissions issues. Looking at Jupyter's Dockerfiles, we find some inspiration: a script called <span class=\"nowrap\"><code class=\"language-md\">fix-permissions</code>.</span> This script can only be run as the <code class=\"language-md\">root</code> user, so we amend our Dockerfile to get this:</p><pre class=\"language-md\"><code>FROM jupyter/datascience-notebook\n\n# set working directory to home directory\nWORKDIR /home/jovyan\n\n# copy whole current directory into the image\nCOPY . project\n\n# Get data from GitHub\nUSER root\nRUN fix-permissions project &amp;&amp; \\\n    cd project/data/raw &amp;&amp; \\\n    wget https://browndsi.github.io/data/iris.csv\nUSER jovyan\n\n# Enter bash session in the project directory when\n# the container is run\nWORKDIR project\nCMD /bin/bash</code></pre><p>Then when we run <span class=\"nowrap\"><code class=\"language-md\">docker build -t myproject .</code>,</span> we get a successfully built image. We can see a list of our images by running <code class=\"language-md\">docker images</code> at the command line, and we can run the image we just made with</p><pre class=\"language-md\"><code>docker run -i -t myproject</code></pre><p>The <code class=\"language-md\">-i</code> and <code class=\"language-md\">-t</code> flags are for 'interactive' and 'terminal', indicating that we want to begin a shell session when we run the container.</p><p><button class=\"next-step\">Continue</button></p></x-step>","goals":["next-0"],"keywords":[]},"step-docker-makefile":{"id":"step-docker-makefile","title":"Step Docker Makefile","html":"<x-step id=\"step-docker-makefile\" goals=\"next-0\"><p>After running this command, we have a command prompt inside our running container. We can do <code class=\"language-md\">cat Makefile</code> to see how the Makefile encodes dependencies among the project components, as well as providing instructions for processing. Its contents are:</p><pre class=\"language-{code}\"><code>\n.PHONY: features train predict figures reports all\n\nall: reports\n\nfeatures: src/features/build_features.py\n    python src/features/build_features.py data/raw/ data/processed/\n\ntrain: features src/models/train_model.py\n    python src/models/train_model.py data/processed/ models/trained_model.joblib\n\npredict: train src/models/predict_model.py\n    python src/models/predict_model.py data/processed/ models/trained_model.joblib reports/\n\nfigures: src/visualization/visualize.R\n    Rscript src/visualization/visualize.R data/processed/ reports/figures/\n\nreports: reports/report.tex predict figures\n    cd reports &amp;&amp; \\\n    pdflatex report.tex &amp;&amp; \\\n    pdflatex report.tex</code></pre><p>We can visualize the dependency structure described by this Makefile as a directed graph:</p><center><figure><img src=\"/content/data-science-utilities/images/project-dag.svg\" width=\"200px\" alt=\"\"></figure></center><p>We can build the whole project from the Docker container with <span class=\"nowrap\"><code class=\"language-md\">make all</code>.</span> However, when we do that we realize that the <code class=\"language-md\">joblib</code> package (which is being used by some of the Python files) isn't available in the Jupyter <code class=\"language-md\">datascience-notebook</code> docker image. Therefore, we need to put that insstallation step into our Dockerfile and rebuild. We add the lines</p><pre class=\"language-md\"><code># Install joblib for storing Python models. The\n# '--yes' option preempts \"proceed?\" questions\nRUN conda install joblib --yes</code></pre><p><button class=\"next-step\">Continue</button></p></x-step>","goals":["next-0"],"keywords":[]},"step-docker-extract-file":{"id":"step-docker-extract-file","title":"Step Docker Extract File","html":"<x-step id=\"step-docker-extract-file\" goals=\"next-0\"><p>Building and running again, we can do <code class=\"language-md\">make all</code> from inside the running container to produce a PDF in the <code class=\"language-md\">reports</code> directory. We won't be able to view that file directly since it's inside the container. We'll need to copy it from the container to our operating system so that our OS's PDF viewing app can read it.</p><p><button class=\"next-step\">Continue</button></p></x-step>","goals":["next-0"],"keywords":[]},"step-docker-cp":{"id":"step-docker-cp","title":"Step Docker Cp","html":"<x-step id=\"step-docker-cp\" goals=\"next-0\"><p>The command for transferring files out of containers is <span class=\"nowrap\"><code class=\"language-md\">docker cp</code>.</span> We'll need to know the name of the container, which we can get using <code class=\"language-md\">docker ps</code> (note that this has to be run from your OS, so you should open a separate Terminal tab). In the last column of the <code class=\"language-md\">docker ps</code> output, we see a random name like <span class=\"nowrap\"><code class=\"language-md\">great_mayer</code>.</span> Then you can copy the file to <code class=\"language-md\">~/Desktop</code> (for example) using</p><pre class=\"language-md\"><code>docker cp great_mayer:/home/jovyan/project/reports/report.pdf ~/Desktop</code></pre><p>We could have given our project a name with the <code class=\"language-md\">--name</code> option when we did <span class=\"nowrap\"><code class=\"language-md\">docker run</code>,</span> and that would have allowed us to skip the <code class=\"language-md\">docker ps</code> step.</p><p><button class=\"next-step\">Continue</button></p></x-step>","goals":["next-0"],"keywords":[]},"step-docker-volumes":{"id":"step-docker-volumes","title":"Step Docker Volumes","html":"<x-step id=\"step-docker-volumes\" goals=\"blank-0 blank-1 blank-2 blank-3 blank-4 blank-5 next-0\"><p>The <code class=\"language-md\">docker cp</code> utility can be inadequate for extensive file transferring between the container and host OS. Docker supports a more robust approach using <strong>volumes</strong>, which are directories shared between the container and host. You can read more about volumes <a href=\"https://docs.docker.com/engine/reference/builder/#volume\" target=\"_blank\">here</a>.</p><p><button class=\"next-step\">Continue</button></p><div class=\"exercise\"> <p><strong>Exercise</strong> </p><ol> <li>To get files into a Docker image during its build, we use <x-blank-mc goal=\"blank-0\"><button class=\"choice\">COPY</button><button class=\"choice\">docker cp</button></x-blank-mc></li><li>To see a list of all of the Docker images we have on our machine, we use <span class=\"nowrap\"><x-blank-mc goal=\"blank-1\"><button class=\"choice\">docker images</button><button class=\"choice\">docker ps</button></x-blank-mc>.</span></li><li>To see a list of running containers, we do <x-blank-mc goal=\"blank-2\"><button class=\"choice\">docker ps</button><button class=\"choice\">docker images</button><button class=\"choice\">docker cp</button></x-blank-mc></li><li>Jupyter uses the Dockerfile command <x-blank-mc goal=\"blank-3\"><button class=\"choice\">EXPOSE</button><button class=\"choice\">PORT</button><button class=\"choice\">RUN</button></x-blank-mc> to connect the Jupyter server on the container to the browser on the host OS.</li><li>The Dockerfile command <code class=\"language-md\">FROM</code> is used to build an image on top of an existing image. <x-blank-mc goal=\"blank-4\"><button class=\"choice\">True</button><button class=\"choice\">False</button></x-blank-mc></li><li>The Dockerfile command <code class=\"language-md\">CMD</code> can be used to specify what executable should run when the container is started <x-blank-mc goal=\"blank-5\"><button class=\"choice\">True</button><button class=\"choice\">False</button></x-blank-mc></li></ol> </div> </x-step>","goals":["blank-0","blank-1","blank-2","blank-3","blank-4","blank-5","next-0"],"keywords":[]},"step-all-done":{"id":"step-all-done","title":"Step All Done","html":"<x-step id=\"step-all-done\" goals=\"\"><p>Congratulations! You have completed the Data Gymnasia course on Data Science Utilities.</p></x-step>","goals":[],"keywords":[]}},"availableLocales":["en"],"biosJSON":"{}","glossJSON":"{\"de-facto\":{\"title\":\"De Facto\",\"text\":\"<p>A <strong>de facto standard</strong> is a convention or tool that has achieved dominance by popular acceptance.</p>\"},\"use-case\":{\"title\":\"Use Case\",\"text\":\"<p>A <strong>use case</strong> for a tool or idea is a scenario in which it might be applied.</p>\"},\"directory\":{\"title\":\"Directory\",\"text\":\"<p>Another term for <em>folder</em> in an operating system</p>\"},\"unix-run\":{\"title\":\"Run\",\"text\":\"<p>To <em>run</em> a command in Unix, you type it or paste it into the command line and press the return key.</p>\"},\"bash-options\":{\"title\":\"Options\",\"text\":\"<p>A bash <strong>option</strong> is an argument which is supplied to a bash command to modify the way it runs. For example, <code class=\\\"language-bash\\\">ls</code> list the files in a directory, and <code class=\\\"language-bash\\\">ls -l</code> lists them in long form (including more information about each file).</p><p>Single-letter options usually begin with one dash, while longer option names usually begin with two dashes.</p>\"},\"executable\":{\"title\":\"Executable\",\"text\":\"<p>An executable is a file that can be run by the operating system.</p>\"},\"linus\":{\"title\":\"Linus Torvalds\",\"text\":\"<p>The creator of both Linux and Git.</p>\"},\"hidden-directory\":{\"title\":\"Hidden Directory\",\"text\":\"<p>A directory whose name begins with <code class=\\\"language-bash\\\">.</code> is hidden by default on Unix systems. This means that it doesn't show up in your operating system's file browser (unless you do <span class=\\\"nowrap\\\"><code class=\\\"language-bash\\\">command-shift-.</code>,</span> on macOS), and it isn't listed when you run <code class=\\\"language-bash\\\">ls</code> at the command line (unless you supply the flag <code class=\\\"language-bash\\\">-a</code> to see <em>all</em> files).</p>\"},\"git-clone\":{\"title\":\"Git Clone\",\"text\":\"<p>Create a local copy of a remote Git repository.</p><p>For example, running <code class=\\\"language-bash\\\">git clone git@github.com:data- gymnasia/python-binder.git</code> puts a directory called <code class=\\\"language-bash\\\">python-binder</code> in the current directory. The directory contains the latest version of the repository files, along with a <code class=\\\"language-bash\\\">.git</code> subdirectory that contains the commit history of the project. The URL for a GitHub repository is available under the green <em>Clone or Download</em> pulldown on the repository page.</p>\"},\"hash\":{\"title\":\"Hash\",\"text\":\"<p>A <strong>hash function</strong> is any function that maps data of arbitrary size to data of fixed size.</p><p>Hash functions often have two additional properties:</p><p> (1) Even small changes to the input usually result in substantial changes to the output. For example, the SHA-1 hash function maps \\\"The quick brown fox jumps over the lazy dog\\\" to 2fd4e1c67a2d28fced849ee1bb76e7391b93eb12 and \\\"The quick brown fox jumps over the lazy <strong>c</strong>og\\\" to de9f2c7fd25e1b3afad3e85a0bd17d9b100db4b3.</p><p> (2) It's computationally challenging to invert the function. Hash functions with this property are useful for cryptographic purposes (such as verifying the integrity of a file downloaded from the internet).</p>\"},\"binary-file\":{\"title\":\"Binary File\",\"text\":\"<p>A <strong>text file</strong> is a file whose contents are stored as text, and a <strong>binary file</strong> is a file which is not a text file.</p><p>For example, a C program is specified in a text file and then <em>compiled</em> to an executable file that the computer can run. The executable is binary.</p><p>We say that \\\"binaries are available\\\" for a given unit of software if users can download executable files to run the software. The alternative is that only the source code is available for download, and the user must \\\"build from source\\\" on their own computer before they can run the software.</p>\"},\"YAML\":{\"title\":\"YAML\",\"text\":\"<p>YAML stands for \\\"yet another markup language\\\" and is commonly used format for configuration files. Here's an example YAML file:</p><pre class=\\\"language-yaml\\\"><code>receipt:     Oz-Ware Purchase Invoice\\ndate:        2019-07-04\\ncustomer:\\n    first_name:   Dorothy\\n    family_name:  Gale\\n\\nitems:\\n    - part_no:   A4786\\n      descrip:   Water Bucket (Filled)\\n      price:     1.47\\n      quantity:  4\\n\\n    - part_no:   E1628\\n      descrip:   High Heeled \\\"Ruby\\\" Slippers\\n      size:      8\\n      price:     133.7\\n      quantity:  1</code></pre>\"},\"lingua-franca\":{\"title\":\"Lingua Franca\",\"text\":\"<p>A <em>lingua franca</em> is a language which is popular enough in a given community that knowledge of it is typically assumed within that community.</p>\"},\"respectively\":{\"title\":\"Respectively\",\"text\":\"<p><em>Respectively</em> means <em>in the given order</em>. For example, the sentence \\\"Alice and Bob wore a green and a blue shirt, respectively.\\\" means that Alice wore a green shirt and Bob wore a blue shirt.</p>\"},\"REPL\":{\"title\":\"REPL\",\"text\":\"<p>A <em>REPL</em>, or <em>read-eval-print-loop</em>, is a programming environment which takes user input at a command prompt, evaluates it, prints any results, and gives the user another prompt for further input.</p>\"},\"refactoring\":{\"title\":\"Refactoring\",\"text\":\"<p><strong>Code refactoring</strong> is changing the structure of a unit of code without changing its effect. For example, the lines</p><pre class=\\\"language-python\\\"><code>root1 = (-b + sqrt(b^2-4*a*c))/(2*a)\\nroot2 = (-b - sqrt(b^2-4*a*c))/(2*a)</code></pre><p>might be refactored into</p><pre class=\\\"language-python\\\"><code>Δ = b^2-4*a*c\\nroot1 = (-b + sqrt(Δ))/(2*a)\\nroot2 = (-b - sqrt(Δ))/(2*a)</code></pre>\"},\"linting\":{\"title\":\"Linting\",\"text\":\"<p>A <strong>code linter</strong> takes a program as input and identifies opportunities to improve the code's style.</p><p>For example, a linter might suggest replacing <code class=\\\"language-python\\\">x=3</code> with <span class=\\\"nowrap\\\"><code class=\\\"language-python\\\">x = 3</code>.</span></p>\"},\"vscode-install\":{\"title\":\"Installing from the VS Code Marketplace\",\"text\":\"<p>To install an extension from the Marketplace, click the square icon on the left edge of your window. Search for the desired extension and select \\\"Install\\\".</p>\"},\"vscode-jupyter-option\":{\"title\":\"VS Code Jupyter kernel\",\"text\":\"<p>Python code execution in VS Code is done either through an integrated terminal or using a Jupyter notebook kernel running behind the scenes. To activate the Jupyter option, go to the Marketplace, right click the gear icon on the Python extension, and enter \\\"send selection\\\" in the search bar. Check the box for \\\"Send Selection to Interactive Window\\\".</p>\"},\"boilerplate\":{\"title\":\"Boilerplate\",\"text\":\"<p>Chunks of code that are typically used with little modification. Requiring extensive boilerplate is generally considered undesirable, because of the unnecessary code chunk management it imposes on the programmer and its obscuration of what aspects of the program are most important.</p>\"},\"toy\":{\"title\":\"Toy\",\"text\":\"<p>A <strong>toy</strong> example is one which is deliberatively oversimplified for illustrative purposes.</p>\"}}","hintsJSON":"{\"welcome\":\"<p>Welcome to Data Gymnasia! I’m Bruno, your personal tutor. <img class=\\\"emoji\\\" width=\\\"20\\\" height=\\\"20\\\" src=\\\"https://static.mathigon.org/emoji/graduation-cap.png\\\" alt=\\\"graduation-cap\\\"></p>\",\"account\":\"<p>You can <x-target class=\\\"step-target pill\\\" to=\\\".nav-link.popup-target\\\">create a free account</x-target> to save your progress.</p>\",\"tutorial1\":\"<p>Our content is divided into small steps. You have to complete the activities to reveal what’s next.</p>\",\"tutorial2\":\"<p>We will save all your progress, so you can come back later and continue right where you left off.</p>\",\"correct\":[\"<p>Well done <img class=\\\"emoji\\\" width=\\\"20\\\" height=\\\"20\\\" src=\\\"https://static.mathigon.org/emoji/smiling-face.png\\\" alt=\\\"smiling-face\\\"></p>\",\"<p>Great Work! <img class=\\\"emoji\\\" width=\\\"20\\\" height=\\\"20\\\" src=\\\"https://static.mathigon.org/emoji/relieved-face.png\\\" alt=\\\"relieved-face\\\"></p>\",\"<p>Awesome <img class=\\\"emoji\\\" width=\\\"20\\\" height=\\\"20\\\" src=\\\"https://static.mathigon.org/emoji/grinning-face.png\\\" alt=\\\"grinning-face\\\"></p>\",\"<p>Brilliant <img class=\\\"emoji\\\" width=\\\"20\\\" height=\\\"20\\\" src=\\\"https://static.mathigon.org/emoji/thumbs-up.png\\\" alt=\\\"thumbs-up\\\"></p>\",\"<p>Excellent! <img class=\\\"emoji\\\" width=\\\"20\\\" height=\\\"20\\\" src=\\\"https://static.mathigon.org/emoji/ok-hand.png\\\" alt=\\\"ok-hand\\\"></p>\",\"<p>Cool <img class=\\\"emoji\\\" width=\\\"20\\\" height=\\\"20\\\" src=\\\"https://static.mathigon.org/emoji/smiling-face-with-sunglasses.png\\\" alt=\\\"smiling-face-with-sunglasses\\\"></p>\",\"<p>Nice! <img class=\\\"emoji\\\" width=\\\"20\\\" height=\\\"20\\\" src=\\\"https://static.mathigon.org/emoji/victory-hand.png\\\" alt=\\\"victory-hand\\\"></p>\",\"<p>Way to go! <img class=\\\"emoji\\\" width=\\\"20\\\" height=\\\"20\\\" src=\\\"https://static.mathigon.org/emoji/smiling-face-with-smiling-eyes.png\\\" alt=\\\"smiling-face-with-smiling-eyes\\\"></p>\",\"<p>Sweet <img class=\\\"emoji\\\" width=\\\"20\\\" height=\\\"20\\\" src=\\\"https://static.mathigon.org/emoji/smiling-face.png\\\" alt=\\\"smiling-face\\\"></p>\",\"<p>Impressive! <img class=\\\"emoji\\\" width=\\\"20\\\" height=\\\"20\\\" src=\\\"https://static.mathigon.org/emoji/trophy.png\\\" alt=\\\"trophy\\\"></p>\",\"<p>Outstanding <img class=\\\"emoji\\\" width=\\\"20\\\" height=\\\"20\\\" src=\\\"https://static.mathigon.org/emoji/grinning-face.png\\\" alt=\\\"grinning-face\\\"></p>\",\"<p>Superb! <img class=\\\"emoji\\\" width=\\\"20\\\" height=\\\"20\\\" src=\\\"https://static.mathigon.org/emoji/star.png\\\" alt=\\\"star\\\"></p>\",\"<p>Wonderful! <img class=\\\"emoji\\\" width=\\\"20\\\" height=\\\"20\\\" src=\\\"https://static.mathigon.org/emoji/smiling-face.png\\\" alt=\\\"smiling-face\\\"></p>\"],\"incorrect\":[\"<p>That’s not quite right <img class=\\\"emoji\\\" width=\\\"20\\\" height=\\\"20\\\" src=\\\"https://static.mathigon.org/emoji/frowning-face.png\\\" alt=\\\"frowning-face\\\"></p>\",\"<p>Are you sure about that? <img class=\\\"emoji\\\" width=\\\"20\\\" height=\\\"20\\\" src=\\\"https://static.mathigon.org/emoji/thinking-face.png\\\" alt=\\\"thinking-face\\\"></p>\",\"<p>That doesn’t look right. <img class=\\\"emoji\\\" width=\\\"20\\\" height=\\\"20\\\" src=\\\"https://static.mathigon.org/emoji/hushed-face.png\\\" alt=\\\"hushed-face\\\"></p>\",\"<p>Try again! <img class=\\\"emoji\\\" width=\\\"20\\\" height=\\\"20\\\" src=\\\"https://static.mathigon.org/emoji/confused-face.png\\\" alt=\\\"confused-face\\\"></p>\"],\"welcomeMorning\":\"<p>Good morning!</p>\",\"welcomeAfternoon\":\"<p>Good afternoon!</p>\",\"welcomeEvening\":\"<p>Good evening!</p>\",\"welcomeMorningNamed\":\"<p>Good morning, $name!</p>\",\"welcomeAfternoonNamed\":\"<p>Good afternoon, $name!</p>\",\"welcomeEveningNamed\":\"<p>Good evening, $name!</p>\"}"}