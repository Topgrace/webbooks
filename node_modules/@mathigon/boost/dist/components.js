var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __decorateClass = (decorators, target, key, kind) => {
  var result = kind > 1 ? void 0 : kind ? __getOwnPropDesc(target, key) : target;
  for (var i = decorators.length - 1, decorator; i >= 0; i--)
    if (decorator = decorators[i])
      result = (kind ? decorator(target, key, result) : decorator(result)) || result;
  if (kind && result)
    __defProp(target, key, result);
  return result;
};
var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};

// src/components/alert.ts
import { $body, $N, CustomElementView, register } from "./index.esm.js";
var $openAlert;
var $alertParent = $N("div", { class: "snackbar" }, $body);
var Alert = class extends CustomElementView {
  ready() {
    var _a;
    $alertParent.append(this);
    (_a = this.$("button")) == null ? void 0 : _a.on("click", () => this.close());
  }
  open(duration = 2e3) {
    return __async(this, null, function* () {
      if ($openAlert === this)
        return;
      if ($openAlert)
        yield $openAlert.close();
      $openAlert = this;
      yield this.enter("pop", 300).promise;
      this.setAttr("role", "alert");
      if (duration)
        setTimeout(() => this.close(), duration);
    });
  }
  close() {
    return __async(this, null, function* () {
      if ($openAlert !== this)
        return;
      $openAlert = void 0;
      this.removeAttr("role");
      yield this.exit("pop", 300).promise;
    });
  }
};
Alert = __decorateClass([
  register("x-alert")
], Alert);

// src/components/icon.ts
import { $N as $N2, CustomElementView as CustomElementView2, register as register2 } from "./index.esm.js";
var IconView = class extends CustomElementView2 {
  ready() {
    if (this.children.length)
      return;
    const $svg = $N2("svg", { viewBox: "0 0 24 24", alt: "", role: "presentation" }, this);
    const $use = $N2("use", {}, $svg);
    const size = +this.attr("size") || 24;
    for (const $el of [this, $svg])
      $el.css({ width: `${size}px`, height: `${size}px` });
    this.onAttr("name", (n) => $use.setAttr("href", `/icons.svg#${n}`));
  }
};
IconView = __decorateClass([
  register2("x-icon")
], IconView);

// src/components/modal.ts
import { $$, $body as $body2, $N as $N3, Browser, CustomElementView as CustomElementView3, register as register3, Router } from "./index.esm.js";
var $modalBackground = $N3("div", { class: "modal-background" }, $body2);
var backgroundAnimation;
var $openModal = void 0;
var lastFocusElement = void 0;
function tryClose() {
  if ($openModal && $openModal.canClose)
    $openModal.close();
}
$modalBackground.on("click", tryClose);
$body2.onKey("Escape", tryClose);
Router.on("change", tryClose);
$modalBackground.on("scrollwheel touchmove", (e) => {
  e.preventDefault();
  e.stopPropagation();
});
$body2.onKey("Space ArrowUp ArrowDown PageDown PageUp", (e) => {
  if ($openModal) {
    e.preventDefault();
    e.stopPropagation();
  }
});
var Modal = class extends CustomElementView3 {
  constructor() {
    super(...arguments);
    this.isOpen = false;
    this.canClose = true;
  }
  ready() {
    this.canClose = !this.hasAttr("no-close");
    this.$iframe = this.$("iframe[data-src]");
    this.$video = this.$("video");
    const $buttons = $$(`[data-modal=${this.id}]`);
    for (const $b of $buttons)
      $b.on("click", () => this.open());
    Router.on("afterChange", ({ $viewport }) => {
      const $buttons2 = $viewport.$$(`[data-modal=${this.id}]`);
      for (const $b of $buttons2)
        $b.on("click", () => this.open());
    });
    if ((this.hasClass("open") || Browser.getHash() === this.id) && !$openModal)
      this.open(true);
    if (this.$("input"))
      this.addClass("interactive");
    const $close = this.$(".close");
    if ($close)
      $close.on("click", () => this.close());
    for (const $btn of this.$$(".btn"))
      $btn.on("click", () => this.trigger("btn-click", $btn));
  }
  open(noAnimation = false) {
    var _a, _b;
    if (this.isOpen)
      return;
    $modalBackground.setClass("light", this.hasClass("light"));
    if ($openModal) {
      $openModal.close(true);
    } else if (noAnimation) {
      $modalBackground.show();
    } else if ($modalBackground.css("display") === "block") {
      backgroundAnimation == null ? void 0 : backgroundAnimation.cancel();
    } else {
      $modalBackground.enter("fade", 250);
    }
    this.isOpen = true;
    $openModal = this;
    if (this.$iframe)
      this.$iframe.setAttr("src", this.$iframe.data.src);
    if (this.$video)
      this.$video.play();
    if (noAnimation) {
      this.show();
    } else {
      this.enter("pop", 250).promise.then(() => this.css("transform", ""));
    }
    this.setAttr("role", "dialog");
    this.trigger("open");
    lastFocusElement = document.activeElement;
    const $focus = this.$('input, a, button, textarea, [tabindex="0"]');
    if ($focus)
      $focus.focus();
    (_a = window.ga) == null ? void 0 : _a.call(window, "send", "event", "Modal", this.id);
    (_b = window.gtag) == null ? void 0 : _b.call(window, "event", "modal", { action: this.id });
  }
  close(keepBg = false, noEvent = false) {
    if (!this.isOpen)
      return;
    this.isOpen = false;
    this.removeAttr("role");
    $openModal = void 0;
    if (this.$iframe)
      this.$iframe.setAttr("src", "");
    if (this.$video)
      this.$video.pause();
    if (!keepBg)
      backgroundAnimation = $modalBackground.exit("fade", 250);
    this.exit("pop", 250).promise.then(() => this.css("transform", ""));
    if (!noEvent)
      this.trigger("close");
    if (lastFocusElement)
      lastFocusElement.focus();
  }
  getOpenModal() {
    return $openModal;
  }
};
Modal = __decorateClass([
  register3("x-modal")
], Modal);

// src/components/popup.ts
import { $body as $body3, CustomElementView as CustomElementView4, register as register4 } from "./index.esm.js";
var Popup = class extends CustomElementView4 {
  constructor() {
    super(...arguments);
    this.isOpen = false;
  }
  ready() {
    this.animation = this.attr("animation") || "pop";
    this.$bubble = this.$(".popup-body");
    this.$bubble.hide();
    const $target = this.$(".popup-target");
    $target.on("click", () => this.toggleOpen());
    this.on("clickOutside", () => this.close());
    for (const $a of this.$bubble.$$("a"))
      $a.on("click", () => this.close());
    $body3.onKey("Escape", () => this.close());
  }
  toggleOpen() {
    if (this.isOpen) {
      this.close();
    } else {
      this.open();
    }
  }
  open() {
    if (this.isOpen)
      return;
    this.isOpen = true;
    this.addClass("active");
    this.$bubble.enter(this.animation, 150);
    this.$bubble.setAttr("role", "dialog");
    this.$bubble.focus();
    this.trigger("open");
  }
  close() {
    if (!this.isOpen)
      return;
    this.isOpen = false;
    this.removeClass("active");
    this.$bubble.exit(this.animation, 150);
    this.$bubble.removeAttr("role");
    this.trigger("close");
  }
};
Popup = __decorateClass([
  register4("x-popup")
], Popup);

// src/components/select.ts
import { isOneOf } from "@mathigon/core";
import { CustomElementView as CustomElementView5, register as register5 } from "./index.esm.js";
var Select = class extends CustomElementView5 {
  constructor() {
    super(...arguments);
    this.$options = {};
  }
  ready() {
    const $items = this.children;
    this.$active = this.$(".active") || $items[0];
    this.$active.addClass("active");
    for (const [i, $i] of $items.entries()) {
      if (!isOneOf($i.tagName, "A", "BUTTON") && !$i.hasAttr("tabindex"))
        $i.setAttr("tabindex", 0);
      $i.on("click", () => this.makeActive($i));
      this.$options[$i.attr("value") || i] = $i;
    }
    this.trigger("change", this.$active);
  }
  makeActive($el) {
    if ($el === this.$active)
      return;
    this.$active.removeClass("active");
    this.$active = $el;
    $el.addClass("active");
    this.trigger("change", $el);
  }
  bindVariable(model, name) {
    if (model[name] === void 0)
      model[name] = this.$active.attr("value");
    this.on("change", ($el) => model[name] = $el.attr("value"));
    model.watch(() => {
      const $el = this.$options[model[name]];
      if ($el)
        this.makeActive($el);
    });
  }
};
Select = __decorateClass([
  register5("x-select")
], Select);
//# sourceMappingURL=components.js.map
