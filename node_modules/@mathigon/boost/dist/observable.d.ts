type Callback<T> = (state: T, initial?: boolean) => void;
interface ObservableOptions<T> {
    watch: (fn: Callback<T>) => void;
    unwatch: (fn: Callback<T>) => void;
    watchAll: (fn: Callback<T>, dontRunImmediately?: boolean) => void;
    setComputed: (key: string, expr: (state: T) => unknown) => void;
    forceUpdate: () => void;
    assign: (obj: Partial<T>, clear?: boolean) => void;
    getChanges: () => [Partial<T>, Partial<T>];
    getKey: () => string;
    clear: () => void;
    copy: () => T;
}
export type Observable<T = any> = T & ObservableOptions<T>;
/** Batch multiple observable changes together into a single callback. */
export declare function batch(callback: () => void): void;
/** Convert object to an observable Proxy with .watch() callbacks. */
export declare function observe<T extends object = any>(state: T, parentModel?: Observable): Observable<T>;
export {};
