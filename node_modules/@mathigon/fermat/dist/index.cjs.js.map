{
  "version": 3,
  "sources": ["../src/index.ts", "../src/arithmetic.ts", "../src/combinatorics.ts", "../src/complex.ts", "../src/number-theory.ts", "../src/xnumber.ts", "../src/matrix.ts", "../src/random.ts", "../src/regression.ts", "../src/statistics.ts", "../src/vector.ts"],
  "sourcesContent": ["// =============================================================================\n// Fermat.ts Index\n// (c) Mathigon\n// =============================================================================\n\n\nexport * from './arithmetic';\nexport * from './combinatorics';\nexport * from './complex';\nexport * from './xnumber';\nexport * as Matrix from './matrix';\nexport * from './number-theory';\nexport * as Random from './random';\nexport * as Regression from './regression';\nexport * from './statistics';\nexport * from './vector';\n", "// ============================================================================\n// Fermat.js | Utility Functions\n// (c) Mathigon\n// ============================================================================\n\n\nconst PRECISION = 0.000001;\n\n\n// -----------------------------------------------------------------------------\n// Checks and Comparisons\n\n/** Checks if two numbers are nearly equals. */\nexport function nearlyEquals(a: number, b: number, t = PRECISION) {\n  if (isNaN(a) || isNaN(b)) return false;\n  return Math.abs(a - b) < t;\n}\n\n/* Checks if an object is an integer. */\nexport function isInteger(x: number, t = PRECISION) {\n  return nearlyEquals(x, Math.round(x), t);\n}\n\n/** Checks if a number x is between two numbers a and b. */\nexport function isBetween(value: number, a: number, b: number, t = PRECISION) {\n  if (a > b) [a, b] = [b, a];\n  return value > a + t && value < b - t;\n}\n\n/** Returns the sign of a number x, as +1, 0 or \u20131. */\nexport function sign(value: number, t = PRECISION) {\n  return nearlyEquals(value, 0, t) ? 0 : (value > 0 ? 1 : -1);\n}\n\n\n// -----------------------------------------------------------------------------\n// String Conversion\n\nconst NUM_REGEX = /(\\d+)(\\d{3})/;\nconst POWER_SUFFIX = ['', 'k', 'm', 'b', 't', 'q'];\n\nfunction addThousandSeparators(x: string) {\n  let [n, dec] = x.split('.');\n  while (NUM_REGEX.test(n)) {\n    n = n.replace(NUM_REGEX, '$1,$2');\n  }\n  return n + (dec ? `.${dec}` : '');\n}\n\nfunction addPowerSuffix(n: number, places = 6) {\n  if (!places) return `${n}`;\n\n  // Trim short numbers to the appropriate number of decimal places.\n  const digits = (`${Math.abs(Math.floor(n))}`).length;\n  const chars = digits + (n < 0 ? 1 : 0);\n  if (chars <= places) return `${round(n, places - chars)}`;\n\n  // Append a power suffix to longer numbers.\n  const x = Math.floor(Math.log10(Math.abs(n)) / 3);\n  const suffix = POWER_SUFFIX[x];\n  const decimalPlaces = places - ((digits % 3) || 3) - (suffix ? 1 : 0) - (n < 0 ? 1 : 0);\n  return round(n / Math.pow(10, 3 * x), decimalPlaces) + suffix;\n}\n\n/**\n * Converts a number to a clean string, by rounding, adding power suffixes, and\n * adding thousands separators. `places` is the number of digits to show in the\n * result.\n */\nexport function numberFormat(n: number, places = 0, separators = true) {\n  const str = addPowerSuffix(n, places).replace('-', '\u2013');\n  return separators ? addThousandSeparators(str) : str;\n}\n\nexport function scientificFormat(value: number, places = 6) {\n  const abs = Math.abs(value);\n  if (isBetween(abs, Math.pow(10, -places), Math.pow(10, places))) {\n    return numberFormat(value, places);\n  }\n\n  // TODO Decide how we want to handle these special cases\n  if (abs > Number.MAX_VALUE) return `${Math.sign(value) < 0 ? '\u2013' : ''}\u221E`;\n  if (abs < Number.MIN_VALUE) return '0';\n\n  const [str, exponent] = value.toExponential().split('e');\n  const top = exponent.replace('+', '').replace('-', '\u2013');\n  const isNegative = top.startsWith('\u2013');\n  return `${str.slice(0, 5)} \u00D7 10^${(isNegative ? '(' : '') + top + (isNegative ? ')' : '')}`;\n}\n\n// Numbers like 0,123 are decimals, even though they match POINT_DECIMAL.\nconst SPECIAL_DECIMAL = /^-?0,[0-9]+$/;\n\n// Points as decimal points, Commas as 1k separators, allow starting .\nconst POINT_DECIMAL = /^-?([0-9]+(,[0-9]{3})*)?\\.?[0-9]*$/;\n\n// Commas as decimal points, Points as 1k separators, don't allow starting ,\nconst COMMA_DECIMAL = /^-?[0-9]+(\\.[0-9]{3})*,?[0-9]*$/;\n\n/**\n * Converts a number to a string, including . or , decimal points and\n * thousands separators.\n * @param {string} str\n * @returns {number}\n */\nexport function parseNumber(str: string) {\n  str = str.replace(/^\u2013/, '-').trim();\n  if (!str || str.match(/[^0-9.,-]/)) return NaN;\n\n  if (SPECIAL_DECIMAL.test(str)) {\n    return parseFloat(str.replace(/,/, '.'));\n  }\n\n  if (POINT_DECIMAL.test(str)) {\n    return parseFloat(str.replace(/,/g, ''));\n  }\n\n  if (COMMA_DECIMAL.test(str)) {\n    return parseFloat(str.replace(/\\./g, '').replace(/,/, '.'));\n  }\n\n  return NaN;\n}\n\n/**\n * Converts a number to an ordinal.\n * @param {number} x\n * @returns {string}\n */\nexport function toOrdinal(x: number) {\n  if (Math.abs(x) % 100 >= 11 && Math.abs(x) % 100 <= 13) {\n    return `${x}th`;\n  }\n\n  switch (x % 10) {\n    case 1:\n      return `${x}st`;\n    case 2:\n      return `${x}nd`;\n    case 3:\n      return `${x}rd`;\n    default:\n      return `${x}th`;\n  }\n}\n\n// TODO Translate this function into other languages.\n\nconst ONES = ['', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\n  'eight', 'nine', 'ten', 'eleven', 'twelve', 'thirteen', 'fourteen',\n  'fifteen', 'sixteen', 'seventeen', 'eighteen', 'nineteen'];\n\nconst TENS = ['', '', 'twenty', 'thirty', 'forty', 'fifty', 'sixty',\n  'seventy', 'eighty', 'ninety'];\n\nconst MULTIPLIERS = ['', ' thousand', ' million', ' billion', ' trillion',\n  ' quadrillion', ' quintillion', ' sextillion'];\n\nfunction toWordSingle(number: string) {\n  const [h, t, o] = number.split('');\n  const hundreds = (h === '0') ? '' : ` ${ONES[+h]} hundred`;\n  if (t + o === '00') return hundreds;\n  if (+t < 2) return `${hundreds} ${ONES[+(t + o)]}`;\n  if (o === '0') return `${hundreds} ${TENS[+t]}`;\n  return `${hundreds} ${TENS[+t]}-${ONES[+o]}`;\n}\n\n/** Spells a number as an English word. */\nexport function toWord(n: number) {\n  if (n === 0) return 'zero';\n\n  const str = Math.round(Math.abs(n)).toString();\n  const chunks = Math.ceil(str.length / 3);\n\n  const padded = str.padStart(3 * chunks, '0');\n  let result = '';\n\n  for (let i = 0; i < chunks; i += 1) {\n    const chunk = padded.substr(i * 3, 3);\n    if (chunk === '000') continue;\n    result += toWordSingle(chunk) + MULTIPLIERS[chunks - 1 - i];\n  }\n\n  return result.trim();\n}\n\n\n// -----------------------------------------------------------------------------\n// Rounding, Decimals and Fractions\n\n/** Returns the digits of a number n. */\nexport function digits(n: number) {\n  const str = `${Math.abs(n)}`;\n  return str.split('').reverse().map(x => +x);\n}\n\n/** Rounds a number `n` to `precision` decimal places. */\nexport function round(n: number, precision = 0) {\n  const factor = Math.pow(10, precision);\n  return Math.round(n * factor) / factor;\n}\n\n/** Round a number `n` to the nearest multiple of `increment`. */\nexport function roundTo(n: number, increment = 1) {\n  return Math.round(n / increment) * increment;\n}\n\n\n// -----------------------------------------------------------------------------\n// Simple Operations\n\n/** Bounds a number between a lower and an upper limit. */\nexport function clamp(x: number, min = -Infinity, max = Infinity) {\n  return Math.min(max, Math.max(min, x));\n}\n\n/** Linear interpolation */\nexport function lerp(a: number, b: number, t = 0.5) {\n  return a + (b - a) * t;\n}\n\n/** Squares a number. */\nexport function square(x: number) {\n  return x * x;\n}\n\n/** Cubes a number. */\nexport function cube(x: number) {\n  return x * x * x;\n}\n\n/**\n * Calculates `a mod m`. The JS implementation of the % operator returns the\n * symmetric modulo. Both are identical if a >= 0 and m >= 0 but the results\n * differ if a or m < 0.\n */\nexport function mod(a: number, m: number) {\n  return ((a % m) + m) % m;\n}\n\n/** Calculates the logarithm of `x` with base `b`. */\nexport function log(x: number, b?: number) {\n  return (b === undefined) ? Math.log(x) : Math.log(x) / Math.log(b);\n}\n\n/** Solves the quadratic equation a x^2 + b x + c = 0 */\nexport function quadratic(a: number, b: number, c: number): number[] {\n  if (nearlyEquals(a, 0) && nearlyEquals(b, 0)) return [];\n  if (nearlyEquals(a, 0)) return [-c / b];\n\n  const p = -b / 2 / a;\n  const q = Math.sqrt(b * b - 4 * a * c) / 2 / a;\n  return [p + q, p - q];\n}\n\nexport function polynomial(x: number, coefficients: number[]) {\n  let total = 0;\n  let xi = 1;\n\n  for (const c of coefficients) {\n    total += xi * c;\n    xi *= x;\n  }\n\n  return total;\n}\n", "// ============================================================================\n// Fermat.js | Combinatorics\n// (c) Mathigon\n// ============================================================================\n\n\n/** Calculates the factorial of a number x. */\nexport function factorial(x: number) {\n  if (x === 0) return 1;\n  if (x < 0) return NaN;\n\n  let n = 1;\n  for (let i = 2; i <= x; ++i) n *= i;\n  return n;\n}\n\n\n/** Calculates the binomial coefficient nCk of two numbers n and k. */\nexport function binomial(n: number, k: number): number {\n  if (k < 0 || k > n) return 0;\n  if (k === 0) return 1;\n  if (2 * k > n) return binomial(n, n - k);\n\n  let coeff = 1;\n  for (let i = 1; i <= k; ++i) coeff *= ((n - i + 1) / i);\n  return Math.round(coeff);\n}\n\n\n/**\n * Returns an array of all possible permutations of an input array arr. In this\n * implementation, we always have permutations(arr)[0] == arr. From\n * http://stackoverflow.com/questions/9960908/permutations-in-javascript\n */\nexport function permutations<T>(arr: T[]): T[][] {\n  const permArr: T[][] = [];\n  const usedChars: T[] = [];\n  permuteHelper<T>(arr, permArr, usedChars);\n  return permArr;\n}\n\nfunction permuteHelper<T>(input: T[], permArr: T[][], usedChars: T[]) {\n  for (let i = 0; i < input.length; i++) {\n    const term = input.splice(i, 1)[0];\n    usedChars.push(term);\n    if (input.length === 0) {\n      permArr.push(usedChars.slice());\n    }\n    permuteHelper<T>(input, permArr, usedChars);\n    input.splice(i, 0, term);\n    usedChars.pop();\n  }\n}\n\n\n/**\n * Returns an array of all possible subsets of an input array (of given length).\n */\nexport function subsets<T>(array: T[], length = 0) {\n  const copy = array.slice(0);\n  const results = subsetsHelper<T>(copy);\n  return length ? results.filter(x => x.length === length) : results;\n}\n\nfunction subsetsHelper<T>(array: T[]) {\n  if (array.length === 1) return [[], array];\n\n  const last = array.pop()!;\n  const subsets = subsetsHelper<T>(array);\n\n  const result: T[][] = [];\n  for (const s of subsets) {\n    result.push(s, [...s, last]);\n  }\n  return result;\n}\n", "// =============================================================================\n// Fermat.js | Complex Numbers\n// (c) Mathigon\n// =============================================================================\n\n\nimport {round} from './arithmetic';\n\n\nconst absStr = (n: number, suffix?: string) => {\n  const prefix = n < 0 ? '\u2013' : '';\n  if (Math.abs(n) === 1 && suffix) return prefix + suffix;\n  return prefix + Math.abs(n) + (suffix || '');\n};\n\n\n/**  Complex number class. */\nexport class Complex {\n\n  constructor(public re = 0, public im = 0) {}\n\n  get modulus() {\n    return Math.sqrt(this.re * this.re + this.im * this.im);\n  }\n\n  get argument() {\n    return Math.atan2(this.im, this.re);\n  }\n\n  get conjugate() {\n    return new Complex(this.re, -this.im);\n  }\n\n  /** Returns the ith nth-root of this complex number. */\n  root(n: number, i = 0) {\n    const r = Math.pow(this.modulus, 1/n);\n    const th = (this.argument + i * 2 * Math.PI) / n;\n    return new Complex(r * Math.cos(th), r * Math.sin(th));\n  }\n\n  toString(precision = 2) {\n    const re = round(this.re, precision);\n    const im = round(this.im, precision);\n\n    if (im === 0) return absStr(re);\n    if (re === 0) return absStr(im, 'i');\n    return [absStr(re), im < 0 ? '\u2013' : '+', absStr(Math.abs(im), 'i')].join(' ');\n  }\n\n  // ---------------------------------------------------------------------------\n\n  add(a: Complex|number) {\n    return Complex.sum(this, a);\n  }\n\n  subtract(a: Complex|number) {\n    return Complex.difference(this, a);\n  }\n\n  multiply(a: Complex|number) {\n    return Complex.product(this, a);\n  }\n\n  divide(a: Complex|number) {\n    return Complex.quotient(this, a);\n  }\n\n  /** Calculates the sum of two complex numbers c1 and c2. */\n  static sum(c1: Complex|number, c2: Complex|number) {\n    if (typeof c1 === 'number') c1 = new Complex(c1, 0);\n    if (typeof c2 === 'number') c2 = new Complex(c2, 0);\n\n    return new Complex(c1.re + c2.re, c1.im + c2.im);\n  }\n\n  /** Calculates the difference of two complex numbers c1 and c2. */\n  static difference(c1: Complex|number, c2: Complex|number) {\n    if (typeof c1 === 'number') c1 = new Complex(c1, 0);\n    if (typeof c2 === 'number') c2 = new Complex(c2, 0);\n\n    return new Complex(c1.re - c2.re, c1.im - c2.im);\n  }\n\n  /** Calculates the product of two complex numbers c1 and c2. */\n  static product(c1: Complex|number, c2: Complex|number) {\n    if (typeof c1 === 'number') c1 = new Complex(c1, 0);\n    if (typeof c2 === 'number') c2 = new Complex(c2, 0);\n\n    const re = c1.re * c2.re - c1.im * c2.im;\n    const im = c1.im * c2.re + c1.re * c2.im;\n    return new Complex(re, im);\n  }\n\n  /** Calculates the quotient of two complex numbers c1 and c2. */\n  static quotient(c1: Complex|number, c2: Complex|number) {\n    if (typeof c1 === 'number') c1 = new Complex(c1, 0);\n    if (typeof c2 === 'number') c2 = new Complex(c2, 0);\n\n    if (Math.abs(c2.re) < Number.EPSILON || Math.abs(c2.im) < Number.EPSILON) {\n      return new Complex(Infinity, Infinity);\n    }\n\n    const denominator = c2.re * c2.re + c2.im * c2.im;\n    const re = (c1.re * c2.re + c1.im * c2.im) / denominator;\n    const im = (c1.im * c2.re - c1.re * c2.im) / denominator;\n\n    return new Complex(re, im);\n  }\n\n  /** Calculates e^c for a complex number c. */\n  static exp(c: Complex|number) {\n    if (typeof c === 'number') c = new Complex(c, 0);\n    const r = Math.exp(c.re);\n    return new Complex(r * Math.cos(c.im), r * Math.sin(c.im));\n  }\n}\n", "// ============================================================================\n// Fermat.js | Number Theory\n// (c) Mathigon\n// ============================================================================\n\n\nimport {unique} from '@mathigon/core';\n\n\n/** Calculates the greatest common divisor of multiple numbers. */\nexport function gcd(...numbers: number[]): number {\n  const [first, ...rest] = numbers;\n  if (rest.length > 1) return gcd(first, gcd(...rest));\n\n  let a = Math.abs(first);\n  let b = Math.abs(rest[0]);\n\n  while (b) [a, b] = [b, a % b];\n  return a;\n}\n\n/** Calculates the lowest common multiple of multiple numbers. */\nexport function lcm(...numbers: number[]): number {\n  const [first, ...rest] = numbers;\n  if (rest.length > 1) return lcm(first, lcm(...rest));\n\n  return Math.abs(first * rest[0]) / gcd(first, rest[0]);\n}\n\n/** Checks if a number n is prime. */\nexport function isPrime(n: number) {\n  if (n % 1 !== 0 || n < 2) return false;\n\n  if (n % 2 === 0) return (n === 2);\n  if (n % 3 === 0) return (n === 3);\n\n  const m = Math.sqrt(n);\n  for (let i = 5; i <= m; i += 6) {\n    if (n % i === 0) return false;\n    if (n % (i + 2) === 0) return false;\n  }\n\n  return true;\n}\n\n/** Finds the prime factorisation of a number n. */\nexport function primeFactorisation(n: number): number[] {\n  if (n === 1) return [];\n  if (isPrime(n)) return [n];\n\n  const maxf = Math.sqrt(n);\n  for (let f = 2; f <= maxf; ++f) {\n    if (n % f === 0) {\n      return primeFactorisation(f).concat(primeFactorisation(n / f));\n    }\n  }\n\n  return [];\n}\n\n/** Finds all prime factors of a number n. */\nexport function primeFactors(n: number) {\n  return unique(primeFactorisation(n));\n}\n\n/** Lists all prime numbers between 0 and n. */\nexport function listPrimes(n = 100) {\n  if (n < 2) return [];\n  const result = [2];\n\n  for (let i = 3; i <= n; i++) {\n    let notMultiple = false;\n    for (const r of result) {\n      notMultiple = notMultiple || (0 === i % r);\n    }\n    if (!notMultiple) result.push(i);\n  }\n\n  return result;\n}\n\n/** Generates a random prime number with d digits, where 2 <= d <= 16. */\nexport function generatePrime(d: number) {\n  if (d < 2 || d > 16) throw new Error('Invalid number of digits.');\n\n  const lastDigit = [1, 3, 7, 9];\n  const pow = Math.pow(10, d - 2);\n\n  while (true) {\n    const n = Math.floor(Math.random() * 9 * pow) + pow;\n    const x = 10 * n + lastDigit[Math.floor(4 * Math.random())];\n    if (isPrime(x)) return x;\n  }\n}\n\n/** Tries to write a number x as the sum of two primes. */\nexport function goldbach(x: number): [number, number] {\n  if (x === 4) return [2, 2];\n\n  let a = x / 2;\n  let b = x / 2;\n\n  if (a % 2 === 0) {\n    a--;\n    b++;\n  }\n\n  while (a >= 3) {\n    if (isPrime(a) && isPrime(b)) return [a, b];\n    a -= 2;\n    b += 2;\n  }\n\n  return [-1, -1];\n}\n\n/** Computes Euler's totient function (phi) for a given natural number x. */\nexport function eulerPhi(x: number) {\n  if (x <= 0) throw Error('Number should be greater than zero');\n\n  let n = x;\n  for (const p of primeFactors(x)) n *= (p - 1) / p;\n  return n;\n}\n", "// =============================================================================\n// Fermat.js | Extended Number Class\n// (c) Mathigon\n// =============================================================================\n\n\nimport {isInteger, nearlyEquals, numberFormat, sign} from './arithmetic';\nimport {gcd, lcm} from './number-theory';\n\n\nconst FORMAT = /^([0-9\\-.]*)([%\u03C0kmbtq]?)(\\/([0-9\\-.]+))?([%\u03C0]?)$/;\nconst tooBig = (x: number) => x >= Number.MAX_SAFE_INTEGER;\ntype Suffix = '%'|'\u03C0'|undefined;\n\n\n/**  Extended Number class. */\nexport class XNumber {\n  num: number;  /** Used for all number types (decimals, fractions, units, ...). */\n  den?: number;  /** Only used for fractions and always \u2265 0. */\n\n  constructor(num: number, den?: number, public unit?: Suffix) {\n    // Ensure that den is always positive\n    this.num = (den !== undefined && den < 0) ? -num : num;\n    if (den !== undefined && Math.abs(den) !== 1 && num !== 0) this.den = Math.abs(den);\n  }\n\n  valueOf() {\n    return this.value;\n  }\n\n  toMixed() {\n    if (!this.den || this.unit) return this.toString();\n    const part = Math.abs(this.num) % this.den;\n    const whole = Math.abs(Math.trunc(this.value));\n    if (!whole) return this.toString();\n    return `${this.sign < 0 ? '\u2013' : ''}${whole} ${part}/${this.den}`;\n  }\n\n  toExpr(type?: 'decimal'|'fraction'|'mixed'|'scientific', precision = 4) {\n    const v = this.value;\n    // TODO Decide if we really want to return infinity here...\n    if (Math.abs(v) >= Number.MAX_VALUE) return '\u221E';\n    if (tooBig(this.num) || this.den && tooBig(this.den)) type = 'decimal';\n\n    // In scientific notation, we try to return a number in the form a \u00D7 10^b\n    if (type === 'scientific' || Math.abs(v) >= Number.MAX_SAFE_INTEGER) {\n      const [base, power] = this.value.toExponential(precision - 1).split('e');\n      if (Math.abs(+power) >= precision) {\n        const isNeg = power.startsWith('-');\n        const exp = `${isNeg ? '(' : ''}${isNeg ? power : power.slice(1)}${isNeg ? ')' : ''}`;\n        return `${base.replace(/\\.?0+$/, '')} \u00D7 10^${exp}${this.unit || ''}`;\n      }\n    }\n\n    if ((!this.unit && !this.den) || type === 'decimal' || type === 'scientific') {\n      const formatted = numberFormat(this.value, precision);\n      // For non-standard number formatting, we add quotes for expr parsing.\n      return (formatted.match(/^[\\d.]+$/g) ? formatted : `\"${formatted}\"`);\n    } else {\n      return type === 'mixed' ? this.toMixed() : this.toString();\n    }\n  }\n\n  toString(precision = 4) {\n    const separators = !this.den && !this.unit;\n    let num = numberFormat(this.num, this.den ? 0 : precision, separators);\n    let unit = this.unit || '';\n    const den = this.den ? `/${numberFormat(this.den, 0, separators)}` : '';\n    if (num === '0') unit = '';\n    if (unit === '\u03C0' && !this.den && (num === '1' || num === '\u20131')) num = num.replace('1', '');\n    return `${num}${den}${unit}`;\n  }\n\n  toMathML() {\n    let str = `<mn>${this.num}</mn>`;\n    if (this.den !== undefined) str = `<mfrac>${str}<mn>${this.den}</mn></mfrac>`;\n    if (this.unit) str += (this.unit === '\u03C0') ? `<mi>\u03C0</mi>` : `<mo>%</mo>`;\n    return str;\n  }\n\n  // ---------------------------------------------------------------------------\n\n  /**\n   * Returns the value of this number as a decimal. For example, 2/5 and 40%\n   * would both return 0.4.\n   */\n  get value() {\n    const unit = (this.unit === '%') ? 1/100 : (this.unit === '\u03C0') ? Math.PI : 1;\n    return this.num * unit / (this.den || 1);\n  }\n\n  get sign() {\n    return Math.sign(this.num);\n  }\n\n  /** Simplifies fractions, e.g. 4/8 would become 1/2. */\n  get simplified(): XNumber {\n    if (!this.den) return this;\n    const factor = gcd(Math.abs(this.num), this.den);\n    return new XNumber(this.num / factor, this.den / factor, this.unit);\n  }\n\n  /** Returns 1/x of this number. */\n  get inverse() {\n    if (!this.den) return new XNumber(this.den!, this.num);\n    return new XNumber(1 / this.num, undefined, this.unit);\n  }\n\n  /** Returns -x of this number. */\n  get negative() {\n    return new XNumber(-this.num, this.den, this.unit);\n  }\n\n  get fraction() {\n    if (this.unit || !isInteger(this.num)) return;\n    return [this.num, this.den || 1];\n  }\n\n  // ---------------------------------------------------------------------------\n\n  /** Parses a number string, e.g. '1/2' or '20.7%'. */\n  static fromString(s: string) {\n    s = s.toLowerCase().replace(/[\\s,\"]/g, '').replace('\u2013', '-').replace('pi', '\u03C0');\n    const match = s.match(FORMAT);\n    if (!match) return;\n\n    let suffix = (match[2] || match[5] || undefined) as Suffix;\n    let num = match[1] ? +match[1] : undefined;\n    const den = match[4] ? +match[4] : undefined;\n\n    // Special handling for \u03C0 and -\u03C0\n    if (suffix === '\u03C0' && (!match[1] || match[1] === '-')) num = match[1] ? -1 : 1;\n    if (num === undefined || isNaN(num)) return;\n\n    // Handle larger power suffixes\n    const power = suffix ? 'kmbtq'.indexOf(suffix) : -1;\n    if (power >= 0) {\n      num *= 1000 ** (power + 1);\n      suffix = undefined;\n    }\n\n    // Create XNumber instances\n    if (den === undefined) return new XNumber(num, undefined, suffix);\n    if (isNaN(den) || nearlyEquals(den, 0)) return;\n    if (!isInteger(num) || !isInteger(den)) return new XNumber(num / den, undefined, suffix);\n    return new XNumber(num, den, suffix);\n  }\n\n  /** Converts a decimal into the closest fraction with a given maximum denominator. */\n  static fractionFromDecimal(x: number, maxDen = 1000, precision = 1e-12) {\n    let n = [1, 0];\n    let d = [0, 1];\n    const absX = Math.abs(x);\n    let rem = absX;\n\n    while (Math.abs(n[0] / d[0] - absX) > precision) {\n      const a = Math.floor(rem);\n      n = [a * n[0] + n[1], n[0]];\n      d = [a * d[0] + d[1], d[0]];\n      if (d[0] > maxDen) return new XNumber(x);\n      rem = 1 / (rem - a);\n    }\n\n    if (!nearlyEquals(n[0] / d[0], absX, precision)) return new XNumber(x);\n    return new XNumber(sign(x) * n[0], d[0] === 1 ? undefined : d[0]);\n  }\n\n  // ---------------------------------------------------------------------------\n\n  clamp(min?: number, max?: number) {\n    const v = this.value;\n    if (min !== undefined && v < min) return new XNumber(min);\n    if (max !== undefined && v > max) return new XNumber(max);\n    return this;\n  }\n\n  add(a: XNumber|number) {\n    return XNumber.sum(this, a);\n  }\n\n  subtract(a: XNumber|number) {\n    return XNumber.difference(this, a);\n  }\n\n  multiply(a: XNumber|number) {\n    return XNumber.product(this, a);\n  }\n\n  divide(a: XNumber|number) {\n    return XNumber.quotient(this, a);\n  }\n\n  /** Calculates the sum of two fractions a and b. */\n  static sum(a: XNumber, b: XNumber|number): XNumber {\n    if (typeof b === 'number') b = new XNumber(b);\n    if (a.num === 0) return b;\n\n    // If units are different, always convert to a decimal\n    // TODO Maybe have special handling for fraction + percentage?\n    if (a.unit !== b.unit) return new XNumber(a.value + b.value);\n\n    // Neither a nor b are fractions\n    if (!a.den && !b.den) return new XNumber(a.num + b.num, undefined, a.unit);\n\n    // Ensure that a is always a fraction\n    if (!a.den) [a, b] = [b, a];\n\n    // Trying to add a decimal to a fraction.\n    // TODO Maybe try XNumber.fractionFromDecimal?\n    if (!isInteger(b.num)) return new XNumber(a.value + b.value, undefined, a.unit);\n\n    const common = lcm(a.den!, b.den ||1);\n    const fa = common / a.den!;\n    const fb = common / (b.den || 1);\n    return new XNumber(a.num * fa + b.num * fb, common, a.unit);\n  }\n\n  /** Calculates the difference of two numbers a and b. */\n  static difference(a: XNumber, b: XNumber|number) {\n    if (typeof b === 'number') b = new XNumber(b);\n    return XNumber.sum(a, b.negative);\n  }\n\n  /** Calculates the product of two numbers a and b. */\n  static product(a: XNumber, b: XNumber|number) {\n    if (typeof b === 'number') b = new XNumber(b);\n\n    // Handle simple integer multiplication\n    if (!a.unit && !a.den && isInteger(a.num)) return new XNumber(a.num * b.num, b.den, b.unit);\n    if (!b.unit && !b.den && isInteger(b.num)) return new XNumber(a.num * b.num, a.den, a.unit);\n\n    // Decimals or units that need to be converted\n    if (a.unit === '\u03C0' || b.unit === '\u03C0' || !isInteger(a.num) || !isInteger(b.num)) return new XNumber(a.value * b.value);\n\n    // Fraction multiplication\n    const units = (a.unit === '%' ? 100 : 1) * (b.unit === '%' ? 100 : 1);\n    return new XNumber(a.num * b.num, (a.den || 1) * (b.den || 1) * units);\n  }\n\n  /** Calculates the quotient of two fractions a and b. */\n  static quotient(a: XNumber, b: XNumber|number) {\n    if (typeof b === 'number') b = new XNumber(b);\n    return XNumber.product(a, b.inverse);\n  }\n}\n", "// =============================================================================\n// Fermat.js | Matrix\n// (c) Mathigon\n// =============================================================================\n\n\nimport {repeat2D, tabulate2D} from '@mathigon/core';\nimport {nearlyEquals} from './arithmetic';\n\n\ntype Matrix = number[][];\n\n// ---------------------------------------------------------------------------\n// Constructors\n\n/** Fills a matrix of size x, y with a given value. */\nexport function fill(value: number, x: number, y: number) {\n  return repeat2D(value, x, y);\n}\n\n/** Returns the identity matrix of size n. */\nexport function identity(n = 2) {\n  const x = fill(0, n, n);\n  for (let i = 0; i < n; ++i) x[i][i] = 1;\n  return x;\n}\n\nexport function rotation(angle: number) {\n  const sin = Math.sin(angle);\n  const cos = Math.cos(angle);\n  return [[cos, -sin], [sin, cos]];\n}\n\nexport function shear(lambda: number) {\n  return [[1, lambda], [0, 1]];\n}\n\nexport function reflection(angle: number) {\n  const sin = Math.sin(2 * angle);\n  const cos = Math.cos(2 * angle);\n  return [[cos, sin], [sin, -cos]];\n}\n\n\n// ---------------------------------------------------------------------------\n// Matrix Operations\n\n/** Calculates the sum of two or more matrices. */\nexport function sum(...matrices: Matrix[]): Matrix {\n  const [M1, ...rest] = matrices;\n  const M2 = rest.length > 1 ? sum(...rest) : rest[0];\n\n  if (M1.length !== M2.length || M1[0].length !== M2[0].length) {\n    throw new Error('Matrix sizes don\u2019t match');\n  }\n\n  const S = [];\n  for (let i = 0; i < M1.length; ++i) {\n    const row = [];\n    for (let j = 0; j < M1[i].length; ++j) {\n      row.push(M1[i][j] + M2[i][j]);\n    }\n    S.push(row);\n  }\n  return S;\n}\n\n/** Multiplies a matrix M by a scalar v. */\nexport function scalarProduct(M: Matrix, v: number) {\n  return M.map(row => row.map(x => x * v));\n}\n\n/** Calculates the matrix product of multiple matrices. */\nexport function product(...matrices: Matrix[]): Matrix {\n  const [M1, ...rest] = matrices;\n  const M2 = rest.length > 1 ? product(...rest) : rest[0];\n\n  if (M1[0].length !== M2.length) {\n    throw new Error('Matrix sizes don\u2019t match.');\n  }\n\n  const P = [];\n  for (let i = 0; i < M1.length; ++i) {\n    const row = [];\n    for (let j = 0; j < M2[0].length; ++j) {\n\n      let value = 0;\n      for (let k = 0; k < M2.length; ++k) {\n        value += M1[i][k] * M2[k][j];\n      }\n      row.push(value);\n\n    }\n    P.push(row);\n  }\n  return P;\n}\n\n\n// ---------------------------------------------------------------------------\n// Matrix Properties\n\n/** Calculates the transpose of a matrix M. */\nexport function transpose(M: Matrix) {\n  const T = [];\n  for (let j = 0; j < M[0].length; ++j) {\n    const row = [];\n    for (let i = 0; i < M.length; ++i) {\n      row.push(M[i][j]);\n    }\n    T.push(row);\n  }\n  return T;\n}\n\n/** Calculates the determinant of a matrix M. */\nexport function determinant(M: Matrix) {\n  if (M.length !== M[0].length) throw new Error('Not a square matrix.');\n  const n = M.length;\n\n  // Shortcuts for small n\n  if (n === 1) return M[0][0];\n  if (n === 2) return M[0][0] * M[1][1] - M[0][1] * M[1][0];\n\n  let det = 0;\n  for (let j = 0; j < n; ++j) {\n    let diagLeft = M[0][j];\n    let diagRight = M[0][j];\n    for (let i = 1; i < n; ++i) {\n      diagRight *= M[i][(j + i) % n];\n      diagLeft *= M[i][(j - i + n) % n];\n    }\n    det += diagRight - diagLeft;\n  }\n\n  return det;\n}\n\n/** Calculates the inverse of a matrix M. */\nexport function inverse(M: Matrix) {\n  // Perform Gaussian elimination:\n  // (1) Apply the same operations to both I and C.\n  // (2) Turn C into the identity, thereby turning I into the inverse of C.\n\n  const n = M.length;\n  if (n !== M[0].length) throw new Error('Not a square matrix.');\n\n  const I = identity(n);\n  const C = tabulate2D((x, y) => M[x][y], n, n);  // Copy of original matrix\n\n  for (let i = 0; i < n; ++i) {\n    // Loop over the elements e in along the diagonal of C.\n    let e = C[i][i];\n\n    // If e is 0, we need to swap this row with a lower row.\n    if (nearlyEquals(e, 0)) {\n      for (let ii = i + 1; ii < n; ++ii) {\n        if (C[ii][i] !== 0) {\n          for (let j = 0; j < n; ++j) {\n            [C[ii][j], C[i][j]] = [C[i][j], C[ii][j]];\n            [I[ii][j], I[i][j]] = [I[i][j], I[ii][j]];\n          }\n          break;\n        }\n      }\n      e = C[i][i];\n      if (nearlyEquals(e, 0)) throw new Error('Matrix not invertible.');\n    }\n\n    // Scale row by e, so that we have a 1 on the diagonal.\n    for (let j = 0; j < n; ++j) {\n      C[i][j] = C[i][j] / e;\n      I[i][j] = I[i][j] / e;\n    }\n\n    // Subtract a multiple of this row from all other rows,\n    // so that they end up having 0s in this column.\n    for (let ii = 0; ii < n; ++ii) {\n      if (ii === i) continue;\n      const f = C[ii][i];\n      for (let j = 0; j < n; ++j) {\n        C[ii][j] -= f * C[i][j];\n        I[ii][j] -= f * I[i][j];\n      }\n    }\n  }\n\n  return I;\n}\n", "// ============================================================================\n// Fermat.js | Random Numbers\n// (c) Mathigon\n// ============================================================================\n\n\nimport {repeat, total, uid} from '@mathigon/core';\n\n\n/** Randomly shuffles the elements in an array a. */\nexport function shuffle<T>(a: T[]): T[] {\n  a = a.slice(0); // create copy\n  for (let i = a.length - 1; i > 0; --i) {\n    const j = Math.floor(Math.random() * (i + 1));\n    [a[i], a[j]] = [a[j], a[i]];\n  }\n  return a;\n}\n\n/** Generates a random integer between 0 and a, or between a and b. */\nexport function integer(a: number, b?: number) {\n  const start = (b === undefined ? 0 : a);\n  const length = (b === undefined ? a : b - a + 1);\n  return start + Math.floor(length * Math.random());\n}\n\n/** Chooses a random index value from weights [2, 5, 3] */\nexport function weighted(weights: number[]) {\n  const x = Math.random() * total(weights);\n\n  let cum = 0;\n  return weights.findIndex((w) => (cum += w) >= x);\n}\n\n/** Randomly selects an element from an array. */\nexport function find<T>(items: T[]): T {\n  return items[Math.floor(items.length * Math.random())];\n}\n\n\n// ---------------------------------------------------------------------------\n// Smart Random Number Generators\n\nconst SMART_RANDOM_CACHE = new Map<string, number[]>();\n\n/**\n * Returns a random number between 0 and n, but avoids returning the same\n * number multiple times in a row.\n */\nexport function smart(n: number, id: string) {\n  if (!id) id = uid();\n  if (!SMART_RANDOM_CACHE.has(id)) SMART_RANDOM_CACHE.set(id, repeat(1, n));\n\n  const cache = SMART_RANDOM_CACHE.get(id)!;\n  const x = weighted(cache.map(x => x * x));\n\n  cache[x] -= 1;\n  if (cache[x] <= 0) SMART_RANDOM_CACHE.set(id, cache.map(x => x + 1));\n\n  return x;\n}\n\n\n// ---------------------------------------------------------------------------\n// Probability Distribution\n\n/** Generates a Bernoulli random variable. */\nexport function bernoulli(p = 0.5) {\n  return (Math.random() < p ? 1 : 0);\n}\n\n/** Generates a Binomial random variable. */\nexport function binomial(n = 1, p = 0.5) {\n  let t = 0;\n  for (let i = 0; i < n; ++i) t += bernoulli(p);\n  return t;\n}\n\n/** Generates a Poisson random variable. */\nexport function poisson(l = 1) {\n  if (l <= 0) return 0;\n  const L = Math.exp(-l);\n  let p = 1;\n\n  let k = 0;\n  for (; p > L; ++k) p *= Math.random();\n  return k - 1;\n}\n\n/** Generates a uniform random variable. */\nexport function uniform(a = 0, b = 1) {\n  return a + (b - a) * Math.random();\n}\n\n/** Generates a normal random variable with mean m and variance v. */\nexport function normal(m = 0, v = 1) {\n  const u1 = Math.random();\n  const u2 = Math.random();\n  const rand = Math.sqrt(-2 * Math.log(u1)) * Math.cos(2 * Math.PI * u2);\n  return rand * Math.sqrt(v) + m;\n}\n\n/** Generates an exponential random variable. */\nexport function exponential(l = 1) {\n  return l <= 0 ? 0 : -Math.log(Math.random()) / l;\n}\n\n/** Generates a geometric random variable. */\nexport function geometric(p = 0.5) {\n  if (p <= 0 || p > 1) return undefined;\n  return Math.floor(Math.log(Math.random()) / Math.log(1 - p));\n}\n\n/** Generates an Cauchy random variable. */\nexport function cauchy() {\n  let rr; let v1; let v2;\n  do {\n    v1 = 2 * Math.random() - 1;\n    v2 = 2 * Math.random() - 1;\n    rr = v1 * v1 + v2 * v2;\n  } while (rr >= 1);\n  return v1 / v2;\n}\n\n\n// ---------------------------------------------------------------------------\n// PDFs and CDFs\n\n/** Generates pdf(x) for the normal distribution with mean m and variance v. */\nexport function normalPDF(x: number, m = 1, v = 0) {\n  return Math.exp(-((x - m) ** 2) / (2 * v)) / Math.sqrt(2 * Math.PI * v);\n}\n\nconst G = 7;\nconst P = [\n  0.99999999999980993,\n  676.5203681218851,\n  -1259.1392167224028,\n  771.32342877765313,\n  -176.61502916214059,\n  12.507343278686905,\n  -0.13857109526572012,\n  9.9843695780195716e-6,\n  1.5056327351493116e-7\n];\n\nfunction gamma(z: number): number {\n  if (z < 0.5) return Math.PI / (Math.sin(Math.PI * z) * gamma(1 - z));\n\n  z -= 1;\n  let x = P[0];\n  for (let i = 1; i < G + 2; i++) x += P[i] / (z + i);\n  const t = z + G + 0.5;\n\n  return Math.sqrt(2 * Math.PI) * Math.pow(t, z + 0.5) * Math.exp(-t) * x;\n}\n\n/** Riemann-integrates fn(x) from xMin to xMax with an interval size dx. */\nexport function integrate(fn: (x: number) => number, xMin: number, xMax: number, dx = 1) {\n  let result = 0;\n  for (let x = xMin; x < xMax; x += dx) {\n    result += (fn(x) * dx || 0);\n  }\n  return result;\n}\n\n/** The chi CDF function. */\nexport function chiCDF(chi: number, deg: number) {\n  const int = integrate(t => Math.pow(t, (deg - 2) / 2) * Math.exp(-t / 2), 0, chi);\n  return 1 - int / Math.pow(2, deg / 2) / gamma(deg / 2);\n}\n", "// =============================================================================\n// Fermat.js | Regression Functions\n// (c) Mathigon\n// =============================================================================\n\n\nimport {list} from '@mathigon/core';\nimport * as Matrix from './matrix';\n\n\nfunction evaluatePolynomial(regression: number[], x: number) {\n  let xs = 1;\n  let t = regression[0];\n  for (let i = 1; i < regression.length; ++i) {\n    xs *= x;\n    t += xs * regression[i];\n  }\n  return t;\n}\n\ntype Coordinate = [number, number];\n\n/**\n * Finds a linear regression that best approximates a set of data. The result\n * will be an array [c, m], where y = m * x + c.\n */\nexport function linear(data: Coordinate[], throughOrigin = false) {\n  let sX = 0; let sY = 0; let sXX = 0; let sXY = 0;\n  const len = data.length;\n\n  for (let n = 0; n < len; n++) {\n    sX += data[n][0];\n    sY += data[n][1];\n    sXX += data[n][0] * data[n][0];\n    sXY += data[n][0] * data[n][1];\n  }\n\n  if (throughOrigin) {\n    const gradient = sXY / sXX;\n    return [0, gradient];\n  }\n\n  const gradient = (len * sXY - sX * sY) / (len * sXX - sX * sX);\n  const intercept = (sY / len) - (gradient * sX) / len;\n  return [intercept, gradient];\n}\n\n\n/**\n * Finds an exponential regression that best approximates a set of data. The\n * result will be an array [a, b], where y = a * e^(bx).\n */\nexport function exponential(data: Coordinate[]) {\n  const sum = [0, 0, 0, 0, 0, 0];\n\n  for (const d of data) {\n    sum[0] += d[0];\n    sum[1] += d[1];\n    sum[2] += d[0] * d[0] * d[1];\n    sum[3] += d[1] * Math.log(d[1]);\n    sum[4] += d[0] * d[1] * Math.log(d[1]);\n    sum[5] += d[0] * d[1];\n  }\n\n  const denominator = (sum[1] * sum[2] - sum[5] * sum[5]);\n  const a = Math.exp((sum[2] * sum[3] - sum[5] * sum[4]) / denominator);\n  const b = (sum[1] * sum[4] - sum[5] * sum[3]) / denominator;\n\n  return [a, b];\n}\n\n/**\n * Finds a logarithmic regression that best approximates a set of data. The\n * result will be an array [a, b], where y = a + b * log(x).\n */\nexport function logarithmic(data: Coordinate[]) {\n  const sum = [0, 0, 0, 0];\n  const len = data.length;\n\n  for (const d of data) {\n    sum[0] += Math.log(d[0]);\n    sum[1] += d[1] * Math.log(d[0]);\n    sum[2] += d[1];\n    sum[3] += Math.pow(Math.log(d[0]), 2);\n  }\n\n  const b = (len * sum[1] - sum[2] * sum[0]) /\n            (len * sum[3] - sum[0] * sum[0]);\n  const a = (sum[2] - b * sum[0]) / len;\n  return [a, b];\n}\n\n/**\n * Finds a power regression that best approximates a set of data. The result\n * will be an array [a, b], where y = a * x^b.\n */\nexport function power(data: Coordinate[]) {\n  const sum = [0, 0, 0, 0];\n  const len = data.length;\n\n  for (const d of data) {\n    sum[0] += Math.log(d[0]);\n    sum[1] += Math.log(d[1]) * Math.log(d[0]);\n    sum[2] += Math.log(d[1]);\n    sum[3] += Math.pow(Math.log(d[0]), 2);\n  }\n\n  const b = (len * sum[1] - sum[2] * sum[0]) /\n            (len * sum[3] - sum[0] * sum[0]);\n  const a = Math.exp((sum[2] - b * sum[0]) / len);\n  return [a, b];\n}\n\n/**\n * Finds a polynomial regression of given `order` that best approximates a set\n * of data. The result will be an array giving the coefficients of the\n * resulting polynomial.\n */\nexport function polynomial(data: Coordinate[], order = 2) {\n  // X = [[1, x1, x1^2], [1, x2, x2^2], [1, x3, x3^2]\n  // y = [y1, y2, y3]\n\n  const X = data.map(d => list(order + 1).map(p => Math.pow(d[0], p)));\n  const XT = Matrix.transpose(X);\n  const y = data.map(d => [d[1]]);\n\n  const XTX = Matrix.product(XT, X);     // XT*X\n  const inv = Matrix.inverse(XTX);       // (XT*X)^(-1)\n  const r = Matrix.product(inv, XT, y);  // (XT*X)^(-1) * XT * y\n\n  return r.map(x => x[0]);  // Flatten matrix\n}\n\n\n// ---------------------------------------------------------------------------\n// Regression Coefficient\n\n/**\n * Finds the regression coefficient of a given data set and regression\n * function.\n */\nexport function coefficient(data: Coordinate[], fn: (x: number) => number) {\n  const total = data.reduce((sum, d) => sum + d[1], 0);\n  const mean = total / data.length;\n\n  // Sum of squares of differences from the mean in the dependent variable\n  const ssyy = data.reduce((sum, d) => sum + (d[1] - mean) ** 2, 0);\n\n  // Sum of squares of residuals\n  const sse = data.reduce((sum, d) => sum + (d[1] - fn(d[0])) ** 2, 0);\n\n  return 1 - (sse / ssyy);\n}\n\n\n// ---------------------------------------------------------------------------\n// Multi-Regression\n\n/** Finds the most suitable polynomial regression for a given dataset. */\nexport function bestPolynomial(data: Coordinate[], threshold = 0.85, maxOrder = 8) {\n  if (data.length <= 1) return undefined;\n\n  for (let i = 1; i < maxOrder; ++i) {\n    const reg = polynomial(data, i);\n    const fn = (x: number) => evaluatePolynomial(reg, x);\n    const coeff = coefficient(data, fn);\n    if (coeff >= threshold) return {order: i, coefficients: reg, fn};\n  }\n\n  return undefined;\n}\n", "// ============================================================================\n// Fermat.ts | Statistics\n// (c) Mathigon\n// ============================================================================\n\n\nimport {total} from '@mathigon/core';\nimport {lerp} from './arithmetic';\n\n\n/** Calculates the mean of an array of numbers. */\nexport function mean(values: number[]) {\n  return values.length ? total(values) / values.length : 0;\n}\n\n/** Finds the quantile of an array of numbers for the cumulative probability p. */\nexport function quantile(values: number[], p: number): number {\n  const n = values.length;\n  if (!n) return 0;\n\n  const sorted = values.slice(0).sort((a, b) => (a - b));\n  if (p === 0) return values[0];\n  if (p === 1) return values[n - 1];\n\n  // See https://en.wikipedia.org/wiki/Quantile#Estimating_quantiles_from_a_sample\n  const index = n * p - 0.5;\n  // Option A: (n - 1) * p        Excel Default, Python/NumPy, Google Docs, R Default\n  // Option B: (n + 1) * p - 1    Excel Option, WIKI 4\n  // Option C: n * p - 0.5        >> WIKI 3, Matlab, Mathematics\n\n  if (Number.isInteger(index)) return sorted[index];\n  const floor = Math.floor(index);\n  return lerp(sorted[floor], sorted[floor + 1], index - floor);\n}\n\n/** Calculates the median of an array of numbers. */\nexport function median(values: number[]) {\n  return quantile(values, 0.5);\n}\n\n/**\n * Calculates the mode of an array of numbers. Returns undefined if no mode\n * exists, i.e. there are multiple values with the same largest count.\n */\nexport function mode(values: number[]) {\n  const counts = new Map<number, number>();\n\n  let maxCount = -1;\n  let result: number|undefined = undefined;\n\n  for (const v of values) {\n    if (!counts.has(v)) {\n      counts.set(v, 1);\n    } else {\n      const newCount = counts.get(v)! + 1;\n      counts.set(v, newCount);\n      if (newCount === maxCount) {\n        result = undefined;\n      } else if (newCount > maxCount) {\n        maxCount = newCount;\n        result = v;\n      }\n    }\n  }\n\n  return result;\n}\n\n/** Calculates the variance of an array of numbers. */\nexport function variance(values: number[]) {\n  if (!values.length) return undefined;\n  const m = mean(values);\n\n  const sum = values.reduce((a, v) => a + (v - m) ** 2, 0);\n  return sum / (values.length - 1);\n}\n\n/** Calculates the standard deviation of an array of numbers. */\nexport function stdDev(values: number[]) {\n  const v = variance(values);\n  return v ? Math.sqrt(v) : 0;\n}\n\n/** Calculates the covariance of the numbers in two arrays aX and aY. */\nexport function covariance(aX: number[], aY: number[]) {\n  if (aX.length !== aY.length) throw new Error('Array length mismatch.');\n  const sum = aX.reduce((a, v, i) => a + v * aY[i], 0);\n  return (sum - total(aX) * total(aY) / aX.length) / aX.length;\n}\n\n/** Calculates the correlation between the numbers in two arrays aX and aY. */\nexport function correlation(aX: number[], aY: number[]) {\n  if (aX.length !== aY.length) throw new Error('Array length mismatch.');\n  const covarXY = covariance(aX, aY);\n  const stdDevX = stdDev(aX);\n  const stdDevY = stdDev(aY);\n  return covarXY / (stdDevX * stdDevY);\n}\n", "// =============================================================================\n// Fermat.js | Vectors\n// (c) Mathigon\n// =============================================================================\n\n\nimport {total} from '@mathigon/core';\nimport {nearlyEquals} from './arithmetic';\n\n\n/** A n-dimensional Vector class. */\nexport class Vector extends Array<number> {\n\n  constructor(...args: number[]) {\n    super();\n    for (const i of args) this.push(i);\n  }\n\n  /** Returns the magnitude of the Vector */\n  get magnitude() {\n    let squares = 0;\n    for (let i = 0; i < this.length; ++i) squares += this[i] ** 2;\n    return Math.sqrt(squares);\n  }\n\n  /** Returns the unitVector of the Vector */\n  get unitVector() {\n    return this.scale(1 / this.magnitude);\n  }\n\n  /** Scales this vector by a factor q. */\n  scale(q: number) {\n    return this.map((x: number) => q * x);\n  }\n\n  // -------------------------------------------------------------------------\n\n  /** Calculates the sum of two vectors v1 and v2. */\n  static sum(v1: Vector, v2: Vector) {\n    if (v1.length !== v2.length) throw new Error('Mismatched vector sizes.');\n    return v1.map((v, i) => v + v2[i]);\n  }\n\n  /** Calculates the difference of two vectors v1 and v2. */\n  static difference(v1: Vector, v2: Vector) {\n    if (v1.length !== v2.length) throw new Error('Mismatched vector sizes.');\n    return v1.map((v, i) => v - v2[i]);\n  }\n\n  /** Calculates the element-wise product of two vectors v1 and v2. */\n  static product(v1: Vector, v2: Vector) {\n    if (v1.length !== v2.length) throw new Error('Mismatched vector sizes.');\n    return v1.map((v, i) => v * v2[i]);\n  }\n\n  /** Calculates the dot product of two vectors v1 and v2. */\n  static dot(v1: Vector, v2: Vector) {\n    return total(Vector.product(v1, v2));\n  }\n\n  /** Finds the cross product of two 3-dimensional vectors v1 and v2. */\n  static cross(v1: Vector, v2: Vector) {\n    if (v1.length !== 3 || v2.length !== 3) {\n      throw new Error('Cross product requires vectors of size 3.');\n    }\n    return new Vector(v1[1] * v2[2] - v1[2] * v2[1],\n      v1[2] * v2[0] - v1[0] * v2[2],\n      v1[0] * v2[1] - v1[1] * v2[0]);\n  }\n\n  /** Checks if two vectors are equal. */\n  static equals(v1: Vector, v2: Vector) {\n    const n = v1.length;\n    if (n !== v2.length) return false;\n    for (let i = 0; i < n; ++i) if (!nearlyEquals(v1[i], v2[i])) return false;\n    return true;\n  }\n}\n"],
  "mappings": "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",
  "names": ["digits", "total", "subsets", "power", "import_core", "P", "binomial", "import_core", "x", "exponential", "polynomial", "import_core", "gradient", "exponential", "sum", "polynomial", "total", "mean", "import_core", "sum", "import_core"]
}
